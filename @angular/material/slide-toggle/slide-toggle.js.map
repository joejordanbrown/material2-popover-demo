{"version":3,"sources":["../../../src/lib/slide-toggle/slide-toggle.ts"],"names":[],"mappings":"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","file":"slide-toggle.js","sourcesContent":["import {\r\n  Component,\r\n  ElementRef,\r\n  Renderer,\r\n  forwardRef,\r\n  ChangeDetectionStrategy,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  AfterContentInit,\r\n  NgModule,\r\n  ModuleWithProviders,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\r\nimport {FormsModule, ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\r\nimport {\r\n  applyCssTransform,\r\n  coerceBooleanProperty,\r\n  GestureConfig,\r\n  HammerInput,\r\n  CompatibilityModule,\r\n} from '../core';\r\nimport {Observable} from 'rxjs/Observable';\r\n\r\n\r\nexport const MD_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => MdSlideToggle),\r\n  multi: true\r\n};\r\n\r\n// A simple change event emitted by the MdSlideToggle component.\r\nexport class MdSlideToggleChange {\r\n  source: MdSlideToggle;\r\n  checked: boolean;\r\n}\r\n\r\n// Increasing integer for generating unique ids for slide-toggle components.\r\nlet nextId = 0;\r\n\r\n/**\r\n * Two-state control, which can be also called `switch`.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'md-slide-toggle, mat-slide-toggle',\r\n  host: {\r\n    '[class.md-checked]': 'checked',\r\n    '[class.md-disabled]': 'disabled',\r\n    // This md-slide-toggle prefix will change, once the temporary ripple is removed.\r\n    '[class.md-slide-toggle-focused]': '_hasFocus',\r\n    '(mousedown)': '_setMousedown()'\r\n  },\r\n  templateUrl: 'slide-toggle.html',\r\n  styleUrls: ['slide-toggle.css'],\r\n  providers: [MD_SLIDE_TOGGLE_VALUE_ACCESSOR],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class MdSlideToggle implements AfterContentInit, ControlValueAccessor {\r\n\r\n  private onChange = (_: any) => {};\r\n  private onTouched = () => {};\r\n\r\n  // A unique id for the slide-toggle. By default the id is auto-generated.\r\n  private _uniqueId = `md-slide-toggle-${++nextId}`;\r\n  private _checked: boolean = false;\r\n  private _color: string;\r\n  private _isMousedown: boolean = false;\r\n  private _slideRenderer: SlideToggleRenderer = null;\r\n  private _disabled: boolean = false;\r\n  private _required: boolean = false;\r\n\r\n  // Needs to be public to support AOT compilation (as host binding).\r\n  _hasFocus: boolean = false;\r\n\r\n  /** Name value will be applied to the input element if present */\r\n  @Input() name: string = null;\r\n\r\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\r\n  @Input() id: string = this._uniqueId;\r\n\r\n  /** Used to specify the tabIndex value for the underlying input element. */\r\n  @Input() tabIndex: number = 0;\r\n\r\n  /** Used to set the aria-label attribute on the underlying input element. */\r\n  @Input('aria-label') ariaLabel: string = null;\r\n\r\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\r\n  @Input('aria-labelledby') ariaLabelledby: string = null;\r\n\r\n  /** Whether the slide-toggle is disabled. */\r\n  @Input()\r\n  get disabled(): boolean { return this._disabled; }\r\n  set disabled(value) { this._disabled = coerceBooleanProperty(value); }\r\n\r\n  /** Whether the slide-toggle is required. */\r\n  @Input()\r\n  get required(): boolean { return this._required; }\r\n  set required(value) { this._required = coerceBooleanProperty(value); }\r\n\r\n  private _change: EventEmitter<MdSlideToggleChange> = new EventEmitter<MdSlideToggleChange>();\r\n  /** An event will be dispatched each time the slide-toggle changes its value. */\r\n  @Output() change: Observable<MdSlideToggleChange> = this._change.asObservable();\r\n\r\n  /** Returns the unique id for the visual hidden input. */\r\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\r\n\r\n  @ViewChild('input') _inputElement: ElementRef;\r\n\r\n  constructor(private _elementRef: ElementRef, private _renderer: Renderer) {}\r\n\r\n  ngAfterContentInit() {\r\n    this._slideRenderer = new SlideToggleRenderer(this._elementRef);\r\n  }\r\n\r\n  /**\r\n   * The onChangeEvent method will be also called on click.\r\n   * This is because everything for the slide-toggle is wrapped inside of a label,\r\n   * which triggers a onChange event on click.\r\n   */\r\n  _onChangeEvent(event: Event) {\r\n    // We always have to stop propagation on the change event.\r\n    // Otherwise the change event, from the input element, will bubble up and\r\n    // emit its event object to the component's `change` output.\r\n    event.stopPropagation();\r\n\r\n    // Once a drag is currently in progress, we do not want to toggle the slide-toggle on a click.\r\n    if (!this.disabled && !this._slideRenderer.isDragging()) {\r\n      this.toggle();\r\n\r\n      // Emit our custom change event if the native input emitted one.\r\n      // It is important to only emit it, if the native input triggered one, because\r\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\r\n      this._emitChangeEvent();\r\n    }\r\n  }\r\n\r\n  _onInputClick(event: Event) {\r\n    this.onTouched();\r\n\r\n    // We have to stop propagation for click events on the visual hidden input element.\r\n    // By default, when a user clicks on a label element, a generated click event will be\r\n    // dispatched on the associated input element. Since we are using a label element as our\r\n    // root container, the click event on the `slide-toggle` will be executed twice.\r\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\r\n    // This will lead to multiple click events.\r\n    // Preventing bubbling for the second event will solve that issue.\r\n    event.stopPropagation();\r\n  }\r\n\r\n  _setMousedown() {\r\n    // We only *show* the focus style when focus has come to the button via the keyboard.\r\n    // The Material Design spec is silent on this topic, and without doing this, the\r\n    // button continues to look :active after clicking.\r\n    // @see http://marcysutton.com/button-focus-hell/\r\n    this._isMousedown = true;\r\n    setTimeout(() => this._isMousedown = false, 100);\r\n  }\r\n\r\n  _onInputFocus() {\r\n    // Only show the focus / ripple indicator when the focus was not triggered by a mouse\r\n    // interaction on the component.\r\n    if (!this._isMousedown) {\r\n      this._hasFocus = true;\r\n    }\r\n  }\r\n\r\n  _onInputBlur() {\r\n    this._hasFocus = false;\r\n    this.onTouched();\r\n  }\r\n\r\n  /** Implemented as part of ControlValueAccessor. */\r\n  writeValue(value: any): void {\r\n    this.checked = value;\r\n  }\r\n\r\n  /** Implemented as part of ControlValueAccessor. */\r\n  registerOnChange(fn: any): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  /** Implemented as part of ControlValueAccessor. */\r\n  registerOnTouched(fn: any): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  /** Implemented as a part of ControlValueAccessor. */\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this.disabled = isDisabled;\r\n  }\r\n\r\n  /** Focuses the slide-toggle. */\r\n  focus() {\r\n    this._renderer.invokeElementMethod(this._inputElement.nativeElement, 'focus');\r\n    this._onInputFocus();\r\n  }\r\n\r\n  /** Whether the slide-toggle is checked. */\r\n  @Input()\r\n  get checked() { return !!this._checked; }\r\n  set checked(value) {\r\n    if (this.checked !== !!value) {\r\n      this._checked = value;\r\n      this.onChange(this._checked);\r\n    }\r\n  }\r\n\r\n  /** The color of the slide-toggle. Can be primary, accent, or warn. */\r\n  @Input()\r\n  get color(): string { return this._color; }\r\n  set color(value: string) {\r\n    this._updateColor(value);\r\n  }\r\n\r\n  /** Toggles the checked state of the slide-toggle. */\r\n  toggle() {\r\n    this.checked = !this.checked;\r\n  }\r\n\r\n  private _updateColor(newColor: string) {\r\n    this._setElementColor(this._color, false);\r\n    this._setElementColor(newColor, true);\r\n    this._color = newColor;\r\n  }\r\n\r\n  private _setElementColor(color: string, isAdd: boolean) {\r\n    if (color != null && color != '') {\r\n      this._renderer.setElementClass(this._elementRef.nativeElement, `md-${color}`, isAdd);\r\n    }\r\n  }\r\n\r\n  /** Emits the change event to the `change` output EventEmitter */\r\n  private _emitChangeEvent() {\r\n    let event = new MdSlideToggleChange();\r\n    event.source = this;\r\n    event.checked = this.checked;\r\n    this._change.emit(event);\r\n  }\r\n\r\n\r\n  _onDragStart() {\r\n    if (!this.disabled) {\r\n      this._slideRenderer.startThumbDrag(this.checked);\r\n    }\r\n  }\r\n\r\n  _onDrag(event: HammerInput) {\r\n    if (this._slideRenderer.isDragging()) {\r\n      this._slideRenderer.updateThumbPosition(event.deltaX);\r\n    }\r\n  }\r\n\r\n  _onDragEnd() {\r\n    if (!this._slideRenderer.isDragging()) {\r\n      return;\r\n    }\r\n\r\n    // Notice that we have to stop outside of the current event handler,\r\n    // because otherwise the click event will be fired and will reset the new checked variable.\r\n    setTimeout(() => {\r\n      this.checked = this._slideRenderer.stopThumbDrag();\r\n      this._emitChangeEvent();\r\n    }, 0);\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * Renderer for the Slide Toggle component, which separates DOM modification in its own class\r\n */\r\nclass SlideToggleRenderer {\r\n\r\n  private _thumbEl: HTMLElement;\r\n  private _thumbBarEl: HTMLElement;\r\n  private _thumbBarWidth: number;\r\n  private _checked: boolean;\r\n  private _percentage: number;\r\n\r\n  constructor(private _elementRef: ElementRef) {\r\n    this._thumbEl = _elementRef.nativeElement.querySelector('.md-slide-toggle-thumb-container');\r\n    this._thumbBarEl = _elementRef.nativeElement.querySelector('.md-slide-toggle-bar');\r\n  }\r\n\r\n  /** Whether the slide-toggle is currently dragging. */\r\n  isDragging(): boolean {\r\n    return !!this._thumbBarWidth;\r\n  }\r\n\r\n\r\n  /** Initializes the drag of the slide-toggle. */\r\n  startThumbDrag(checked: boolean) {\r\n    if (!this.isDragging()) {\r\n      this._thumbBarWidth = this._thumbBarEl.clientWidth - this._thumbEl.clientWidth;\r\n      this._checked = checked;\r\n      this._thumbEl.classList.add('md-dragging');\r\n    }\r\n  }\r\n\r\n  /** Stops the current drag and returns the new checked value. */\r\n  stopThumbDrag(): boolean {\r\n    if (this.isDragging()) {\r\n      this._thumbBarWidth = null;\r\n      this._thumbEl.classList.remove('md-dragging');\r\n\r\n      applyCssTransform(this._thumbEl, '');\r\n\r\n      return this._percentage > 50;\r\n    }\r\n  }\r\n\r\n  /** Updates the thumb containers position from the specified distance. */\r\n  updateThumbPosition(distance: number) {\r\n    this._percentage = this._getThumbPercentage(distance);\r\n    applyCssTransform(this._thumbEl, `translate3d(${this._percentage}%, 0, 0)`);\r\n  }\r\n\r\n  /** Retrieves the percentage of thumb from the moved distance. */\r\n  private _getThumbPercentage(distance: number) {\r\n    let percentage = (distance / this._thumbBarWidth) * 100;\r\n\r\n    // When the toggle was initially checked, then we have to start the drag at the end.\r\n    if (this._checked) {\r\n      percentage += 100;\r\n    }\r\n\r\n    return Math.max(0, Math.min(percentage, 100));\r\n  }\r\n\r\n}\r\n\r\n\r\n@NgModule({\r\n  imports: [FormsModule, CompatibilityModule],\r\n  exports: [MdSlideToggle, CompatibilityModule],\r\n  declarations: [MdSlideToggle],\r\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}],\r\n})\r\nexport class MdSlideToggleModule {\r\n  /** @deprecated */\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: MdSlideToggleModule,\r\n      providers: []\r\n    };\r\n  }\r\n}\r\n"]}