{"version":3,"sources":["../../../src/lib/snack-bar/snack-bar.ts"],"names":[],"mappings":";;;;;;;;;;;;OAAO,EACL,QAAQ,EAER,UAAU,EAEV,QAAQ,EACR,QAAQ,EACT,MAAM,eAAe;OACf,EAEL,eAAe,EACf,OAAO,EACP,aAAa,EAEb,YAAY,EACZ,YAAY,EACZ,aAAa,EACb,mBAAmB,EACnB,uBAAuB,EACxB,MAAM,SAAS;OACT,EAAC,YAAY,EAAC,MAAM,iBAAiB;OACrC,EAAC,gBAAgB,EAAC,MAAM,oBAAoB;OAC5C,EAAC,aAAa,EAAC,MAAM,iBAAiB;OACtC,EAAC,mBAAmB,EAAC,MAAM,uBAAuB;OAClD,EAAC,cAAc,EAAC,MAAM,oBAAoB;OAC1C,EAAC,YAAY,EAAC,MAAM,4BAA4B;AAGvD;;GAEG;AAEH;IAsBE,oBACY,QAAiB,EACjB,KAAoB,EACI,eAA2B;QAFnD,aAAQ,GAAR,QAAQ,CAAS;QACjB,UAAK,GAAL,KAAK,CAAe;QACI,oBAAe,GAAf,eAAe,CAAY;IAAG,CAAC;IAhBnE,sBAAI,0CAAkB;QADtB,iEAAiE;aACjE;YACE,MAAM,CAAC,IAAI,CAAC,eAAe;gBACvB,IAAI,CAAC,eAAe,CAAC,kBAAkB,GAAG,IAAI,CAAC,uBAAuB,CAAC;QAC7E,CAAC;aAED,UAAuB,KAAyB;YAC9C,EAAE,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC;gBACzB,IAAI,CAAC,eAAe,CAAC,kBAAkB,GAAG,KAAK,CAAC;YAClD,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,IAAI,CAAC,uBAAuB,GAAG,KAAK,CAAC;YACvC,CAAC;QACH,CAAC;;;OARA;IAeD;;;;;;OAMG;IACH,sCAAiB,GAAjB,UAAqB,SAA2B,EAAE,MAAyB;QAA3E,iBAoCC;QAnCC,MAAM,GAAG,oBAAoB,CAAC,MAAM,CAAC,CAAC;QACtC,IAAI,UAAU,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;QACvC,IAAI,iBAAiB,GAAG,IAAI,CAAC,wBAAwB,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;QAC1E,IAAI,WAAW,GAAG,IAAI,CAAC,sBAAsB,CAAC,SAAS,EAAE,iBAAiB,EAAE,UAAU,CAAC,CAAC;QAExF,6DAA6D;QAC7D,WAAW,CAAC,cAAc,EAAE,CAAC,SAAS,CAAC;YACrC,iFAAiF;YACjF,EAAE,CAAC,CAAC,KAAI,CAAC,kBAAkB,IAAI,WAAW,CAAC,CAAC,CAAC;gBAC3C,KAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;YACjC,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,uFAAuF;QACvF,yBAAyB;QACzB,EAAE,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC;YAC5B,IAAI,CAAC,kBAAkB,CAAC,cAAc,EAAE,CAAC,SAAS,CAAC;gBACjD,WAAW,CAAC,iBAAiB,CAAC,KAAK,EAAE,CAAC;YACxC,CAAC,CAAC,CAAC;YACH,IAAI,CAAC,kBAAkB,CAAC,OAAO,EAAE,CAAC;QAEpC,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,WAAW,CAAC,iBAAiB,CAAC,KAAK,EAAE,CAAC;QACxC,CAAC;QAED,0FAA0F;QAC1F,EAAE,CAAC,CAAC,MAAM,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC,CAAC;YACxB,WAAW,CAAC,WAAW,EAAE,CAAC,SAAS,CAAC;gBAClC,UAAU,CAAC,cAAM,OAAA,WAAW,CAAC,OAAO,EAAE,EAArB,CAAqB,EAAE,MAAM,CAAC,QAAQ,CAAC,CAAC;YAC3D,CAAC,CAAC,CAAC;QACL,CAAC;QAED,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,mBAAmB,EAAE,MAAM,CAAC,UAAU,CAAC,CAAC;QACnE,IAAI,CAAC,kBAAkB,GAAG,WAAW,CAAC;QACtC,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC;IACjC,CAAC;IAED;;;;;OAKG;IACH,yBAAI,GAAJ,UAAK,OAAe,EAAE,MAAW,EAAE,MAA6B;QAA1C,sBAAW,GAAX,WAAW;QAAE,sBAA6B,GAA7B,WAA6B;QAC9D,MAAM,CAAC,mBAAmB,GAAG,OAAO,CAAC;QACrC,IAAI,iBAAiB,GAAG,IAAI,CAAC,iBAAiB,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;QACvE,iBAAiB,CAAC,QAAQ,CAAC,WAAW,GAAG,iBAAiB,CAAC;QAC3D,iBAAiB,CAAC,QAAQ,CAAC,OAAO,GAAG,OAAO,CAAC;QAC7C,iBAAiB,CAAC,QAAQ,CAAC,MAAM,GAAG,MAAM,CAAC;QAC3C,MAAM,CAAC,iBAAiB,CAAC;IAC3B,CAAC;IAED;;OAEG;IACK,6CAAwB,GAAhC,UAAiC,UAAsB,EACtB,MAAwB;QACvD,IAAI,eAAe,GAAG,IAAI,eAAe,CAAC,mBAAmB,EAAE,MAAM,CAAC,gBAAgB,CAAC,CAAC;QACxF,IAAI,YAAY,GAAsC,UAAU,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;QACzF,YAAY,CAAC,QAAQ,CAAC,cAAc,GAAG,MAAM,CAAC;QAE9C,MAAM,CAAC,YAAY,CAAC,QAAQ,CAAC;IAC/B,CAAC;IAED;;OAEG;IACK,2CAAsB,GAA9B,UAAkC,SAA2B,EAC3B,SAA8B,EAC9B,UAAsB;QACtD,IAAI,MAAM,GAAG,IAAI,eAAe,CAAC,SAAS,CAAC,CAAC;QAC5C,IAAI,UAAU,GAAG,SAAS,CAAC,qBAAqB,CAAC,MAAM,CAAC,CAAC;QACzD,MAAM,CAAC,IAAI,aAAa,CAAC,UAAU,CAAC,QAAQ,EAAE,SAAS,EAAE,UAAU,CAAC,CAAC;IACvE,CAAC;IAED;;OAEG;IACK,mCAAc,GAAtB;QACE,IAAI,KAAK,GAAG,IAAI,YAAY,EAAE,CAAC;QAC/B,KAAK,CAAC,gBAAgB,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,MAAM,EAAE;aACrD,kBAAkB,EAAE;aACpB,MAAM,CAAC,GAAG,CAAC,CAAC;QACjB,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IACrC,CAAC;IAxHH;QAAC,UAAU,EAAE;mBA0BN,QAAQ,EAAE;mBAAE,QAAQ,EAAE;;kBA1BhB;IAyHb,iBAAC;AAAD,CAxHA,AAwHC,IAAA;AAED;;;;GAIG;AACH,8BAA8B,MAAwB;IACpD,MAAM,CAAC,YAAY,CAAC,IAAI,gBAAgB,EAAE,EAAE,MAAM,CAAC,CAAC;AACtD,CAAC;AAUD;IAAA;IAQA,CAAC;IAPC,kBAAkB;IACX,wBAAO,GAAd;QACE,MAAM,CAAC;YACL,QAAQ,EAAE,gBAAgB;YAC1B,SAAS,EAAE,EAAE;SACd,CAAC;IACJ,CAAC;IAdH;QAAC,QAAQ,CAAC;YACR,OAAO,EAAE,CAAC,aAAa,EAAE,YAAY,EAAE,YAAY,EAAE,mBAAmB,CAAC;YACzE,OAAO,EAAE,CAAC,mBAAmB,EAAE,mBAAmB,CAAC;YACnD,YAAY,EAAE,CAAC,mBAAmB,EAAE,cAAc,CAAC;YACnD,eAAe,EAAE,CAAC,mBAAmB,EAAE,cAAc,CAAC;YACtD,SAAS,EAAE,CAAC,UAAU,EAAE,uBAAuB,CAAC;SACjD,CAAC;;wBAAA;IASF,uBAAC;AAAD,CARA,AAQC,IAAA","file":"snack-bar.js","sourcesContent":["import {\r\n  NgModule,\r\n  ModuleWithProviders,\r\n  Injectable,\r\n  ComponentRef,\r\n  Optional,\r\n  SkipSelf,\r\n} from '@angular/core';\r\nimport {\r\n  ComponentType,\r\n  ComponentPortal,\r\n  Overlay,\r\n  OverlayModule,\r\n  OverlayRef,\r\n  OverlayState,\r\n  PortalModule,\r\n  LiveAnnouncer,\r\n  CompatibilityModule,\r\n  LIVE_ANNOUNCER_PROVIDER,\r\n} from '../core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {MdSnackBarConfig} from './snack-bar-config';\r\nimport {MdSnackBarRef} from './snack-bar-ref';\r\nimport {MdSnackBarContainer} from './snack-bar-container';\r\nimport {SimpleSnackBar} from './simple-snack-bar';\r\nimport {extendObject} from '../core/util/object-extend';\r\n\r\n\r\n/**\r\n * Service to dispatch Material Design snack bar messages.\r\n */\r\n@Injectable()\r\nexport class MdSnackBar {\r\n  /**\r\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\r\n   * If there is a parent snack-bar service, all operations should delegate to that parent\r\n   * via `_openedSnackBarRef`.\r\n   */\r\n  private _snackBarRefAtThisLevel: MdSnackBarRef<any>;\r\n\r\n  /** Reference to the currently opened snackbar at *any* level. */\r\n  get _openedSnackBarRef(): MdSnackBarRef<any> {\r\n    return this._parentSnackBar ?\r\n        this._parentSnackBar._openedSnackBarRef : this._snackBarRefAtThisLevel;\r\n  }\r\n\r\n  set _openedSnackBarRef(value: MdSnackBarRef<any>) {\r\n    if (this._parentSnackBar) {\r\n      this._parentSnackBar._openedSnackBarRef = value;\r\n    } else {\r\n      this._snackBarRefAtThisLevel = value;\r\n    }\r\n  }\r\n\r\n  constructor(\r\n      private _overlay: Overlay,\r\n      private _live: LiveAnnouncer,\r\n      @Optional() @SkipSelf() private _parentSnackBar: MdSnackBar) {}\r\n\r\n  /**\r\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\r\n   * currently opened snack bars.\r\n   *\r\n   * @param component Component to be instantiated.\r\n   * @param config Extra configuration for the snack bar.\r\n   */\r\n  openFromComponent<T>(component: ComponentType<T>, config?: MdSnackBarConfig): MdSnackBarRef<T> {\r\n    config = _applyConfigDefaults(config);\r\n    let overlayRef = this._createOverlay();\r\n    let snackBarContainer = this._attachSnackBarContainer(overlayRef, config);\r\n    let snackBarRef = this._attachSnackbarContent(component, snackBarContainer, overlayRef);\r\n\r\n    // When the snackbar is dismissed, clear the reference to it.\r\n    snackBarRef.afterDismissed().subscribe(() => {\r\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\r\n      if (this._openedSnackBarRef == snackBarRef) {\r\n        this._openedSnackBarRef = null;\r\n      }\r\n    });\r\n\r\n    // If a snack bar is already in view, dismiss it and enter the new snack bar after exit\r\n    // animation is complete.\r\n    if (this._openedSnackBarRef) {\r\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\r\n        snackBarRef.containerInstance.enter();\r\n      });\r\n      this._openedSnackBarRef.dismiss();\r\n    // If no snack bar is in view, enter the new snack bar.\r\n    } else {\r\n      snackBarRef.containerInstance.enter();\r\n    }\r\n\r\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\r\n    if (config.duration > 0) {\r\n      snackBarRef.afterOpened().subscribe(() => {\r\n        setTimeout(() => snackBarRef.dismiss(), config.duration);\r\n      });\r\n    }\r\n\r\n    this._live.announce(config.announcementMessage, config.politeness);\r\n    this._openedSnackBarRef = snackBarRef;\r\n    return this._openedSnackBarRef;\r\n  }\r\n\r\n  /**\r\n   * Opens a snackbar with a message and an optional action.\r\n   * @param message The message to show in the snackbar.\r\n   * @param action The label for the snackbar action.\r\n   * @param config Additional configuration options for the snackbar.\r\n   */\r\n  open(message: string, action = '', config: MdSnackBarConfig = {}): MdSnackBarRef<SimpleSnackBar> {\r\n    config.announcementMessage = message;\r\n    let simpleSnackBarRef = this.openFromComponent(SimpleSnackBar, config);\r\n    simpleSnackBarRef.instance.snackBarRef = simpleSnackBarRef;\r\n    simpleSnackBarRef.instance.message = message;\r\n    simpleSnackBarRef.instance.action = action;\r\n    return simpleSnackBarRef;\r\n  }\r\n\r\n  /**\r\n   * Attaches the snack bar container component to the overlay.\r\n   */\r\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\r\n                                   config: MdSnackBarConfig): MdSnackBarContainer {\r\n    let containerPortal = new ComponentPortal(MdSnackBarContainer, config.viewContainerRef);\r\n    let containerRef: ComponentRef<MdSnackBarContainer> = overlayRef.attach(containerPortal);\r\n    containerRef.instance.snackBarConfig = config;\r\n\r\n    return containerRef.instance;\r\n  }\r\n\r\n  /**\r\n   * Places a new component as the content of the snack bar container.\r\n   */\r\n  private _attachSnackbarContent<T>(component: ComponentType<T>,\r\n                                    container: MdSnackBarContainer,\r\n                                    overlayRef: OverlayRef): MdSnackBarRef<T> {\r\n    let portal = new ComponentPortal(component);\r\n    let contentRef = container.attachComponentPortal(portal);\r\n    return new MdSnackBarRef(contentRef.instance, container, overlayRef);\r\n  }\r\n\r\n  /**\r\n   * Creates a new overlay and places it in the correct location.\r\n   */\r\n  private _createOverlay(): OverlayRef {\r\n    let state = new OverlayState();\r\n    state.positionStrategy = this._overlay.position().global()\r\n        .centerHorizontally()\r\n        .bottom('0');\r\n    return this._overlay.create(state);\r\n  }\r\n}\r\n\r\n/**\r\n * Applies default options to the snackbar config.\r\n * @param config The configuration to which the defaults will be applied.\r\n * @returns The new configuration object with defaults applied.\r\n */\r\nfunction _applyConfigDefaults(config: MdSnackBarConfig): MdSnackBarConfig {\r\n  return extendObject(new MdSnackBarConfig(), config);\r\n}\r\n\r\n\r\n@NgModule({\r\n  imports: [OverlayModule, PortalModule, CommonModule, CompatibilityModule],\r\n  exports: [MdSnackBarContainer, CompatibilityModule],\r\n  declarations: [MdSnackBarContainer, SimpleSnackBar],\r\n  entryComponents: [MdSnackBarContainer, SimpleSnackBar],\r\n  providers: [MdSnackBar, LIVE_ANNOUNCER_PROVIDER]\r\n})\r\nexport class MdSnackBarModule {\r\n  /** @deprecated */\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: MdSnackBarModule,\r\n      providers: []\r\n    };\r\n  }\r\n}\r\n"]}