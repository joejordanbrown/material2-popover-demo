{"version":3,"sources":["../../../src/lib/snack-bar/snack-bar-ref.ts"],"names":[],"mappings":"OAEO,EAAC,OAAO,EAAC,MAAM,cAAc;AAGpC,sDAAsD;AAEtD;;GAEG;AACH;IAuBE,uBAAY,QAAW,EACX,iBAAsC,EAC9B,WAAuB;QAzB7C,iBA8EC;QArDqB,gBAAW,GAAX,WAAW,CAAY;QAX3C,oEAAoE;QAC5D,iBAAY,GAAiB,IAAI,OAAO,EAAE,CAAC;QAKnD,2EAA2E;QACnE,cAAS,GAAiB,IAAI,OAAO,EAAE,CAAC;QAK9C,iEAAiE;QACjE,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;QAC1B,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;QAC3C,8BAA8B;QAC9B,IAAI,CAAC,QAAQ,EAAE,CAAC,SAAS,CAAC,cAAM,OAAA,KAAI,CAAC,OAAO,EAAE,EAAd,CAAc,CAAC,CAAC;QAChD,iBAAiB,CAAC,OAAO,EAAE,CAAC,SAAS,CAAC,cAAM,OAAA,KAAI,CAAC,cAAc,EAAE,EAArB,CAAqB,CAAC,CAAC;IACrE,CAAC;IA5BD,sBAAI,mCAAQ;QADZ,4EAA4E;aAC5E;YACE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;QACxB,CAAC;;;OAAA;IA4BD,+BAA+B;IAC/B,+BAAO,GAAP;QACE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC;YAC9B,IAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE,CAAC;QAChC,CAAC;IACH,CAAC;IAED,yCAAyC;IACzC,+BAAO,GAAP;QACE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC;YAC3B,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;YACtB,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC;QAC5B,CAAC;IACH,CAAC;IAED,mCAAmC;IACnC,6BAAK,GAAL;QACE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC;YAC9B,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;YACzB,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC;QAC/B,CAAC;IACH,CAAC;IAED,uCAAuC;IAC/B,sCAAc,GAAtB;QACE,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC;QAC3B,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;QACzB,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC;IAC/B,CAAC;IAED,kFAAkF;IAClF,sCAAc,GAAd;QACE,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,YAAY,EAAE,CAAC;IAC1C,CAAC;IAED,sFAAsF;IACtF,mCAAW,GAAX;QACE,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,QAAQ,EAAE,CAAC;IAC3C,CAAC;IAED,+EAA+E;IAC/E,gCAAQ,GAAR;QACE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,YAAY,EAAE,CAAC;IACvC,CAAC;IACH,oBAAC;AAAD,CA9EA,AA8EC,IAAA","file":"snack-bar-ref.js","sourcesContent":["import {OverlayRef} from '../core';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {Subject} from 'rxjs/Subject';\r\nimport {MdSnackBarContainer} from './snack-bar-container';\r\n\r\n// TODO(josephperrott): Implement onAction observable.\r\n\r\n/**\r\n * Reference to a snack bar dispatched from the snack bar service.\r\n */\r\nexport class MdSnackBarRef<T> {\r\n  private _instance: T;\r\n\r\n  /** The instance of the component making up the content of the snack bar. */\r\n  get instance(): T {\r\n    return this._instance;\r\n  }\r\n\r\n  /**\r\n   * The instance of the component making up the content of the snack bar.\r\n   * @docs-private\r\n   */\r\n  containerInstance: MdSnackBarContainer;\r\n\r\n  /** Subject for notifying the user that the snack bar has closed. */\r\n  private _afterClosed: Subject<any> = new Subject();\r\n\r\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\r\n  private _afterOpened: Subject<any>;\r\n\r\n  /** Subject for notifying the user that the snack bar action was called. */\r\n  private _onAction: Subject<any> = new Subject();\r\n\r\n  constructor(instance: T,\r\n              containerInstance: MdSnackBarContainer,\r\n              private _overlayRef: OverlayRef) {\r\n    // Sets the readonly instance of the snack bar content component.\r\n    this._instance = instance;\r\n    this.containerInstance = containerInstance;\r\n    // Dismiss snackbar on action.\r\n    this.onAction().subscribe(() => this.dismiss());\r\n    containerInstance._onExit().subscribe(() => this._finishDismiss());\r\n  }\r\n\r\n  /** Dismisses the snack bar. */\r\n  dismiss(): void {\r\n    if (!this._afterClosed.closed) {\r\n      this.containerInstance.exit();\r\n    }\r\n  }\r\n\r\n  /** Marks the snackbar action clicked. */\r\n  _action(): void {\r\n    if (!this._onAction.closed) {\r\n      this._onAction.next();\r\n      this._onAction.complete();\r\n    }\r\n  }\r\n\r\n  /** Marks the snackbar as opened */\r\n  _open(): void {\r\n    if (!this._afterOpened.closed) {\r\n      this._afterOpened.next();\r\n      this._afterOpened.complete();\r\n    }\r\n  }\r\n\r\n  /** Cleans up the DOM after closing. */\r\n  private _finishDismiss(): void {\r\n    this._overlayRef.dispose();\r\n    this._afterClosed.next();\r\n    this._afterClosed.complete();\r\n  }\r\n\r\n  /** Gets an observable that is notified when the snack bar is finished closing. */\r\n  afterDismissed(): Observable<void> {\r\n    return this._afterClosed.asObservable();\r\n  }\r\n\r\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\r\n  afterOpened(): Observable<void> {\r\n    return this.containerInstance._onEnter();\r\n  }\r\n\r\n  /** Gets an observable that is notified when the snack bar action is called. */\r\n  onAction(): Observable<void> {\r\n    return this._onAction.asObservable();\r\n  }\r\n}\r\n"]}