{"version":3,"sources":["../../../src/lib/icon/icon.ts"],"names":[],"mappings":";;;;;;;;;;;;;;OAAO,EACL,QAAQ,EAER,uBAAuB,EACvB,SAAS,EACT,UAAU,EACV,KAAK,EAGL,QAAQ,EAER,iBAAiB,EAEjB,QAAQ,EACR,QAAQ,EACT,MAAM,eAAe;OACf,EAAC,UAAU,EAAE,IAAI,EAAC,MAAM,eAAe;OACvC,EAAC,YAAY,EAAC,MAAM,2BAA2B;OAC/C,EAAC,OAAO,EAAE,mBAAmB,EAAC,MAAM,SAAS;OAC7C,EAAC,cAAc,EAAC,MAAM,iBAAiB;AAC9C,SAAQ,cAAc,QAAO,iBAAiB,CAAC;AAE/C,oFAAoF;AACpF;IAA4C,0CAAO;IACjD,gCAAY,QAAgB;QACxB,kBAAM,0BAAuB,QAAQ,OAAG,CAAC,CAAC;IAC9C,CAAC;IACH,6BAAC;AAAD,CAJA,AAIC,CAJ2C,OAAO,GAIlD;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAgCG;AAYH;IA0BE,gBACY,WAAuB,EACvB,SAAmB,EACnB,eAA+B;QAF/B,gBAAW,GAAX,WAAW,CAAY;QACvB,cAAS,GAAT,SAAS,CAAU;QACnB,oBAAe,GAAf,eAAe,CAAgB;QAd3C,uCAAuC;QAClB,kBAAa,GAAW,EAAE,CAAC;IAaD,CAAC;IAThD,sBAAI,yBAAK;QAFT,yBAAyB;aAEzB,cAAsB,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;aAC3C,UAAU,KAAa,IAAI,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;;;OADX;IAW3C,6BAAY,GAAZ,UAAa,QAAgB;QAC3B,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;QAC1C,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;QACtC,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC;IACzB,CAAC;IAED,iCAAgB,GAAhB,UAAiB,KAAa,EAAE,KAAc;QAC5C,EAAE,CAAC,CAAC,KAAK,IAAI,IAAI,IAAI,KAAK,IAAI,EAAE,CAAC,CAAC,CAAC;YACjC,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,EAAE,QAAM,KAAO,EAAE,KAAK,CAAC,CAAC;QACvF,CAAC;IACH,CAAC;IAED;;;;;;;;;;;;OAYG;IACK,+BAAc,GAAtB,UAAuB,QAAgB;QACrC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACd,MAAM,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;QAClB,CAAC;QACD,IAAM,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAClC,MAAM,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;YACrB,KAAK,CAAC;gBACJ,yBAAyB;gBACzB,MAAM,CAAC,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YACxB,KAAK,CAAC;gBACJ,MAAM,CAAmB,KAAK,CAAC;YACjC;gBACE,MAAM,IAAI,sBAAsB,CAAC,QAAQ,CAAC,CAAC;QAC/C,CAAC;IACH,CAAC;IAED,4BAAW,GAAX,UAAY,OAAiD;QAA7D,iBAeC;QAdC,IAAM,aAAa,GAAG,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC3C,8FAA8F;QAC9F,EAAE,CAAC,CAAC,aAAa,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,IAAI,aAAa,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;YACpF,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;gBACjB,IAAA,sCAA+D,EAAxD,iBAAS,EAAE,gBAAQ,CAAsC;gBAChE,IAAI,CAAC,eAAe,CAAC,eAAe,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC,KAAK,EAAE,CAAC,SAAS,CACvE,UAAA,GAAG,IAAI,OAAA,KAAI,CAAC,cAAc,CAAC,GAAG,CAAC,EAAxB,CAAwB,EAC/B,UAAC,GAAQ,IAAK,OAAA,OAAO,CAAC,GAAG,CAAC,4BAA0B,GAAK,CAAC,EAA5C,CAA4C,CAAC,CAAC;YAClE,CAAC;QACH,CAAC;QACD,EAAE,CAAC,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC,CAAC;YAC1B,IAAI,CAAC,sBAAsB,EAAE,CAAC;QAChC,CAAC;QACD,IAAI,CAAC,gBAAgB,EAAE,CAAC;IAC1B,CAAC;IAED,yBAAQ,GAAR;QACE,6FAA6F;QAC7F,+FAA+F;QAC/F,EAAE,CAAC,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC,CAAC;YAC1B,IAAI,CAAC,sBAAsB,EAAE,CAAC;QAChC,CAAC;IACH,CAAC;IAED,mCAAkB,GAAlB;QACE,8EAA8E;QAC9E,oDAAoD;QACpD,IAAI,CAAC,gBAAgB,EAAE,CAAC;IAC1B,CAAC;IAEO,iCAAgB,GAAxB;QACI,IAAM,SAAS,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;QACvC,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;YACd,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,EAAE,YAAY,EAAE,SAAS,CAAC,CAAC;QAC9F,CAAC;IACL,CAAC;IAEO,8BAAa,GAArB;QACE,2FAA2F;QAC3F,6FAA6F;QAC7F,qCAAqC;QACrC,IAAM,KAAK,GACP,IAAI,CAAC,aAAa;YAClB,IAAI,CAAC,GAAG;YACR,IAAI,CAAC,QAAQ;YACb,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;QACzC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACV,MAAM,CAAC,KAAK,CAAC;QACf,CAAC;QACD,sDAAsD;QACtD,EAAE,CAAC,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC,CAAC;YAC1B,IAAM,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,WAAW,CAAC;YACxD,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;gBACT,MAAM,CAAC,IAAI,CAAC;YACd,CAAC;QACH,CAAC;QACD,+BAA+B;QAC/B,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAEO,+BAAc,GAAtB;QACE,MAAM,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC;IACvB,CAAC;IAEO,+BAAc,GAAtB,UAAuB,GAAe;QACpC,IAAM,aAAa,GAAG,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC;QACrD,2DAA2D;QAC3D,+EAA+E;QAC/E,uEAAuE;QACvE,aAAa,CAAC,SAAS,GAAG,EAAE,CAAC;QAC7B,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,aAAa,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;IACpD,CAAC;IAEO,uCAAsB,GAA9B;QACE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC,CAAC;YAC3B,MAAM,CAAC;QACT,CAAC;QACD,IAAM,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC;QAC5C,IAAM,YAAY,GAAG,IAAI,CAAC,OAAO;YAC7B,IAAI,CAAC,eAAe,CAAC,qBAAqB,CAAC,IAAI,CAAC,OAAO,CAAC;YACxD,IAAI,CAAC,eAAe,CAAC,sBAAsB,EAAE,CAAC;QAClD,EAAE,CAAC,CAAC,YAAY,IAAI,IAAI,CAAC,qBAAqB,CAAC,CAAC,CAAC;YAC/C,EAAE,CAAC,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC,CAAC;gBAC/B,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,IAAI,EAAE,IAAI,CAAC,qBAAqB,EAAE,KAAK,CAAC,CAAC;YAC1E,CAAC;YACD,EAAE,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;gBACjB,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,IAAI,EAAE,YAAY,EAAE,IAAI,CAAC,CAAC;YAC3D,CAAC;YACD,IAAI,CAAC,qBAAqB,GAAG,YAAY,CAAC;QAC5C,CAAC;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,sBAAsB,CAAC,CAAC,CAAC;YACjD,EAAE,CAAC,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC,CAAC;gBAChC,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,IAAI,EAAE,IAAI,CAAC,sBAAsB,EAAE,KAAK,CAAC,CAAC;YAC3E,CAAC;YACD,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;gBAClB,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;YAC5D,CAAC;YACD,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC9C,CAAC;IACH,CAAC;IAzKD;QAAC,KAAK,EAAE;;2CAAA;IAGR;QAAC,KAAK,EAAE;;2CAAA;IAGR;QAAC,KAAK,EAAE;;4CAAA;IAGR;QAAC,KAAK,EAAE;;uCAAA;IAGR;QAAC,KAAK,CAAC,YAAY,CAAC;;iDAAA;IAGpB;QAAC,KAAK,EAAE;;uCAAA;IA9BV;QAAC,SAAS,CAAC;YACT,QAAQ,EAAE,MAAM,CAAC,EAAE;YACnB,QAAQ,EAAE,2BAA2B;YACrC,QAAQ,EAAE,mBAAmB;YAC7B,SAAS,EAAE,CAAC,UAAU,CAAC;YACvB,IAAI,EAAE;gBACJ,MAAM,EAAE,KAAK;aACd;YACD,aAAa,EAAE,iBAAiB,CAAC,IAAI;YACrC,eAAe,EAAE,uBAAuB,CAAC,MAAM;SAChD,CAAC;;cAAA;IA+KF,aAAC;AAAD,CA9KA,AA8KC,IAAA;AAED,+CACI,cAA8B,EAAE,IAAU,EAAE,SAAuB;IACrE,MAAM,CAAC,cAAc,IAAI,IAAI,cAAc,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;AAC/D,CAAC;AAAA,CAAC;AAEF,OAAO,IAAM,sBAAsB,GAAG;IACpC,2FAA2F;IAC3F,OAAO,EAAE,cAAc;IACvB,IAAI,EAAE,CAAC,CAAC,IAAI,QAAQ,EAAE,EAAE,IAAI,QAAQ,EAAE,EAAE,cAAc,CAAC,EAAE,IAAI,EAAE,YAAY,CAAC;IAC5E,UAAU,EAAE,8BAA8B;CAC3C,CAAC;AAQF;IAAA;IAQA,CAAC;IAPC,kBAAkB;IACX,oBAAO,GAAd;QACE,MAAM,CAAC;YACL,QAAQ,EAAE,YAAY;YACtB,SAAS,EAAE,EAAE;SACd,CAAC;IACJ,CAAC;IAbH;QAAC,QAAQ,CAAC;YACR,OAAO,EAAE,CAAC,UAAU,EAAE,mBAAmB,CAAC;YAC1C,OAAO,EAAE,CAAC,MAAM,EAAE,mBAAmB,CAAC;YACtC,YAAY,EAAE,CAAC,MAAM,CAAC;YACtB,SAAS,EAAE,CAAC,sBAAsB,CAAC;SACpC,CAAC;;oBAAA;IASF,mBAAC;AAAD,CARA,AAQC,IAAA","file":"icon.js","sourcesContent":["import {\r\n  NgModule,\r\n  ModuleWithProviders,\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ElementRef,\r\n  Input,\r\n  OnChanges,\r\n  OnInit,\r\n  Renderer,\r\n  SimpleChange,\r\n  ViewEncapsulation,\r\n  AfterViewChecked,\r\n  Optional,\r\n  SkipSelf,\r\n} from '@angular/core';\r\nimport {HttpModule, Http} from '@angular/http';\r\nimport {DomSanitizer} from '@angular/platform-browser';\r\nimport {MdError, CompatibilityModule} from '../core';\r\nimport {MdIconRegistry} from './icon-registry';\r\nexport {MdIconRegistry} from './icon-registry';\r\n\r\n/** Exception thrown when an invalid icon name is passed to an md-icon component. */\r\nexport class MdIconInvalidNameError extends MdError {\r\n  constructor(iconName: string) {\r\n      super(`Invalid icon name: \"${iconName}\"`);\r\n  }\r\n}\r\n\r\n/**\r\n * Component to display an icon. It can be used in the following ways:\r\n * - Specify the svgSrc input to load an SVG icon from a URL. The SVG content is directly inlined\r\n *   as a child of the <md-icon> component, so that CSS styles can easily be applied to it.\r\n *   The URL is loaded via an XMLHttpRequest, so it must be on the same domain as the page or its\r\n *   server must be configured to allow cross-domain requests.\r\n *   Example:\r\n *     <md-icon svgSrc=\"assets/arrow.svg\"></md-icon>\r\n *\r\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\r\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\r\n *   MdIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\r\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\r\n *   Examples:\r\n *     <md-icon svgIcon=\"left-arrow\"></md-icon>\r\n *     <md-icon svgIcon=\"animals:cat\"></md-icon>\r\n *\r\n * - Use a font ligature as an icon by putting the ligature text in the content of the <md-icon>\r\n *   component. By default the Material icons font is used as described at\r\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\r\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\r\n *   desired font, or to an alias previously registered with MdIconRegistry.registerFontClassAlias.\r\n *   Examples:\r\n *     <md-icon>home</md-icon>\r\n *     <md-icon fontSet=\"myfont\">sun</md-icon>\r\n *\r\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\r\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\r\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\r\n *   https://fortawesome.github.io/Font-Awesome/examples/\r\n *   Example:\r\n *     <md-icon fontSet=\"fa\" fontIcon=\"alarm\"></md-icon>\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  template: '<ng-content></ng-content>',\r\n  selector: 'md-icon, mat-icon',\r\n  styleUrls: ['icon.css'],\r\n  host: {\r\n    'role': 'img',\r\n  },\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MdIcon implements OnChanges, OnInit, AfterViewChecked {\r\n  private _color: string;\r\n\r\n  /** Name of the icon in the SVG icon set. */\r\n  @Input() svgIcon: string;\r\n\r\n  /** Font set that the icon is a part of. */\r\n  @Input() fontSet: string;\r\n\r\n  /** Name of an icon within a font set. */\r\n  @Input() fontIcon: string;\r\n\r\n  /** Alt label to be used for accessibility. */\r\n  @Input() alt: string;\r\n\r\n  /** Screenreader label for the icon. */\r\n  @Input('aria-label') hostAriaLabel: string = '';\r\n\r\n  /** Color of the icon. */\r\n  @Input()\r\n  get color(): string { return this._color; }\r\n  set color(value: string) { this._updateColor(value); }\r\n\r\n  private _previousFontSetClass: string;\r\n  private _previousFontIconClass: string;\r\n\r\n  constructor(\r\n      private _elementRef: ElementRef,\r\n      private _renderer: Renderer,\r\n      private _mdIconRegistry: MdIconRegistry) { }\r\n\r\n  _updateColor(newColor: string) {\r\n    this._setElementColor(this._color, false);\r\n    this._setElementColor(newColor, true);\r\n    this._color = newColor;\r\n  }\r\n\r\n  _setElementColor(color: string, isAdd: boolean) {\r\n    if (color != null && color != '') {\r\n      this._renderer.setElementClass(this._elementRef.nativeElement, `md-${color}`, isAdd);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Splits an svgIcon binding value into its icon set and icon name components.\r\n   * Returns a 2-element array of [(icon set), (icon name)].\r\n   * The separator for the two fields is ':'. If there is no separator, an empty\r\n   * string is returned for the icon set and the entire value is returned for\r\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\r\n   * Throws a MdIconInvalidNameError if the name contains two or more ':' separators.\r\n   * Examples:\r\n   *   'social:cake' -> ['social', 'cake']\r\n   *   'penguin' -> ['', 'penguin']\r\n   *   null -> ['', '']\r\n   *   'a:b:c' -> (throws MdIconInvalidNameError)\r\n   */\r\n  private _splitIconName(iconName: string): [string, string] {\r\n    if (!iconName) {\r\n      return ['', ''];\r\n    }\r\n    const parts = iconName.split(':');\r\n    switch (parts.length) {\r\n      case 1:\r\n        // Use default namespace.\r\n        return ['', parts[0]];\r\n      case 2:\r\n        return <[string, string]>parts;\r\n      default:\r\n        throw new MdIconInvalidNameError(iconName);\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes: { [propertyName: string]: SimpleChange }) {\r\n    const changedInputs = Object.keys(changes);\r\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\r\n    if (changedInputs.indexOf('svgIcon') != -1 || changedInputs.indexOf('svgSrc') != -1) {\r\n      if (this.svgIcon) {\r\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\r\n        this._mdIconRegistry.getNamedSvgIcon(iconName, namespace).first().subscribe(\r\n            svg => this._setSvgElement(svg),\r\n            (err: any) => console.log(`Error retrieving icon: ${err}`));\r\n      }\r\n    }\r\n    if (this._usingFontIcon()) {\r\n      this._updateFontIconClasses();\r\n    }\r\n    this._updateAriaLabel();\r\n  }\r\n\r\n  ngOnInit() {\r\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\r\n    // e.g. <md-icon>arrow</md-icon>. In this case we need to add a CSS class for the default font.\r\n    if (this._usingFontIcon()) {\r\n      this._updateFontIconClasses();\r\n    }\r\n  }\r\n\r\n  ngAfterViewChecked() {\r\n    // Update aria label here because it may depend on the projected text content.\r\n    // (e.g. <md-icon>home</md-icon> should use 'home').\r\n    this._updateAriaLabel();\r\n  }\r\n\r\n  private _updateAriaLabel() {\r\n      const ariaLabel = this._getAriaLabel();\r\n      if (ariaLabel) {\r\n        this._renderer.setElementAttribute(this._elementRef.nativeElement, 'aria-label', ariaLabel);\r\n      }\r\n  }\r\n\r\n  private _getAriaLabel() {\r\n    // If the parent provided an aria-label attribute value, use it as-is. Otherwise look for a\r\n    // reasonable value from the alt attribute, font icon name, SVG icon name, or (for ligatures)\r\n    // the text content of the directive.\r\n    const label =\r\n        this.hostAriaLabel ||\r\n        this.alt ||\r\n        this.fontIcon ||\r\n        this._splitIconName(this.svgIcon)[1];\r\n    if (label) {\r\n      return label;\r\n    }\r\n    // The \"content\" of an SVG icon is not a useful label.\r\n    if (this._usingFontIcon()) {\r\n      const text = this._elementRef.nativeElement.textContent;\r\n      if (text) {\r\n        return text;\r\n      }\r\n    }\r\n    // TODO: Warn here in dev mode.\r\n    return null;\r\n  }\r\n\r\n  private _usingFontIcon(): boolean {\r\n    return !this.svgIcon;\r\n  }\r\n\r\n  private _setSvgElement(svg: SVGElement) {\r\n    const layoutElement = this._elementRef.nativeElement;\r\n    // Remove existing child nodes and add the new SVG element.\r\n    // We would use renderer.detachView(Array.from(layoutElement.childNodes)) here,\r\n    // but it fails in IE11: https://github.com/angular/angular/issues/6327\r\n    layoutElement.innerHTML = '';\r\n    this._renderer.projectNodes(layoutElement, [svg]);\r\n  }\r\n\r\n  private _updateFontIconClasses() {\r\n    if (!this._usingFontIcon()) {\r\n      return;\r\n    }\r\n    const elem = this._elementRef.nativeElement;\r\n    const fontSetClass = this.fontSet ?\r\n        this._mdIconRegistry.classNameForFontAlias(this.fontSet) :\r\n        this._mdIconRegistry.getDefaultFontSetClass();\r\n    if (fontSetClass != this._previousFontSetClass) {\r\n      if (this._previousFontSetClass) {\r\n        this._renderer.setElementClass(elem, this._previousFontSetClass, false);\r\n      }\r\n      if (fontSetClass) {\r\n        this._renderer.setElementClass(elem, fontSetClass, true);\r\n      }\r\n      this._previousFontSetClass = fontSetClass;\r\n    }\r\n\r\n    if (this.fontIcon != this._previousFontIconClass) {\r\n      if (this._previousFontIconClass) {\r\n        this._renderer.setElementClass(elem, this._previousFontIconClass, false);\r\n      }\r\n      if (this.fontIcon) {\r\n        this._renderer.setElementClass(elem, this.fontIcon, true);\r\n      }\r\n      this._previousFontIconClass = this.fontIcon;\r\n    }\r\n  }\r\n}\r\n\r\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\r\n    parentRegistry: MdIconRegistry, http: Http, sanitizer: DomSanitizer) {\r\n  return parentRegistry || new MdIconRegistry(http, sanitizer);\r\n};\r\n\r\nexport const ICON_REGISTRY_PROVIDER = {\r\n  // If there is already an MdIconRegistry available, use that. Otherwise, provide a new one.\r\n  provide: MdIconRegistry,\r\n  deps: [[new Optional(), new SkipSelf(), MdIconRegistry], Http, DomSanitizer],\r\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\r\n};\r\n\r\n@NgModule({\r\n  imports: [HttpModule, CompatibilityModule],\r\n  exports: [MdIcon, CompatibilityModule],\r\n  declarations: [MdIcon],\r\n  providers: [ICON_REGISTRY_PROVIDER],\r\n})\r\nexport class MdIconModule {\r\n  /** @deprecated */\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: MdIconModule,\r\n      providers: [],\r\n    };\r\n  }\r\n}\r\n"]}