{"version":3,"sources":["../../../src/lib/icon/icon-registry.ts"],"names":[],"mappings":"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","file":"icon-registry.js","sourcesContent":["import {Injectable, SecurityContext} from '@angular/core';\r\nimport {SafeResourceUrl, DomSanitizer} from '@angular/platform-browser';\r\nimport {Http} from '@angular/http';\r\nimport {MdError} from '../core';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport 'rxjs/add/observable/forkJoin';\r\nimport 'rxjs/add/observable/of';\r\nimport 'rxjs/add/operator/map';\r\nimport 'rxjs/add/operator/filter';\r\nimport 'rxjs/add/operator/do';\r\nimport 'rxjs/add/operator/share';\r\nimport 'rxjs/add/operator/finally';\r\nimport 'rxjs/add/operator/catch';\r\n\r\n\r\n/**\r\n * Exception thrown when attempting to load an icon with a name that cannot be found.\r\n * @docs-private\r\n */\r\nexport class MdIconNameNotFoundError extends MdError {\r\n  constructor(iconName: string) {\r\n    super(`Unable to find icon with the name \"${iconName}\"`);\r\n  }\r\n}\r\n\r\n/**\r\n * Exception thrown when attempting to load SVG content that does not contain the expected\r\n * <svg> tag.\r\n * @docs-private\r\n */\r\nexport class MdIconSvgTagNotFoundError extends MdError {\r\n  constructor() {\r\n    super('<svg> tag not found');\r\n  }\r\n}\r\n\r\n/**\r\n * Configuration for an icon, including the URL and possibly the cached SVG element.\r\n * @docs-private\r\n */\r\nclass SvgIconConfig {\r\n  svgElement: SVGElement = null;\r\n  constructor(public url: SafeResourceUrl) { }\r\n}\r\n\r\n/** Returns the cache key to use for an icon namespace and name. */\r\nconst iconKey = (namespace: string, name: string) => namespace + ':' + name;\r\n\r\n/**\r\n * Service to register and display icons used by the <md-icon> component.\r\n * - Registers icon URLs by namespace and name.\r\n * - Registers icon set URLs by namespace.\r\n * - Registers aliases for CSS classes, for use with icon fonts.\r\n * - Loads icons from URLs and extracts individual icons from icon sets.\r\n */\r\n@Injectable()\r\nexport class MdIconRegistry {\r\n  /**\r\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\r\n   */\r\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\r\n\r\n  /**\r\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\r\n   * Multiple icon sets can be registered under the same namespace.\r\n   */\r\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\r\n\r\n  /** Cache for icons loaded by direct URLs. */\r\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\r\n\r\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\r\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\r\n\r\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\r\n  private _fontCssClassesByAlias = new Map<string, string>();\r\n\r\n  /**\r\n   * The CSS class to apply when an <md-icon> component has no icon name, url, or font specified.\r\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\r\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\r\n   */\r\n  private _defaultFontSetClass = 'material-icons';\r\n\r\n  constructor(private _http: Http, private _sanitizer: DomSanitizer) {}\r\n\r\n  /**\r\n   * Registers an icon by URL in the default namespace.\r\n   * @param iconName Name under which the icon should be registered.\r\n   * @param url\r\n   */\r\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\r\n    return this.addSvgIconInNamespace('', iconName, url);\r\n  }\r\n\r\n  /**\r\n   * Registers an icon by URL in the specified namespace.\r\n   * @param namespace Namespace in which the icon should be registered.\r\n   * @param iconName Name under which the icon should be registered.\r\n   * @param url\r\n   */\r\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\r\n    const key = iconKey(namespace, iconName);\r\n    this._svgIconConfigs.set(key, new SvgIconConfig(url));\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Registers an icon set by URL in the default namespace.\r\n   * @param url\r\n   */\r\n  addSvgIconSet(url: SafeResourceUrl): this {\r\n    return this.addSvgIconSetInNamespace('', url);\r\n  }\r\n\r\n  /**\r\n   * Registers an icon set by URL in the specified namespace.\r\n   * @param namespace Namespace in which to register the icon set.\r\n   * @param url\r\n   */\r\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\r\n    const config = new SvgIconConfig(url);\r\n    if (this._iconSetConfigs.has(namespace)) {\r\n      this._iconSetConfigs.get(namespace).push(config);\r\n    } else {\r\n      this._iconSetConfigs.set(namespace, [config]);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an mdIcon\r\n   * component with the alias as the fontSet input will cause the class name to be applied\r\n   * to the <md-icon> element.\r\n   *\r\n   * @param alias Alias for the font.\r\n   * @param className Class name override to be used instead of the alias.\r\n   */\r\n  registerFontClassAlias(alias: string, className = alias): this {\r\n    this._fontCssClassesByAlias.set(alias, className);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Returns the CSS class name associated with the alias by a previous call to\r\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\r\n   */\r\n  classNameForFontAlias(alias: string): string {\r\n    return this._fontCssClassesByAlias.get(alias) || alias;\r\n  }\r\n\r\n  /**\r\n   * Sets the CSS class name to be used for icon fonts when an <md-icon> component does not\r\n   * have a fontSet input value, and is not loading an icon by name or URL.\r\n   *\r\n   * @param className\r\n   */\r\n  setDefaultFontSetClass(className: string): this {\r\n    this._defaultFontSetClass = className;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Returns the CSS class name to be used for icon fonts when an <md-icon> component does not\r\n   * have a fontSet input value, and is not loading an icon by name or URL.\r\n   */\r\n  getDefaultFontSetClass(): string {\r\n    return this._defaultFontSetClass;\r\n  }\r\n\r\n  /**\r\n   * Returns an Observable that produces the icon (as an <svg> DOM element) from the given URL.\r\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\r\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\r\n   * it will not contain any modifications made to elements previously returned).\r\n   *\r\n   * @param safeUrl URL from which to fetch the SVG icon.\r\n   */\r\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\r\n    let url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\r\n\r\n    if (this._cachedIconsByUrl.has(url)) {\r\n      return Observable.of(cloneSvg(this._cachedIconsByUrl.get(url)));\r\n    }\r\n    return this._loadSvgIconFromConfig(new SvgIconConfig(url))\r\n        .do(svg => this._cachedIconsByUrl.set(url, svg))\r\n        .map(svg => cloneSvg(svg));\r\n  }\r\n\r\n  /**\r\n   * Returns an Observable that produces the icon (as an <svg> DOM element) with the given name\r\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\r\n   * if not, the Observable will throw an MdIconNameNotFoundError.\r\n   *\r\n   * @param name Name of the icon to be retrieved.\r\n   * @param namespace Namespace in which to look for the icon.\r\n   */\r\n  getNamedSvgIcon(name: string, namespace = ''): Observable<SVGElement> {\r\n    // Return (copy of) cached icon if possible.\r\n    const key = iconKey(namespace, name);\r\n    if (this._svgIconConfigs.has(key)) {\r\n      return this._getSvgFromConfig(this._svgIconConfigs.get(key));\r\n    }\r\n    // See if we have any icon sets registered for the namespace.\r\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\r\n    if (iconSetConfigs) {\r\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\r\n    }\r\n    return Observable.throw(new MdIconNameNotFoundError(key));\r\n  }\r\n\r\n  /**\r\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\r\n   */\r\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\r\n    if (config.svgElement) {\r\n      // We already have the SVG element for this icon, return a copy.\r\n      return Observable.of(cloneSvg(config.svgElement));\r\n    } else {\r\n      // Fetch the icon from the config's URL, cache it, and return a copy.\r\n      return this._loadSvgIconFromConfig(config)\r\n          .do(svg => config.svgElement = svg)\r\n          .map(svg => cloneSvg(svg));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\r\n   * First searches the available cached icons for a nested element with a matching name, and\r\n   * if found copies the element to a new <svg> element. If not found, fetches all icon sets\r\n   * that have not been cached, and searches again after all fetches are completed.\r\n   * The returned Observable produces the SVG element if possible, and throws\r\n   * MdIconNameNotFoundError if no icon with the specified name can be found.\r\n   */\r\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\r\n      Observable<SVGElement> {\r\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\r\n    // requested name.\r\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\r\n    if (namedIcon) {\r\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\r\n      // time anyway, there's probably not much advantage compared to just always extracting\r\n      // it from the icon set.\r\n      return Observable.of(namedIcon);\r\n    }\r\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\r\n    // fetched, fetch them now and look for iconName in the results.\r\n    const iconSetFetchRequests: Observable<SVGElement>[] = iconSetConfigs\r\n        .filter(iconSetConfig => !iconSetConfig.svgElement)\r\n        .map(iconSetConfig =>\r\n            this._loadSvgIconSetFromConfig(iconSetConfig)\r\n                .catch((err: any, caught: Observable<SVGElement>): Observable<SVGElement> => {\r\n                  let url =\r\n                      this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\r\n\r\n                  // Swallow errors fetching individual URLs so the combined Observable won't\r\n                  // necessarily fail.\r\n                  console.log(`Loading icon set URL: ${url} failed: ${err}`);\r\n                  return Observable.of(null);\r\n                })\r\n                .do(svg => {\r\n                  // Cache SVG element.\r\n                  if (svg) {\r\n                    iconSetConfig.svgElement = svg;\r\n                  }\r\n                }));\r\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\r\n    // cached SVG element (unless the request failed), and we can check again for the icon.\r\n    return Observable.forkJoin(iconSetFetchRequests)\r\n        .map((ignoredResults: any) => {\r\n          const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\r\n          if (!foundIcon) {\r\n            throw new MdIconNameNotFoundError(name);\r\n          }\r\n          return foundIcon;\r\n        });\r\n  }\r\n\r\n  /**\r\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\r\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\r\n   * returns it. Returns null if no matching element is found.\r\n   */\r\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\r\n      SVGElement {\r\n    // Iterate backwards, so icon sets added later have precedence.\r\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\r\n      const config = iconSetConfigs[i];\r\n      if (config.svgElement) {\r\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\r\n        if (foundIcon) {\r\n          return foundIcon;\r\n        }\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\r\n   * from it.\r\n   */\r\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\r\n    return this._fetchUrl(config.url)\r\n        .map(svgText => this._createSvgElementForSingleIcon(svgText));\r\n  }\r\n\r\n  /**\r\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\r\n   * from it.\r\n   */\r\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\r\n      // TODO: Document that icons should only be loaded from trusted sources.\r\n    return this._fetchUrl(config.url)\r\n        .map(svgText => this._svgElementFromString(svgText));\r\n  }\r\n\r\n  /**\r\n   * Creates a DOM element from the given SVG string, and adds default attributes.\r\n   */\r\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\r\n    const svg = this._svgElementFromString(responseText);\r\n    this._setSvgAttributes(svg);\r\n    return svg;\r\n  }\r\n\r\n  /**\r\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\r\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\r\n   * returns it. Returns null if no matching element is found.\r\n   */\r\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement {\r\n    const iconNode = iconSet.querySelector('#' + iconName);\r\n    if (!iconNode) {\r\n      return null;\r\n    }\r\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\r\n    // the content of a new <svg> node.\r\n    if (iconNode.tagName.toLowerCase() == 'svg') {\r\n      return this._setSvgAttributes(iconNode.cloneNode(true) as SVGElement);\r\n    }\r\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\r\n    // the correct nodes, but the SVG content doesn't render. Instead we\r\n    // have to create an empty SVG node using innerHTML and append its content.\r\n    // Elements created using DOMParser.parseFromString have the same problem.\r\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\r\n    const svg = this._svgElementFromString('<svg></svg>');\r\n    // Clone the node so we don't remove it from the parent icon set element.\r\n    svg.appendChild(iconNode.cloneNode(true));\r\n    return this._setSvgAttributes(svg);\r\n  }\r\n\r\n  /**\r\n   * Creates a DOM element from the given SVG string.\r\n   */\r\n  private _svgElementFromString(str: string): SVGElement {\r\n    // TODO: Is there a better way than innerHTML? Renderer doesn't appear to have a method for\r\n    // creating an element from an HTML string.\r\n    const div = document.createElement('DIV');\r\n    div.innerHTML = str;\r\n    const svg = div.querySelector('svg') as SVGElement;\r\n    if (!svg) {\r\n      throw new MdIconSvgTagNotFoundError();\r\n    }\r\n    return svg;\r\n  }\r\n\r\n  /**\r\n   * Sets the default attributes for an SVG element to be used as an icon.\r\n   */\r\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\r\n    if (!svg.getAttribute('xmlns')) {\r\n      svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\r\n    }\r\n    svg.setAttribute('fit', '');\r\n    svg.setAttribute('height', '100%');\r\n    svg.setAttribute('width', '100%');\r\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\r\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\r\n    return svg;\r\n  }\r\n\r\n  /**\r\n   * Returns an Observable which produces the string contents of the given URL. Results may be\r\n   * cached, so future calls with the same URL may not cause another HTTP request.\r\n   */\r\n  private _fetchUrl(safeUrl: SafeResourceUrl): Observable<string> {\r\n    let url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\r\n\r\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\r\n    // already a request in progress for that URL. It's necessary to call share() on the\r\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\r\n    if (this._inProgressUrlFetches.has(url)) {\r\n      return this._inProgressUrlFetches.get(url);\r\n    }\r\n\r\n    // TODO(jelbourn): for some reason, the `finally` operator \"loses\" the generic type on the\r\n    // Observable. Figure out why and fix it.\r\n    const req = <Observable<string>> this._http.get(url)\r\n        .map(response => response.text())\r\n        .finally(() => {\r\n          this._inProgressUrlFetches.delete(url);\r\n        })\r\n        .share();\r\n    this._inProgressUrlFetches.set(url, req);\r\n    return req;\r\n  }\r\n}\r\n\r\n\r\n/** Clones an SVGElement while preserving type information. */\r\nfunction cloneSvg(svg: SVGElement): SVGElement {\r\n  return svg.cloneNode(true) as SVGElement;\r\n}\r\n"]}