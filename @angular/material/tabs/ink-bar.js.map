{"version":3,"sources":["../../../src/lib/tabs/ink-bar.ts"],"names":[],"mappings":";;;;;;;;;OAAO,EAAC,SAAS,EAAE,QAAQ,EAAE,UAAU,EAAC,MAAM,eAAe;AAG7D,mGAAmG;AAInG;IACE,kBAAoB,SAAmB,EAAU,WAAuB;QAApD,cAAS,GAAT,SAAS,CAAU;QAAU,gBAAW,GAAX,WAAW,CAAY;IAAG,CAAC;IAE5E;;;;OAIG;IACH,iCAAc,GAAd,UAAe,OAAoB;QACjC,IAAI,CAAC,IAAI,EAAE,CAAC;QACZ,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,EAAE,MAAM,EACjE,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC,CAAC;QACpC,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,EAAE,OAAO,EAClE,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC,CAAC;IACtC,CAAC;IAED,yBAAyB;IACzB,uBAAI,GAAJ;QACE,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,EAAE,YAAY,EAAE,SAAS,CAAC,CAAC;IAC1F,CAAC;IAED,yBAAyB;IACzB,uBAAI,GAAJ;QACE,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,EAAE,YAAY,EAAE,QAAQ,CAAC,CAAC;IACzF,CAAC;IAED;;;OAGG;IACK,mCAAgB,GAAxB,UAAyB,OAAoB;QAC3C,MAAM,CAAC,OAAO,GAAG,OAAO,CAAC,UAAU,GAAG,IAAI,GAAG,GAAG,CAAC;IACnD,CAAC;IAED;;;OAGG;IACK,mCAAgB,GAAxB,UAAyB,OAAoB;QAC3C,MAAM,CAAC,OAAO,GAAG,OAAO,CAAC,WAAW,GAAG,IAAI,GAAG,GAAG,CAAC;IACpD,CAAC;IA3CH;QAAC,SAAS,CAAC;YACT,QAAQ,EAAE,yBAAyB;SACpC,CAAC;;gBAAA;IA0CF,eAAC;AAAD,CAzCA,AAyCC,IAAA","file":"ink-bar.js","sourcesContent":["import {Directive, Renderer, ElementRef} from '@angular/core';\r\n\r\n\r\n/** The ink-bar is used to display and animate the line underneath the current active tab label. */\r\n@Directive({\r\n  selector: 'md-ink-bar, mat-ink-bar',\r\n})\r\nexport class MdInkBar {\r\n  constructor(private _renderer: Renderer, private _elementRef: ElementRef) {}\r\n\r\n  /**\r\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\r\n   * Shows the ink bar if previously set as hidden.\r\n   * @param element\r\n   */\r\n  alignToElement(element: HTMLElement) {\r\n    this.show();\r\n    this._renderer.setElementStyle(this._elementRef.nativeElement, 'left',\r\n        this._getLeftPosition(element));\r\n    this._renderer.setElementStyle(this._elementRef.nativeElement, 'width',\r\n        this._getElementWidth(element));\r\n  }\r\n\r\n  /** Shows the ink bar. */\r\n  show(): void {\r\n    this._renderer.setElementStyle(this._elementRef.nativeElement, 'visibility', 'visible');\r\n  }\r\n\r\n  /** Hides the ink bar. */\r\n  hide(): void {\r\n    this._renderer.setElementStyle(this._elementRef.nativeElement, 'visibility', 'hidden');\r\n  }\r\n\r\n  /**\r\n   * Generates the pixel distance from the left based on the provided element in string format.\r\n   * @param element\r\n   */\r\n  private _getLeftPosition(element: HTMLElement): string {\r\n    return element ? element.offsetLeft + 'px' : '0';\r\n  }\r\n\r\n  /**\r\n   * Generates the pixel width from the provided element in string format.\r\n   * @param element\r\n   */\r\n  private _getElementWidth(element: HTMLElement): string {\r\n    return element ? element.offsetWidth + 'px' : '0';\r\n  }\r\n}\r\n"]}