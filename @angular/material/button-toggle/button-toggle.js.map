{"version":3,"sources":["../../../src/lib/button-toggle/button-toggle.ts"],"names":[],"mappings":"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","file":"button-toggle.js","sourcesContent":["import {\r\n    NgModule,\r\n    ModuleWithProviders,\r\n    Component,\r\n    ContentChildren,\r\n    Directive,\r\n    ElementRef,\r\n    Renderer,\r\n    EventEmitter,\r\n    HostBinding,\r\n    Input,\r\n    OnInit,\r\n    Optional,\r\n    Output,\r\n    QueryList,\r\n    ViewChild,\r\n    ViewEncapsulation,\r\n    forwardRef,\r\n    AfterViewInit\r\n} from '@angular/core';\r\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor, FormsModule} from '@angular/forms';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {\r\n  UniqueSelectionDispatcher,\r\n  coerceBooleanProperty,\r\n  UNIQUE_SELECTION_DISPATCHER_PROVIDER,\r\n  CompatibilityModule,\r\n} from '../core';\r\n\r\n/** Acceptable types for a button toggle. */\r\nexport type ToggleType = 'checkbox' | 'radio';\r\n\r\n\r\n\r\n/**\r\n * Provider Expression that allows md-button-toggle-group to register as a ControlValueAccessor.\r\n * This allows it to support [(ngModel)].\r\n * @docs-private\r\n */\r\nexport const MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => MdButtonToggleGroup),\r\n  multi: true\r\n};\r\n\r\nvar _uniqueIdCounter = 0;\r\n\r\n/** Change event object emitted by MdButtonToggle. */\r\nexport class MdButtonToggleChange {\r\n  source: MdButtonToggle;\r\n  value: any;\r\n}\r\n\r\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\r\n@Directive({\r\n  selector: 'md-button-toggle-group:not([multiple]), mat-button-toggle-group:not([multiple])',\r\n  providers: [MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR],\r\n  host: {\r\n    'role': 'radiogroup',\r\n    '[class.md-button-toggle-vertical]': 'vertical'\r\n  },\r\n  exportAs: 'mdButtonToggleGroup',\r\n})\r\nexport class MdButtonToggleGroup implements AfterViewInit, ControlValueAccessor {\r\n  /** The value for the button toggle group. Should match currently selected button toggle. */\r\n  private _value: any = null;\r\n\r\n  /** The HTML name attribute applied to toggles in this group. */\r\n  private _name: string = `md-button-toggle-group-${_uniqueIdCounter++}`;\r\n\r\n  /** Disables all toggles in the group. */\r\n  private _disabled: boolean = null;\r\n\r\n  /** Whether the button toggle group should be vertical. */\r\n  private _vertical: boolean = false;\r\n\r\n  /** The currently selected button toggle, should match the value. */\r\n  private _selected: MdButtonToggle = null;\r\n\r\n  /** Whether the button toggle group is initialized or not. */\r\n  private _isInitialized: boolean = false;\r\n\r\n  /**\r\n   * The method to be called in order to update ngModel.\r\n   * Now `ngModel` binding is not supported in multiple selection mode.\r\n   */\r\n  private _controlValueAccessorChangeFn: (value: any) => void = (value) => {};\r\n\r\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\r\n  onTouched: () => any = () => {};\r\n\r\n  /** Event emitted when the group's value changes. */\r\n  private _change: EventEmitter<MdButtonToggleChange> = new EventEmitter<MdButtonToggleChange>();\r\n  @Output() get change(): Observable<MdButtonToggleChange> {\r\n    return this._change.asObservable();\r\n  }\r\n\r\n  /** Child button toggle buttons. */\r\n  @ContentChildren(forwardRef(() => MdButtonToggle))\r\n  _buttonToggles: QueryList<MdButtonToggle> = null;\r\n\r\n  ngAfterViewInit() {\r\n    this._isInitialized = true;\r\n  }\r\n\r\n  /** `name` attribute for the underlying `input` element. */\r\n  @Input()\r\n  get name(): string {\r\n    return this._name;\r\n  }\r\n\r\n  set name(value: string) {\r\n    this._name = value;\r\n    this._updateButtonToggleNames();\r\n  }\r\n\r\n  /** Whether the toggle group is disabled. */\r\n  @Input()\r\n  get disabled(): boolean {\r\n    return this._disabled;\r\n  }\r\n\r\n  set disabled(value) {\r\n    this._disabled = coerceBooleanProperty(value);\r\n  }\r\n\r\n  /** Whether the toggle group is vertical. */\r\n  @Input()\r\n  get vertical(): boolean {\r\n    return this._vertical;\r\n  }\r\n\r\n  set vertical(value) {\r\n    this._vertical = coerceBooleanProperty(value);\r\n  }\r\n\r\n  /** Value of the toggle group. */\r\n  @Input()\r\n  get value(): any {\r\n    return this._value;\r\n  }\r\n\r\n  set value(newValue: any) {\r\n    if (this._value != newValue) {\r\n      this._value = newValue;\r\n\r\n      this._updateSelectedButtonToggleFromValue();\r\n\r\n      // Only emit a change event if the view is completely initialized.\r\n      // We don't want to emit a change event for the initial values.\r\n      if (this._isInitialized) {\r\n        this._emitChangeEvent();\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Whether the toggle group is selected. */\r\n  @Input()\r\n  get selected() {\r\n    return this._selected;\r\n  }\r\n\r\n  set selected(selected: MdButtonToggle) {\r\n    this._selected = selected;\r\n    this.value = selected ? selected.value : null;\r\n\r\n    if (selected && !selected.checked) {\r\n      selected.checked = true;\r\n    }\r\n  }\r\n\r\n  private _updateButtonToggleNames(): void {\r\n    if (this._buttonToggles) {\r\n      this._buttonToggles.forEach((toggle) => {\r\n        toggle.name = this._name;\r\n      });\r\n    }\r\n  }\r\n\r\n  // TODO: Refactor into shared code with radio.\r\n  private _updateSelectedButtonToggleFromValue(): void {\r\n    let isAlreadySelected = this._selected != null && this._selected.value == this._value;\r\n\r\n    if (this._buttonToggles != null && !isAlreadySelected) {\r\n      let matchingButtonToggle = this._buttonToggles.filter(\r\n          buttonToggle => buttonToggle.value == this._value)[0];\r\n\r\n      if (matchingButtonToggle) {\r\n        this.selected = matchingButtonToggle;\r\n      } else if (this.value == null) {\r\n        this.selected = null;\r\n        this._buttonToggles.forEach(buttonToggle => {\r\n          buttonToggle.checked = false;\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Dispatch change event with current selection and group value. */\r\n  private _emitChangeEvent(): void {\r\n    let event = new MdButtonToggleChange();\r\n    event.source = this._selected;\r\n    event.value = this._value;\r\n    this._controlValueAccessorChangeFn(event.value);\r\n    this._change.emit(event);\r\n  }\r\n\r\n  /**\r\n   * Sets the model value. Implemented as part of ControlValueAccessor.\r\n   * @param value Value to be set to the model.\r\n   */\r\n  writeValue(value: any) {\r\n    this.value = value;\r\n  }\r\n\r\n  /**\r\n   * Registers a callback that will be triggered when the value has changed.\r\n   * Implemented as part of ControlValueAccessor.\r\n   * @param fn On change callback function.\r\n   */\r\n  registerOnChange(fn: (value: any) => void) {\r\n    this._controlValueAccessorChangeFn = fn;\r\n  }\r\n\r\n  /**\r\n   * Registers a callback that will be triggered when the control has been touched.\r\n   * Implemented as part of ControlValueAccessor.\r\n   * @param fn On touch callback function.\r\n   */\r\n  registerOnTouched(fn: any) {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  /**\r\n   * Toggles the disabled state of the component. Implemented as part of ControlValueAccessor.\r\n   * @param isDisabled Whether the component should be disabled.\r\n   */\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this.disabled = isDisabled;\r\n  }\r\n}\r\n\r\n/** Multiple selection button-toggle group. `ngModel` is not supported in this mode. */\r\n@Directive({\r\n  selector: 'md-button-toggle-group[multiple], mat-button-toggle-group[multiple]',\r\n  exportAs: 'mdButtonToggleGroup',\r\n  host: {\r\n    '[class.md-button-toggle-vertical]': 'vertical'\r\n  }\r\n})\r\nexport class MdButtonToggleGroupMultiple {\r\n  /** Disables all toggles in the group. */\r\n  private _disabled: boolean = null;\r\n\r\n  /** Whether the button toggle group should be vertical. */\r\n  private _vertical: boolean = false;\r\n\r\n  /** Whether the toggle group is disabled. */\r\n  @Input()\r\n  get disabled(): boolean {\r\n    return this._disabled;\r\n  }\r\n\r\n  set disabled(value) {\r\n    this._disabled = (value != null && value !== false) ? true : null;\r\n  }\r\n\r\n  /** Whether the toggle group is vertical. */\r\n  @Input()\r\n  get vertical(): boolean {\r\n    return this._vertical;\r\n  }\r\n\r\n  set vertical(value) {\r\n    this._vertical = coerceBooleanProperty(value);\r\n  }\r\n\r\n}\r\n\r\n/** Single button inside of a toggle group. */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'md-button-toggle',\r\n  templateUrl: 'button-toggle.html',\r\n  styleUrls: ['button-toggle.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class MdButtonToggle implements OnInit {\r\n  /** Whether or not this button toggle is checked. */\r\n  private _checked: boolean = false;\r\n\r\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\r\n  _type: ToggleType;\r\n\r\n  /** The unique ID for this button toggle. */\r\n  @HostBinding()\r\n  @Input()\r\n  id: string;\r\n\r\n  /** HTML's 'name' attribute used to group radios for unique selection. */\r\n  @Input()\r\n  name: string;\r\n\r\n  /** Whether or not this button toggle is disabled. */\r\n  private _disabled: boolean = null;\r\n\r\n  /** Value assigned to this button toggle. */\r\n  private _value: any = null;\r\n\r\n  /** Whether or not the button toggle is a single selection. */\r\n  private _isSingleSelector: boolean = null;\r\n\r\n  /** The parent button toggle group (exclusive selection). Optional. */\r\n  buttonToggleGroup: MdButtonToggleGroup;\r\n\r\n  /** The parent button toggle group (multiple selection). Optional. */\r\n  buttonToggleGroupMultiple: MdButtonToggleGroupMultiple;\r\n\r\n  /** Event emitted when the group value changes. */\r\n  private _change: EventEmitter<MdButtonToggleChange> = new EventEmitter<MdButtonToggleChange>();\r\n  @Output() get change(): Observable<MdButtonToggleChange> {\r\n    return this._change.asObservable();\r\n  }\r\n\r\n  @ViewChild('input') _inputElement: ElementRef;\r\n\r\n  constructor(@Optional() toggleGroup: MdButtonToggleGroup,\r\n              @Optional() toggleGroupMultiple: MdButtonToggleGroupMultiple,\r\n              public buttonToggleDispatcher: UniqueSelectionDispatcher,\r\n              private _renderer: Renderer) {\r\n    this.buttonToggleGroup = toggleGroup;\r\n\r\n    this.buttonToggleGroupMultiple = toggleGroupMultiple;\r\n\r\n    if (this.buttonToggleGroup) {\r\n      buttonToggleDispatcher.listen((id: string, name: string) => {\r\n        if (id != this.id && name == this.name) {\r\n          this.checked = false;\r\n        }\r\n      });\r\n\r\n      this._type = 'radio';\r\n      this.name = this.buttonToggleGroup.name;\r\n      this._isSingleSelector = true;\r\n    } else {\r\n      // Even if there is no group at all, treat the button toggle as a checkbox so it can be\r\n      // toggled on or off.\r\n      this._type = 'checkbox';\r\n      this._isSingleSelector = false;\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (this.id == null) {\r\n      this.id = `md-button-toggle-${_uniqueIdCounter++}`;\r\n    }\r\n\r\n    if (this.buttonToggleGroup && this._value == this.buttonToggleGroup.value) {\r\n      this._checked = true;\r\n    }\r\n  }\r\n\r\n  /** Unique ID for the underlying `input` element. */\r\n  get inputId(): string {\r\n    return `${this.id}-input`;\r\n  }\r\n\r\n  /** Whether the button is checked. */\r\n  @HostBinding('class.md-button-toggle-checked')\r\n  @Input()\r\n  get checked(): boolean {\r\n    return this._checked;\r\n  }\r\n\r\n  set checked(newCheckedState: boolean) {\r\n    if (this._isSingleSelector) {\r\n      if (newCheckedState) {\r\n        // Notify all button toggles with the same name (in the same group) to un-check.\r\n        this.buttonToggleDispatcher.notify(this.id, this.name);\r\n      }\r\n    }\r\n\r\n    this._checked = newCheckedState;\r\n\r\n    if (newCheckedState && this._isSingleSelector && this.buttonToggleGroup.value != this.value) {\r\n      this.buttonToggleGroup.selected = this;\r\n    }\r\n  }\r\n\r\n  /** MdButtonToggleGroup reads this to assign its own value. */\r\n  @Input()\r\n  get value(): any {\r\n    return this._value;\r\n  }\r\n\r\n  set value(value: any) {\r\n    if (this._value != value) {\r\n      if (this.buttonToggleGroup != null && this.checked) {\r\n        this.buttonToggleGroup.value = value;\r\n      }\r\n      this._value = value;\r\n    }\r\n  }\r\n\r\n  /** Dispatch change event with current value. */\r\n  private _emitChangeEvent(): void {\r\n    let event = new MdButtonToggleChange();\r\n    event.source = this;\r\n    event.value = this._value;\r\n    this._change.emit(event);\r\n  }\r\n\r\n  /** Whether the button is disabled. */\r\n  @HostBinding('class.md-button-toggle-disabled')\r\n  @Input()\r\n  get disabled(): boolean {\r\n    return this._disabled || (this.buttonToggleGroup != null && this.buttonToggleGroup.disabled) ||\r\n        (this.buttonToggleGroupMultiple != null && this.buttonToggleGroupMultiple.disabled);\r\n  }\r\n\r\n  set disabled(value: boolean) {\r\n    this._disabled = (value != null && value !== false) ? true : null;\r\n  }\r\n\r\n  /** Toggle the state of the current button toggle. */\r\n  private _toggle(): void {\r\n    this.checked = !this.checked;\r\n  }\r\n\r\n  /** Checks the button toggle due to an interaction with the underlying native input. */\r\n  _onInputChange(event: Event) {\r\n    event.stopPropagation();\r\n\r\n    if (this._isSingleSelector) {\r\n      // Propagate the change one-way via the group, which will in turn mark this\r\n      // button toggle as checked.\r\n      this.checked = true;\r\n      this.buttonToggleGroup.selected = this;\r\n      this.buttonToggleGroup.onTouched();\r\n    } else {\r\n      this._toggle();\r\n    }\r\n\r\n    // Emit a change event when the native input does.\r\n    this._emitChangeEvent();\r\n  }\r\n\r\n  _onInputClick(event: Event) {\r\n    // We have to stop propagation for click events on the visual hidden input element.\r\n    // By default, when a user clicks on a label element, a generated click event will be\r\n    // dispatched on the associated input element. Since we are using a label element as our\r\n    // root container, the click event on the `slide-toggle` will be executed twice.\r\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\r\n    // This will lead to multiple click events.\r\n    // Preventing bubbling for the second event will solve that issue.\r\n    event.stopPropagation();\r\n  }\r\n\r\n  /** Focuses the button. */\r\n  focus() {\r\n    this._renderer.invokeElementMethod(this._inputElement.nativeElement, 'focus');\r\n  }\r\n}\r\n\r\n\r\n@NgModule({\r\n  imports: [FormsModule, CompatibilityModule],\r\n  exports: [\r\n    MdButtonToggleGroup,\r\n    MdButtonToggleGroupMultiple,\r\n    MdButtonToggle,\r\n    CompatibilityModule,\r\n  ],\r\n  declarations: [MdButtonToggleGroup, MdButtonToggleGroupMultiple, MdButtonToggle],\r\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\r\n})\r\nexport class MdButtonToggleModule {\r\n  /** @deprecated */\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: MdButtonToggleModule,\r\n      providers: []\r\n    };\r\n  }\r\n}\r\n"]}