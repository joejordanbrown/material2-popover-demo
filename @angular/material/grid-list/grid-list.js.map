{"version":3,"sources":["../../../src/lib/grid-list/grid-list.ts"],"names":[],"mappings":"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","file":"grid-list.js","sourcesContent":["import {\r\n  NgModule,\r\n  ModuleWithProviders,\r\n  Component,\r\n  ViewEncapsulation,\r\n  AfterContentChecked,\r\n  OnInit,\r\n  Input,\r\n  ContentChildren,\r\n  QueryList,\r\n  Renderer,\r\n  ElementRef,\r\n  Optional,\r\n} from '@angular/core';\r\nimport {MdGridTile, MdGridTileText} from './grid-tile';\r\nimport {TileCoordinator} from './tile-coordinator';\r\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\r\nimport {MdGridListColsError} from './grid-list-errors';\r\nimport {Dir, MdLineModule, CompatibilityModule} from '../core';\r\nimport {\r\n  coerceToString,\r\n  coerceToNumber,\r\n} from './grid-list-measure';\r\n\r\n\r\n// TODO(kara): Conditional (responsive) column count / row size.\r\n// TODO(kara): Re-layout on window resize / media change (debounced).\r\n// TODO(kara): gridTileHeader and gridTileFooter.\r\n\r\nconst MD_FIT_MODE = 'fit';\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'md-grid-list, mat-grid-list',\r\n  templateUrl: 'grid-list.html',\r\n  styleUrls: ['grid-list.css'],\r\n  host: {\r\n    'role': 'list'\r\n  },\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class MdGridList implements OnInit, AfterContentChecked {\r\n  /** Number of columns being rendered. */\r\n  private _cols: number;\r\n\r\n  /**\r\n   * Row height value passed in by user. This can be one of three types:\r\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\r\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\r\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\r\n   */\r\n  private _rowHeight: string;\r\n\r\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\r\n  private _gutter: string = '1px';\r\n\r\n  /** Sets position and size styles for a tile */\r\n  private _tileStyler: TileStyler;\r\n\r\n  /** Query list of tiles that are being rendered. */\r\n  @ContentChildren(MdGridTile) _tiles: QueryList<MdGridTile>;\r\n\r\n  constructor(\r\n      private _renderer: Renderer,\r\n      private _element: ElementRef,\r\n      @Optional() private _dir: Dir) {}\r\n\r\n  /** Amount of columns in the grid list. */\r\n  @Input()\r\n  get cols() { return this._cols; }\r\n  set cols(value: any) { this._cols = coerceToNumber(value); }\r\n\r\n  /** Size of the grid list's gutter in pixels. */\r\n  @Input()\r\n  get gutterSize() { return this._gutter; }\r\n  set gutterSize(value: any) { this._gutter = coerceToString(value); }\r\n\r\n  /** Set internal representation of row height from the user-provided value. */\r\n  @Input()\r\n  set rowHeight(value: string | number) {\r\n    this._rowHeight = coerceToString(value);\r\n    this._setTileStyler();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this._checkCols();\r\n    this._checkRowHeight();\r\n  }\r\n\r\n  /**\r\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\r\n   * to run it frequently.\r\n   */\r\n  ngAfterContentChecked() {\r\n    this._layoutTiles();\r\n  }\r\n\r\n  /** Throw a friendly error if cols property is missing */\r\n  private _checkCols() {\r\n    if (!this.cols) {\r\n      throw new MdGridListColsError();\r\n    }\r\n  }\r\n\r\n  /** Default to equal width:height if rowHeight property is missing */\r\n  private _checkRowHeight(): void {\r\n    if (!this._rowHeight) {\r\n      this._tileStyler = new RatioTileStyler('1:1');\r\n    }\r\n  }\r\n\r\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\r\n  private _setTileStyler(): void {\r\n    if (this._rowHeight === MD_FIT_MODE) {\r\n      this._tileStyler = new FitTileStyler();\r\n    } else if (this._rowHeight && this._rowHeight.indexOf(':') > -1) {\r\n      this._tileStyler = new RatioTileStyler(this._rowHeight);\r\n    } else {\r\n      this._tileStyler = new FixedTileStyler(this._rowHeight);\r\n    }\r\n  }\r\n\r\n  /** Computes and applies the size and position for all children grid tiles. */\r\n  private _layoutTiles(): void {\r\n    let tracker = new TileCoordinator(this.cols, this._tiles);\r\n    let direction = this._dir ? this._dir.value : 'ltr';\r\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\r\n\r\n    this._tiles.forEach((tile, index) => {\r\n      let pos = tracker.positions[index];\r\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\r\n    });\r\n\r\n    this._setListStyle(this._tileStyler.getComputedHeight());\r\n  }\r\n\r\n  /** Sets style on the main grid-list element, given the style name and value. */\r\n  _setListStyle(style: [string, string]): void {\r\n    if (style) {\r\n      this._renderer.setElementStyle(this._element.nativeElement, style[0], style[1]);\r\n    }\r\n  }\r\n}\r\n\r\n\r\n@NgModule({\r\n  imports: [MdLineModule, CompatibilityModule],\r\n  exports: [\r\n    MdGridList,\r\n    MdGridTile,\r\n    MdGridTileText,\r\n    MdLineModule,\r\n    CompatibilityModule,\r\n  ],\r\n  declarations: [MdGridList, MdGridTile, MdGridTileText],\r\n})\r\nexport class MdGridListModule {\r\n  /** @deprecated */\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: MdGridListModule,\r\n      providers: []\r\n    };\r\n  }\r\n}\r\n"]}