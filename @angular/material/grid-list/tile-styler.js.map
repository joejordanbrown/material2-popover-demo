{"version":3,"sources":["../../../src/lib/grid-list/tile-styler.ts"],"names":[],"mappings":"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","file":"tile-styler.js","sourcesContent":["import {MdGridTile} from './grid-tile';\r\nimport {TileCoordinator} from './tile-coordinator';\r\nimport {MdGridListBadRatioError} from './grid-list-errors';\r\n\r\n/**\r\n * Sets the style properties for an individual tile, given the position calculated by the\r\n * Tile Coordinator.\r\n * @docs-private\r\n */\r\nexport class TileStyler {\r\n  _gutterSize: string;\r\n  _rows: number = 0;\r\n  _rowspan: number = 0;\r\n  _cols: number;\r\n  _direction: string;\r\n\r\n  /**\r\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\r\n   * because these properties haven't been calculated by that point.\r\n   *\r\n   * @param gutterSize Size of the grid's gutter.\r\n   * @param tracker Instance of the TileCoordinator.\r\n   * @param cols Amount of columns in the grid.\r\n   * @param direction Layout direction of the grid.\r\n   */\r\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\r\n    this._gutterSize = normalizeUnits(gutterSize);\r\n    this._rows = tracker.rowCount;\r\n    this._rowspan = tracker.rowspan;\r\n    this._cols = cols;\r\n    this._direction = direction;\r\n  }\r\n\r\n  /**\r\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\r\n   * Used as a basis for other calculations.\r\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\r\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\r\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\r\n   */\r\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\r\n    // Take the base size percent (as would be if evenly dividing the size between cells),\r\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\r\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\r\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\r\n    // edge evenly among the cells).\r\n    return `(${sizePercent}% - ( ${this._gutterSize} * ${gutterFraction} ))`;\r\n  }\r\n\r\n\r\n  /**\r\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\r\n   * @param offset Number of tiles that have already been rendered in the row/column.\r\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\r\n   * @return Position of the tile as a CSS calc() expression.\r\n   */\r\n  getTilePosition(baseSize: string, offset: number): string {\r\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\r\n    // row/column (offset).\r\n    return calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\r\n  }\r\n\r\n\r\n  /**\r\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\r\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\r\n   * @param span The tile's rowspan or colspan.\r\n   * @return Size of the tile as a CSS calc() expression.\r\n   */\r\n  getTileSize(baseSize: string, span: number): string {\r\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\r\n  }\r\n\r\n\r\n  /**\r\n   * Sets the style properties to be applied to a tile for the given row and column index.\r\n   * @param tile Tile to which to apply the styling.\r\n   * @param rowIndex Index of the tile's row.\r\n   * @param colIndex Index of the tile's column.\r\n   */\r\n  setStyle(tile: MdGridTile, rowIndex: number, colIndex: number): void {\r\n    // Percent of the available horizontal space that one column takes up.\r\n    let percentWidthPerTile = 100 / this._cols;\r\n\r\n    // Fraction of the vertical gutter size that each column takes up.\r\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\r\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\r\n\r\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\r\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\r\n  }\r\n\r\n  /** Sets the horizontal placement of the tile in the list. */\r\n  setColStyles(tile: MdGridTile, colIndex: number, percentWidth: number,\r\n               gutterWidth: number) {\r\n    // Base horizontal size of a column.\r\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\r\n\r\n    // The width and horizontal position of each tile is always calculated the same way, but the\r\n    // height and vertical position depends on the rowMode.\r\n    let side = this._direction === 'ltr' ? 'left' : 'right';\r\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\r\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\r\n  }\r\n\r\n  /**\r\n   * Calculates the total size taken up by gutters across one axis of a list.\r\n   */\r\n  getGutterSpan(): string {\r\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\r\n  }\r\n\r\n  /**\r\n   * Calculates the total size taken up by tiles across one axis of a list.\r\n   * @param tileHeight Height of the tile.\r\n   */\r\n  getTileSpan(tileHeight: string): string {\r\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\r\n  }\r\n\r\n  /**\r\n   * Sets the vertical placement of the tile in the list.\r\n   * This method will be implemented by each type of TileStyler.\r\n   * @docs-private\r\n   */\r\n  setRowStyles(tile: MdGridTile, rowIndex: number, percentWidth: number, gutterWidth: number) {}\r\n\r\n  /**\r\n   * Calculates the computed height and returns the correct style property to set.\r\n   * This method will be implemented by each type of TileStyler.\r\n   * @docs-private\r\n   */\r\n  getComputedHeight(): [string, string] { return null; }\r\n}\r\n\r\n\r\n/**\r\n * This type of styler is instantiated when the user passes in a fixed row height.\r\n * Example <md-grid-list cols=\"3\" rowHeight=\"100px\">\r\n * @docs-private\r\n */\r\nexport class FixedTileStyler extends TileStyler {\r\n\r\n  constructor(public fixedRowHeight: string) { super(); }\r\n\r\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\r\n    super.init(gutterSize, tracker, cols, direction);\r\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\r\n  }\r\n\r\n  setRowStyles(tile: MdGridTile, rowIndex: number, percentWidth: number,\r\n               gutterWidth: number): void {\r\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\r\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\r\n  }\r\n\r\n  getComputedHeight(): [string, string] {\r\n    return [\r\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\r\n    ];\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * This type of styler is instantiated when the user passes in a width:height ratio\r\n * for the row height.  Example <md-grid-list cols=\"3\" rowHeight=\"3:1\">\r\n * @docs-private\r\n */\r\nexport class RatioTileStyler extends TileStyler {\r\n\r\n  /** Ratio width:height given by user to determine row height.*/\r\n  rowHeightRatio: number;\r\n  baseTileHeight: string;\r\n\r\n  constructor(value: string) {\r\n    super();\r\n    this._parseRatio(value);\r\n  }\r\n\r\n  setRowStyles(tile: MdGridTile, rowIndex: number, percentWidth: number,\r\n               gutterWidth: number): void {\r\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\r\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\r\n\r\n    // Use paddingTop and marginTop to maintain the given aspect ratio, as\r\n    // a percentage-based value for these properties is applied versus the *width* of the\r\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\r\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\r\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\r\n  }\r\n\r\n  getComputedHeight(): [string, string] {\r\n    return [\r\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\r\n    ];\r\n  }\r\n\r\n  private _parseRatio(value: string): void {\r\n    let ratioParts = value.split(':');\r\n\r\n    if (ratioParts.length !== 2) {\r\n      throw new MdGridListBadRatioError(value);\r\n    }\r\n\r\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\r\n  }\r\n}\r\n\r\n/**\r\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\r\n * In other words, the row height will reflect the total height of the container divided\r\n * by the number of rows.  Example <md-grid-list cols=\"3\" rowHeight=\"fit\">\r\n *\r\n * @docs-private\r\n */\r\nexport class FitTileStyler extends TileStyler {\r\n\r\n  setRowStyles(tile: MdGridTile, rowIndex: number, percentWidth: number,\r\n               gutterWidth: number): void {\r\n    // Percent of the available vertical space that one row takes up.\r\n    let percentHeightPerTile = 100 / this._rowspan;\r\n\r\n    // Fraction of the horizontal gutter size that each column takes up.\r\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\r\n\r\n    // Base vertical size of a column.\r\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\r\n\r\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\r\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\r\n  }\r\n}\r\n\r\n\r\n/** Wraps a CSS string in a calc function */\r\nfunction calc(exp: string): string { return `calc(${exp})`; }\r\n\r\n\r\n/** Appends pixels to a CSS string if no units are given. */\r\nfunction normalizeUnits(value: string): string {\r\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\r\n}\r\n\r\n"]}