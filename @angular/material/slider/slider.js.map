{"version":3,"sources":["../../../src/lib/slider/slider.ts"],"names":[],"mappings":";;;;;;;;;;;;OAAO,EACL,QAAQ,EAER,SAAS,EACT,UAAU,EACV,KAAK,EACL,MAAM,EACN,iBAAiB,EACjB,UAAU,EACV,YAAY,EACZ,QAAQ,EACT,MAAM,eAAe;OACf,EAAC,iBAAiB,EAAwB,WAAW,EAAC,MAAM,gBAAgB;OAC5E,EAAC,qBAAqB,EAAC,MAAM,2BAA2B;OACxD,EACL,aAAa,EAEb,qBAAqB,EACrB,oBAAoB,EACpB,mBAAmB,EACpB,MAAM,SAAS;OACT,EAAC,GAAG,EAAC,MAAM,iBAAiB;OAC5B,EAAC,YAAY,EAAC,MAAM,iBAAiB;OACrC,EACL,OAAO,EACP,SAAS,EACT,GAAG,EACH,IAAI,EACJ,UAAU,EACV,QAAQ,EACR,WAAW,EACX,UAAU,EACX,MAAM,2BAA2B;AAElC;;;GAGG;AACH,IAAM,wBAAwB,GAAG,EAAE,CAAC;AAEpC,gDAAgD;AAChD,IAAM,kBAAkB,GAAG,CAAC,CAAC;AAE7B,uEAAuE;AACvE,IAAM,6BAA6B,GAAG,CAAC,CAAC;AAExC,oEAAoE;AACpE,IAAM,0BAA0B,GAAG,EAAE,CAAC;AAEtC;;;GAGG;AACH,OAAO,IAAM,wBAAwB,GAAQ;IAC3C,OAAO,EAAE,iBAAiB;IAC1B,WAAW,EAAE,UAAU,CAAC,cAAM,OAAA,QAAQ,EAAR,CAAQ,CAAC;IACvC,KAAK,EAAE,IAAI;CACZ,CAAC;AAEF,+DAA+D;AAC/D;IAAA;IAGA,CAAC;IAAD,qBAAC;AAAD,CAHA,AAGC,IAAA;AAED;;;GAGG;AAkCH;IA8PE,kBAAgC,IAAS,EAAE,UAAsB;QAAjC,SAAI,GAAJ,IAAI,CAAK;QA7PzC,uEAAuE;QAC/D,cAAS,GAAmB,IAAI,CAAC;QAEzC,oCAAoC;QAC5B,sBAAiB,GAAe,IAAI,CAAC;QAErC,cAAS,GAAY,KAAK,CAAC;QAO3B,gBAAW,GAAY,KAAK,CAAC;QAY7B,kCAA6B,GAAyB,cAAO,CAAC,CAAC;QAEvE,qEAAqE;QAC7D,qBAAgB,GAAW,IAAI,CAAC;QAChC,oBAAe,GAAW,IAAI,CAAC;QAEvC,8EAA8E;QAC9E,cAAS,GAAc,cAAO,CAAC,CAAC;QAEhC;;;WAGG;QACH,eAAU,GAAY,KAAK,CAAC;QAE5B;;;WAGG;QACH,cAAS,GAAY,KAAK,CAAC;QAEnB,UAAK,GAAW,CAAC,CAAC;QAOlB,kBAAa,GAAoB,CAAC,CAAC;QAiBnC,yBAAoB,GAAW,CAAC,CAAC;QAKjC,aAAQ,GAAW,CAAC,CAAC;QAKrB,WAAM,GAAW,IAAI,CAAC;QAgBtB,SAAI,GAAW,CAAC,CAAC;QAiBjB,SAAI,GAAW,GAAG,CAAC;QAgBnB,YAAO,GAAG,KAAK,CAAC;QAMhB,cAAS,GAAG,KAAK,CAAC;QAgH1B,uDAAuD;QAC7C,WAAM,GAAG,IAAI,YAAY,EAAkB,CAAC;QAEtD,iDAAiD;QACvC,UAAK,GAAG,IAAI,YAAY,EAAkB,CAAC;QAGnD,IAAI,CAAC,SAAS,GAAG,IAAI,cAAc,CAAC,UAAU,CAAC,CAAC;IAClD,CAAC;IArPD,sBAAI,8BAAQ;QAFZ,6CAA6C;aAE7C,cAA0B,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;aAClD,UAAa,KAAK,IAAI,IAAI,CAAC,SAAS,GAAG,qBAAqB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;;;OADpB;IAOlD,sBAAI,gCAAU;QAFd,8CAA8C;aAE9C,cAA4B,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;aACtD,UAAe,KAAK,IAAI,IAAI,CAAC,WAAW,GAAG,qBAAqB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;;;OADpB;IAKtD,sBAAI,2CAAqB;QAFzB,kBAAkB;aAElB,cAAuC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;aACjE,UAA0B,KAAK,IAAI,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC,CAAC,CAAC;;;OADG;IA4BjE,sBAAI,0BAAI;QAFR,+CAA+C;aAE/C,cAAa,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;aACjC,UAAS,CAAC,IAAI,IAAI,CAAC,KAAK,GAAG,oBAAoB,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;;;OADhC;IAUjC,sBAAI,kCAAY;QALhB;;;WAGG;aAEH,cAAqB,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;aACjD,UAAiB,CAAC;YAChB,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC,IAAI,MAAM,CAAC,GAAG,CAAC,GAAG,oBAAoB,CAAC,CAAC,EAAU,IAAI,CAAC,aAAa,CAAC,CAAC;QAC/F,CAAC;;;OAHgD;IAOjD,sBAAI,6CAAuB;QAF3B,kBAAkB;aAElB,cAAgC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;aAC3D,UAA4B,CAAC,IAAI,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC,CAAC,CAAC;;;OADE;IAM3D,sBAAI,yCAAmB;QADvB,4EAA4E;aAC5E,cAA4B,MAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC,CAAC;;;OAAA;IAK/D,sBAAI,6BAAO;QADX,kEAAkE;aAClE,cAAgB,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;;;OAAA;IAMpD,sBAAI,2BAAK;QAFT,2BAA2B;aAE3B;YACE,yFAAyF;YACzF,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,KAAK,IAAI,CAAC,CAAC,CAAC;gBACzB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC;YACzB,CAAC;YACD,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;QACrB,CAAC;aACD,UAAU,CAAS;YACjB,IAAI,CAAC,MAAM,GAAG,oBAAoB,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;YACnD,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACzD,CAAC;;;OAJA;IAUD,sBAAI,yBAAG;QAFP,kDAAkD;aAElD;YACE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;QACnB,CAAC;aACD,UAAQ,CAAS;YACf,IAAI,CAAC,IAAI,GAAG,oBAAoB,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;YAE/C,qEAAqE;YACrE,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,KAAK,IAAI,CAAC,CAAC,CAAC;gBACzB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC;YACzB,CAAC;YACD,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACxD,CAAC;;;OATA;IAeD,sBAAI,yBAAG;QAFP,kDAAkD;aAElD;YACE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;QACnB,CAAC;aACD,UAAQ,CAAS;YACf,IAAI,CAAC,IAAI,GAAG,oBAAoB,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;YAC/C,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACxD,CAAC;;;OAJA;IAQD,sBAAI,4BAAM;QAFV,sCAAsC;aAEtC,cAAe,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;aACrC,UAAW,KAAU,IAAI,IAAI,CAAC,OAAO,GAAG,qBAAqB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;;;OADlC;IAMrC,sBAAI,8BAAQ;QAFZ,sCAAsC;aAEtC,cAAiB,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;aACzC,UAAa,KAAU,IAAI,IAAI,CAAC,SAAS,GAAG,qBAAqB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;;;OADlC;IAQzC,sBAAI,gCAAU;QAJd;;;WAGG;aACH;YACE,+FAA+F;YAC/F,0DAA0D;YAC1D,MAAM,CAAC,IAAI,CAAC,QAAQ,GAAG,CAAC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;QACpD,CAAC;;;OAAA;IAMD,sBAAI,uCAAiB;QAJrB;;;WAGG;aACH;YACE,MAAM,CAAC,CAAC,IAAI,CAAC,SAAS,IAAI,KAAK,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;QAC1F,CAAC;;;OAAA;IAGD,sBAAI,iCAAW;QADf,kDAAkD;aAClD;YACE,MAAM,CAAC,IAAI,CAAC,OAAO,KAAK,CAAC,CAAC;QAC5B,CAAC;;;OAAA;IAMD,sBAAI,+BAAS;QAJb;;;WAGG;aACH;YACE,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;gBAClB,MAAM,CAAC,kBAAkB,CAAC;YAC5B,CAAC;YACD,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;gBACzC,MAAM,CAAC,IAAI,CAAC,SAAS,GAAG,0BAA0B,GAAG,6BAA6B,CAAC;YACrF,CAAC;YACD,MAAM,CAAC,CAAC,CAAC;QACX,CAAC;;;OAAA;IAGD,sBAAI,2CAAqB;QADzB,mDAAmD;aACnD;YACE,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,GAAG,GAAG,GAAG,GAAG,CAAC;YACrC,IAAI,IAAI,GAAG,IAAI,CAAC,iBAAiB,GAAG,GAAG,GAAG,EAAE,CAAC;YAC7C,MAAM,CAAC;gBACL,WAAW,EAAE,cAAY,IAAI,SAAI,IAAI,GAAG,IAAI,CAAC,SAAS,iBAAY,IAAI,UAAI,CAAC,GAAG,IAAI,CAAC,OAAO,OAAG;aAC9F,CAAC;QACJ,CAAC;;;OAAA;IAGD,sBAAI,qCAAe;QADnB,6CAA6C;aAC7C;YACE,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,GAAG,GAAG,GAAG,GAAG,CAAC;YACrC,IAAI,IAAI,GAAG,IAAI,CAAC,iBAAiB,GAAG,EAAE,GAAG,GAAG,CAAC;YAC7C,MAAM,CAAC;gBACL,WAAW,EAAE,cAAY,IAAI,SAAI,IAAI,GAAG,IAAI,CAAC,SAAS,iBAAY,IAAI,SAAI,IAAI,CAAC,OAAO,MAAG;aAC1F,CAAC;QACJ,CAAC;;;OAAA;IAGD,sBAAI,0CAAoB;QADxB,kDAAkD;aAClD;YACE,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,GAAG,GAAG,GAAG,GAAG,CAAC;YACrC,yFAAyF;YACzF,+EAA+E;YAC/E,IAAI,IAAI,GAAG,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,SAAS,IAAI,KAAK,GAAG,EAAE,GAAG,GAAG,CAAC;YAChE,IAAI,MAAM,GAAG,IAAI,CAAC,mBAAmB,GAAG,CAAC,GAAG,GAAG,CAAC;YAChD,MAAM,CAAC;gBACL,WAAW,EAAE,cAAY,IAAI,SAAI,IAAI,GAAG,MAAM,OAAI;aACnD,CAAC;QACJ,CAAC;;;OAAA;IAGD,sBAAI,iCAAW;QADf,wCAAwC;aACxC;YACE,IAAI,QAAQ,GAAG,IAAI,CAAC,mBAAmB,GAAG,GAAG,CAAC;YAC9C,IAAI,cAAc,GAAG,IAAI,CAAC,QAAQ,GAAG,SAAO,QAAQ,MAAG,GAAM,QAAQ,UAAO,CAAC;YAC7E,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,GAAG,GAAG,GAAG,GAAG,CAAC;YACrC,wFAAwF;YACxF,8FAA8F;YAC9F,gFAAgF;YAChF,IAAI,IAAI,GAAG,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,SAAS,IAAI,KAAK,GAAG,GAAG,GAAG,EAAE,CAAC;YAChE,IAAI,MAAM,GAAG,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,SAAS,IAAI,KAAK,GAAG,iBAAiB,GAAG,EAAE,CAAC;YAChF,IAAI,MAAM,GAA8B;gBACtC,gBAAgB,EAAE,cAAc;gBAChC,qFAAqF;gBACrF,WAAW,EAAE,4BAA0B,IAAI,SAAI,IAAI,GAAG,QAAQ,GAAG,CAAC,UAAK,MAAQ;aAChF,CAAC;YAEF,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;gBACvC,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ;oBACpB,CAAC,IAAI,CAAC,UAAU,GAAG,QAAQ,GAAG,KAAK,CAAC;oBACpC,CAAC,IAAI,CAAC,UAAU,GAAG,OAAO,GAAG,MAAM,CAAC,CAAC;gBACzC,MAAM,CAAC,aAAU,IAAI,CAAE,CAAC,GAAM,IAAI,CAAC,SAAS,OAAI,CAAC;YACnD,CAAC;YAED,MAAM,CAAC,MAAM,CAAC;QAChB,CAAC;;;OAAA;IAED,sBAAI,0CAAoB;aAAxB;YACE,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,GAAG,GAAG,GAAG,GAAG,CAAC;YACrC,yFAAyF;YACzF,+EAA+E;YAC/E,IAAI,YAAY,GACZ,CAAC,IAAI,CAAC,SAAS,IAAI,KAAK,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;YACrF,IAAI,MAAM,GAAG,CAAC,YAAY,GAAG,IAAI,CAAC,OAAO,GAAG,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,GAAG,CAAC;YACpE,MAAM,CAAC;gBACL,WAAW,EAAE,cAAY,IAAI,UAAK,MAAM,OAAI;aAC7C,CAAC;QACJ,CAAC;;;OAAA;IAGD,sBAAI,+BAAS;QADb,sDAAsD;aACtD;YACE,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,GAAG,KAAK,GAAG,KAAK,CAAC;QACjE,CAAC;;;OAAA;IAYD,gCAAa,GAAb;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YAClB,MAAM,CAAC;QACT,CAAC;QAED,4FAA4F;QAC5F,yEAAyE;QACzE,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,SAAS,CAAC,mBAAmB,EAAE,CAAC;QAC9D,IAAI,CAAC,0BAA0B,EAAE,CAAC;IACpC,CAAC;IAED,2BAAQ,GAAR,UAAS,KAAiB;QACxB,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YAClB,MAAM,CAAC;QACT,CAAC;QAED,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACtB,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;QACxB,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC;QAC1B,IAAI,CAAC,wBAAwB,CAAC,EAAC,CAAC,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC,EAAE,KAAK,CAAC,OAAO,EAAC,CAAC,CAAC;QAEpE,0DAA0D;QAC1D,IAAI,CAAC,eAAe,EAAE,CAAC;QACvB,IAAI,CAAC,mBAAmB,EAAE,CAAC;IAC7B,CAAC;IAED,2BAAQ,GAAR,UAAS,KAAkB;QACzB,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YAClB,MAAM,CAAC;QACT,CAAC;QAED,kDAAkD;QAClD,KAAK,CAAC,cAAc,EAAE,CAAC;QACvB,IAAI,CAAC,wBAAwB,CAAC,EAAC,CAAC,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC,EAAC,CAAC,CAAC;QAEtE,yFAAyF;QACzF,IAAI,CAAC,eAAe,EAAE,CAAC;IACzB,CAAC;IAED,gCAAa,GAAb,UAAc,KAAkB;QAC9B,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YAClB,MAAM,CAAC;QACT,CAAC;QAED,uDAAuD;QACvD,IAAI,CAAC,aAAa,EAAE,CAAC;QAErB,KAAK,CAAC,cAAc,EAAE,CAAC;QACvB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QACvB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACtB,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC;QAC1B,IAAI,CAAC,wBAAwB,CAAC,EAAC,CAAC,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC,EAAC,CAAC,CAAC;IACxE,CAAC;IAED,8BAAW,GAAX;QACE,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;QACxB,IAAI,CAAC,mBAAmB,EAAE,CAAC;IAC7B,CAAC;IAED,0BAAO,GAAP;QACE,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QACvB,IAAI,CAAC,SAAS,EAAE,CAAC;IACnB,CAAC;IAED,6BAAU,GAAV,UAAW,KAAoB;QAC7B,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YAAC,MAAM,CAAC;QAAC,CAAC;QAE9B,MAAM,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;YACtB,KAAK,OAAO;gBACV,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;gBACpB,KAAK,CAAC;YACR,KAAK,SAAS;gBACZ,IAAI,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,CAAC;gBACrB,KAAK,CAAC;YACR,KAAK,GAAG;gBACN,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC;gBACtB,KAAK,CAAC;YACR,KAAK,IAAI;gBACP,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC;gBACtB,KAAK,CAAC;YACR,KAAK,UAAU;gBACb,4FAA4F;gBAC5F,uFAAuF;gBACvF,yFAAyF;gBACzF,0FAA0F;gBAC1F,0FAA0F;gBAC1F,2FAA2F;gBAC3F,uDAAuD;gBACvD,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,IAAI,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBAClD,KAAK,CAAC;YACR,KAAK,QAAQ;gBACX,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;gBACnB,KAAK,CAAC;YACR,KAAK,WAAW;gBACd,kFAAkF;gBAClF,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,IAAI,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBAClD,KAAK,CAAC;YACR,KAAK,UAAU;gBACb,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;gBACpB,KAAK,CAAC;YACR;gBACE,4FAA4F;gBAC5F,MAAM;gBACN,MAAM,CAAC;QACX,CAAC;QAED,KAAK,CAAC,cAAc,EAAE,CAAC;IACzB,CAAC;IAED,uFAAuF;IAC/E,6BAAU,GAAlB,UAAmB,QAAgB;QACjC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,GAAG,QAAQ,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;IAClF,CAAC;IAED,gGAAgG;IACxF,2CAAwB,GAAhC,UAAiC,GAA2B;QAC1D,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC;YAC5B,MAAM,CAAC;QACT,CAAC;QAED,IAAI,MAAM,GAAG,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,iBAAiB,CAAC,GAAG,GAAG,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC;QACtF,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,GAAG,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC;QACxF,IAAI,YAAY,GAAG,IAAI,CAAC,QAAQ,GAAG,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;QAEjD,wFAAwF;QACxF,IAAI,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,YAAY,GAAG,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC;QAC1D,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC;YAC3B,OAAO,GAAG,CAAC,GAAG,OAAO,CAAC;QACxB,CAAC;QACD,IAAI,UAAU,GAAG,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;QAE/C,+FAA+F;QAC/F,4BAA4B;QAC5B,IAAI,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC;QAC1F,8CAA8C;QAC9C,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;IAC7D,CAAC;IAED,0FAA0F;IAClF,sCAAmB,GAA3B;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC;YACxC,IAAI,OAAK,GAAG,IAAI,CAAC,kBAAkB,EAAE,CAAC;YACtC,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,KAAK,CAAC;YACnC,IAAI,CAAC,6BAA6B,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC/C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAK,CAAC,CAAC;QAC1B,CAAC;IACH,CAAC;IAED,4FAA4F;IACpF,kCAAe,GAAvB;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC;YACvC,IAAI,OAAK,GAAG,IAAI,CAAC,kBAAkB,EAAE,CAAC;YACtC,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,KAAK,CAAC;YAClC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,OAAK,CAAC,CAAC;QACzB,CAAC;IACH,CAAC;IAED,4FAA4F;IACpF,6CAA0B,GAAlC;QACE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;YACvB,MAAM,CAAC;QACT,CAAC;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,IAAI,MAAM,CAAC,CAAC,CAAC;YAChC,IAAI,SAAS,GAAG,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,GAAG,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC;YAC7F,IAAI,aAAa,GAAG,SAAS,GAAG,IAAI,CAAC,IAAI,GAAG,CAAC,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;YAClE,IAAI,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,wBAAwB,GAAG,aAAa,CAAC,CAAC;YACvE,IAAI,aAAa,GAAG,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC;YAC7C,IAAI,CAAC,oBAAoB,GAAG,aAAa,GAAG,SAAS,CAAC;QACxD,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,IAAI,GAAG,CAAC,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;QACpF,CAAC;IACH,CAAC;IAED,+DAA+D;IACvD,qCAAkB,GAA1B,UAA2B,KAAkB;QAAlB,qBAAkB,GAAlB,QAAQ,IAAI,CAAC,KAAK;QAC3C,IAAI,KAAK,GAAG,IAAI,cAAc,EAAE,CAAC;QAEjC,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC;QACpB,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC;QAEpB,MAAM,CAAC,KAAK,CAAC;IACf,CAAC;IAED,+DAA+D;IACvD,uCAAoB,GAA5B,UAA6B,KAAa;QACxC,MAAM,CAAC,CAAC,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;IACpD,CAAC;IAED,sEAAsE;IAC9D,kCAAe,GAAvB,UAAwB,UAAkB;QACxC,MAAM,CAAC,IAAI,CAAC,GAAG,GAAG,UAAU,GAAG,CAAC,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;IACvD,CAAC;IAED,2CAA2C;IACnC,yBAAM,GAAd,UAAe,KAAa,EAAE,GAAO,EAAE,GAAO;QAAhB,mBAAO,GAAP,OAAO;QAAE,mBAAO,GAAP,OAAO;QAC5C,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC;IAC7C,CAAC;IAED;;;OAGG;IACH,6BAAU,GAAV,UAAW,KAAU;QACnB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACrB,CAAC;IAED;;;;OAIG;IACH,mCAAgB,GAAhB,UAAiB,EAAwB;QACvC,IAAI,CAAC,6BAA6B,GAAG,EAAE,CAAC;IAC1C,CAAC;IAED;;;;OAIG;IACH,oCAAiB,GAAjB,UAAkB,EAAO;QACvB,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;IACtB,CAAC;IAED;;;;OAIG;IACH,mCAAgB,GAAhB,UAAiB,UAAmB;QAClC,IAAI,CAAC,QAAQ,GAAG,UAAU,CAAC;IAC7B,CAAC;IAheD;QAAC,KAAK,EAAE;;4CAAA;IAOR;QAAC,KAAK,CAAC,YAAY,CAAC;;8CAAA;IAKpB;QAAC,KAAK,CAAC,aAAa,CAAC;;yDAAA;IA4BrB;QAAC,KAAK,EAAE;;wCAAA;IAUR;QAAC,KAAK,EAAE;;gDAAA;IAOR;QAAC,KAAK,CAAC,eAAe,CAAC;;2DAAA;IAiBvB;QAAC,KAAK,EAAE;;yCAAA;IAgBR;QAAC,KAAK,EAAE;;uCAAA;IAiBR;QAAC,KAAK,EAAE;;uCAAA;IAUR;QAAC,KAAK,EAAE;;0CAAA;IAMR;QAAC,KAAK,EAAE;;4CAAA;IAoHR;QAAC,MAAM,EAAE;;4CAAA;IAGT;QAAC,MAAM,EAAE;;2CAAA;IA7RX;QAAC,SAAS,CAAC;YACT,QAAQ,EAAE,MAAM,CAAC,EAAE;YACnB,QAAQ,EAAE,uBAAuB;YACjC,SAAS,EAAE,CAAC,wBAAwB,CAAC;YACrC,IAAI,EAAE;gBACJ,QAAQ,EAAE,WAAW;gBACrB,SAAS,EAAE,kBAAkB;gBAC7B,WAAW,EAAE,oBAAoB;gBACjC,cAAc,EAAE,iBAAiB;gBACjC,SAAS,EAAE,kBAAkB;gBAC7B,YAAY,EAAE,eAAe;gBAC7B,cAAc,EAAE,uBAAuB;gBACvC,MAAM,EAAE,QAAQ;gBAChB,UAAU,EAAE,GAAG;gBACf,sBAAsB,EAAE,UAAU;gBAClC,sBAAsB,EAAE,KAAK;gBAC7B,sBAAsB,EAAE,KAAK;gBAC7B,sBAAsB,EAAE,OAAO;gBAC/B,0BAA0B,EAAE,WAAW;gBACvC,4BAA4B,EAAE,UAAU;gBACxC,6BAA6B,EAAE,cAAc;gBAC7C,8BAA8B,EAAE,WAAW;gBAC3C,iCAAiC,EAAE,YAAY;gBAC/C,2BAA2B,EAAE,YAAY;gBACzC,uCAAuC,EAAE,YAAY;gBACrD,4BAA4B,EAAE,UAAU;gBACxC,6BAA6B,EAAE,aAAa;gBAC5C,kCAAkC,EAAE,oDAAoD;aACzF;YACD,WAAW,EAAE,aAAa;YAC1B,SAAS,EAAE,CAAC,YAAY,CAAC;YACzB,aAAa,EAAE,iBAAiB,CAAC,IAAI;SACtC,CAAC;mBA+Pa,QAAQ,EAAE;;gBA/PvB;IA4eF,eAAC;AAAD,CA3eA,AA2eC,IAAA;AAED;;;GAGG;AACH;IAGE,wBAAY,UAAsB;QAChC,IAAI,CAAC,cAAc,GAAG,UAAU,CAAC,aAAa,CAAC;IACjD,CAAC;IAED;;;;OAIG;IACH,4CAAmB,GAAnB;QACE,IAAI,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,oBAAoB,CAAC,CAAC;QAC7E,MAAM,CAAC,cAAc,CAAC,qBAAqB,EAAE,CAAC;IAChD,CAAC;IAED;;;OAGG;IACH,iCAAQ,GAAR;QACE,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,CAAC;IAC9B,CAAC;IACH,qBAAC;AAAD,CAxBA,AAwBC,IAAA;AASD;IAAA;IAQA,CAAC;IAPC,kBAAkB;IACX,sBAAO,GAAd;QACE,MAAM,CAAC;YACL,QAAQ,EAAE,cAAc;YACxB,SAAS,EAAE,EAAE;SACd,CAAC;IACJ,CAAC;IAbH;QAAC,QAAQ,CAAC;YACR,OAAO,EAAE,CAAC,YAAY,EAAE,WAAW,EAAE,mBAAmB,CAAC;YACzD,OAAO,EAAE,CAAC,QAAQ,EAAE,mBAAmB,CAAC;YACxC,YAAY,EAAE,CAAC,QAAQ,CAAC;YACxB,SAAS,EAAE,CAAC,EAAC,OAAO,EAAE,qBAAqB,EAAE,QAAQ,EAAE,aAAa,EAAC,CAAC;SACvE,CAAC;;sBAAA;IASF,qBAAC;AAAD,CARA,AAQC,IAAA","file":"slider.js","sourcesContent":["import {\r\n  NgModule,\r\n  ModuleWithProviders,\r\n  Component,\r\n  ElementRef,\r\n  Input,\r\n  Output,\r\n  ViewEncapsulation,\r\n  forwardRef,\r\n  EventEmitter,\r\n  Optional\r\n} from '@angular/core';\r\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor, FormsModule} from '@angular/forms';\r\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\r\nimport {\r\n  GestureConfig,\r\n  HammerInput,\r\n  coerceBooleanProperty,\r\n  coerceNumberProperty,\r\n  CompatibilityModule,\r\n} from '../core';\r\nimport {Dir} from '../core/rtl/dir';\r\nimport {CommonModule} from '@angular/common';\r\nimport {\r\n  PAGE_UP,\r\n  PAGE_DOWN,\r\n  END,\r\n  HOME,\r\n  LEFT_ARROW,\r\n  UP_ARROW,\r\n  RIGHT_ARROW,\r\n  DOWN_ARROW\r\n} from '../core/keyboard/keycodes';\r\n\r\n/**\r\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\r\n * the default separation we chose.\r\n */\r\nconst MIN_AUTO_TICK_SEPARATION = 30;\r\n\r\n/** The thumb gap size for a disabled slider. */\r\nconst DISABLED_THUMB_GAP = 7;\r\n\r\n/** The thumb gap size for a non-active slider at its minimum value. */\r\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\r\n\r\n/** The thumb gap size for an active slider at its minimum value. */\r\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\r\n\r\n/**\r\n * Provider Expression that allows md-slider to register as a ControlValueAccessor.\r\n * This allows it to support [(ngModel)] and [formControl].\r\n */\r\nexport const MD_SLIDER_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => MdSlider),\r\n  multi: true\r\n};\r\n\r\n/** A simple change event emitted by the MdSlider component. */\r\nexport class MdSliderChange {\r\n  source: MdSlider;\r\n  value: number;\r\n}\r\n\r\n/**\r\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\r\n * behavior to the native `<input type=\"range\">` element.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'md-slider, mat-slider',\r\n  providers: [MD_SLIDER_VALUE_ACCESSOR],\r\n  host: {\r\n    '(blur)': '_onBlur()',\r\n    '(click)': '_onClick($event)',\r\n    '(keydown)': '_onKeydown($event)',\r\n    '(mouseenter)': '_onMouseenter()',\r\n    '(slide)': '_onSlide($event)',\r\n    '(slideend)': '_onSlideEnd()',\r\n    '(slidestart)': '_onSlideStart($event)',\r\n    'role': 'slider',\r\n    'tabindex': '0',\r\n    '[attr.aria-disabled]': 'disabled',\r\n    '[attr.aria-valuemax]': 'max',\r\n    '[attr.aria-valuemin]': 'min',\r\n    '[attr.aria-valuenow]': 'value',\r\n    '[class.md-slider-active]': '_isActive',\r\n    '[class.md-slider-disabled]': 'disabled',\r\n    '[class.md-slider-has-ticks]': 'tickInterval',\r\n    '[class.md-slider-horizontal]': '!vertical',\r\n    '[class.md-slider-axis-inverted]': 'invertAxis',\r\n    '[class.md-slider-sliding]': '_isSliding',\r\n    '[class.md-slider-thumb-label-showing]': 'thumbLabel',\r\n    '[class.md-slider-vertical]': 'vertical',\r\n    '[class.md-slider-min-value]': '_isMinValue',\r\n    '[class.md-slider-hide-last-tick]': '_isMinValue && _thumbGap && invertAxis || disabled',\r\n  },\r\n  templateUrl: 'slider.html',\r\n  styleUrls: ['slider.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class MdSlider implements ControlValueAccessor {\r\n  /** A renderer to handle updating the slider's thumb and fill track. */\r\n  private _renderer: SliderRenderer = null;\r\n\r\n  /** The dimensions of the slider. */\r\n  private _sliderDimensions: ClientRect = null;\r\n\r\n  private _disabled: boolean = false;\r\n\r\n  /** Whether or not the slider is disabled. */\r\n  @Input()\r\n  get disabled(): boolean { return this._disabled; }\r\n  set disabled(value) { this._disabled = coerceBooleanProperty(value); }\r\n\r\n  private _thumbLabel: boolean = false;\r\n\r\n  /** Whether or not to show the thumb label. */\r\n  @Input('thumbLabel')\r\n  get thumbLabel(): boolean { return this._thumbLabel; }\r\n  set thumbLabel(value) { this._thumbLabel = coerceBooleanProperty(value); }\r\n\r\n  /** @deprecated */\r\n  @Input('thumb-label')\r\n  get _thumbLabelDeprecated(): boolean { return this._thumbLabel; }\r\n  set _thumbLabelDeprecated(value) { this._thumbLabel = value; }\r\n\r\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\r\n\r\n  /** The last values for which a change or input event was emitted. */\r\n  private _lastChangeValue: number = null;\r\n  private _lastInputValue: number = null;\r\n\r\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\r\n  onTouched: () => any = () => {};\r\n\r\n  /**\r\n   * Whether or not the thumb is sliding.\r\n   * Used to determine if there should be a transition for the thumb and fill track.\r\n   */\r\n  _isSliding: boolean = false;\r\n\r\n  /**\r\n   * Whether or not the slider is active (clicked or sliding).\r\n   * Used to shrink and grow the thumb as according to the Material Design spec.\r\n   */\r\n  _isActive: boolean = false;\r\n\r\n  private _step: number = 1;\r\n\r\n  /** The values at which the thumb will snap. */\r\n  @Input()\r\n  get step() { return this._step; }\r\n  set step(v) { this._step = coerceNumberProperty(v, this._step); }\r\n\r\n  private _tickInterval: 'auto' | number = 0;\r\n\r\n  /**\r\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\r\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\r\n   */\r\n  @Input()\r\n  get tickInterval() { return this._tickInterval; }\r\n  set tickInterval(v) {\r\n    this._tickInterval = (v == 'auto') ? v : coerceNumberProperty(v, <number>this._tickInterval);\r\n  }\r\n\r\n  /** @deprecated */\r\n  @Input('tick-interval')\r\n  get _tickIntervalDeprecated() { return this.tickInterval; }\r\n  set _tickIntervalDeprecated(v) { this.tickInterval = v; }\r\n\r\n  private _tickIntervalPercent: number = 0;\r\n\r\n  /** The size of a tick interval as a percentage of the size of the track. */\r\n  get tickIntervalPercent() { return this._tickIntervalPercent; }\r\n\r\n  private _percent: number = 0;\r\n\r\n  /** The percentage of the slider that coincides with the value. */\r\n  get percent() { return this._clamp(this._percent); }\r\n\r\n  private _value: number = null;\r\n\r\n  /** Value of the slider. */\r\n  @Input()\r\n  get value() {\r\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\r\n    if (this._value === null) {\r\n      this.value = this._min;\r\n    }\r\n    return this._value;\r\n  }\r\n  set value(v: number) {\r\n    this._value = coerceNumberProperty(v, this._value);\r\n    this._percent = this._calculatePercentage(this._value);\r\n  }\r\n\r\n  private _min: number = 0;\r\n\r\n  /** The minimum value that the slider can have. */\r\n  @Input()\r\n  get min() {\r\n    return this._min;\r\n  }\r\n  set min(v: number) {\r\n    this._min = coerceNumberProperty(v, this._min);\r\n\r\n    // If the value wasn't explicitly set by the user, set it to the min.\r\n    if (this._value === null) {\r\n      this.value = this._min;\r\n    }\r\n    this._percent = this._calculatePercentage(this.value);\r\n  }\r\n\r\n  private _max: number = 100;\r\n\r\n  /** The maximum value that the slider can have. */\r\n  @Input()\r\n  get max() {\r\n    return this._max;\r\n  }\r\n  set max(v: number) {\r\n    this._max = coerceNumberProperty(v, this._max);\r\n    this._percent = this._calculatePercentage(this.value);\r\n  }\r\n\r\n  /** Whether the slider is inverted. */\r\n  @Input()\r\n  get invert() { return this._invert; }\r\n  set invert(value: any) { this._invert = coerceBooleanProperty(value); }\r\n  private _invert = false;\r\n\r\n  /** Whether the slider is vertical. */\r\n  @Input()\r\n  get vertical() { return this._vertical; }\r\n  set vertical(value: any) { this._vertical = coerceBooleanProperty(value); }\r\n  private _vertical = false;\r\n\r\n  /**\r\n   * Whether the axis of the slider is inverted.\r\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\r\n   */\r\n  get invertAxis() {\r\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\r\n    // top. However from a y-axis standpoint this is inverted.\r\n    return this.vertical ? !this.invert : this.invert;\r\n  }\r\n\r\n  /**\r\n   * Whether mouse events should be converted to a slider position by calculating their distance\r\n   * from the right or bottom edge of the slider as opposed to the top or left.\r\n   */\r\n  get invertMouseCoords() {\r\n    return (this.direction == 'rtl' && !this.vertical) ? !this.invertAxis : this.invertAxis;\r\n  }\r\n\r\n  /** Whether the slider is at its minimum value. */\r\n  get _isMinValue() {\r\n    return this.percent === 0;\r\n  }\r\n\r\n  /**\r\n   * The amount of space to leave between the slider thumb and the track fill & track background\r\n   * elements.\r\n   */\r\n  get _thumbGap() {\r\n    if (this.disabled) {\r\n      return DISABLED_THUMB_GAP;\r\n    }\r\n    if (this._isMinValue && !this.thumbLabel) {\r\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  /** CSS styles for the track background element. */\r\n  get trackBackgroundStyles(): { [key: string]: string } {\r\n    let axis = this.vertical ? 'Y' : 'X';\r\n    let sign = this.invertMouseCoords ? '-' : '';\r\n    return {\r\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${1 - this.percent})`\r\n    };\r\n  }\r\n\r\n  /** CSS styles for the track fill element. */\r\n  get trackFillStyles(): { [key: string]: string } {\r\n    let axis = this.vertical ? 'Y' : 'X';\r\n    let sign = this.invertMouseCoords ? '' : '-';\r\n    return {\r\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${this.percent})`\r\n    };\r\n  }\r\n\r\n  /** CSS styles for the ticks container element. */\r\n  get ticksContainerStyles(): { [key: string]: string } {\r\n    let axis = this.vertical ? 'Y' : 'X';\r\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\r\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\r\n    let sign = !this.vertical && this.direction == 'rtl' ? '' : '-';\r\n    let offset = this.tickIntervalPercent / 2 * 100;\r\n    return {\r\n      'transform': `translate${axis}(${sign}${offset}%)`\r\n    };\r\n  }\r\n\r\n  /** CSS styles for the ticks element. */\r\n  get ticksStyles(): { [key: string]: string } {\r\n    let tickSize = this.tickIntervalPercent * 100;\r\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\r\n    let axis = this.vertical ? 'Y' : 'X';\r\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\r\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\r\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\r\n    let sign = !this.vertical && this.direction == 'rtl' ? '-' : '';\r\n    let rotate = !this.vertical && this.direction == 'rtl' ? ' rotate(180deg)' : '';\r\n    let styles: { [key: string]: string } = {\r\n      'backgroundSize': backgroundSize,\r\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\r\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\r\n    };\r\n\r\n    if (this._isMinValue && this._thumbGap) {\r\n      let side = this.vertical ?\r\n          (this.invertAxis ? 'Bottom' : 'Top') :\r\n          (this.invertAxis ? 'Right' : 'Left');\r\n      styles[`padding${side}`] = `${this._thumbGap}px`;\r\n    }\r\n\r\n    return styles;\r\n  }\r\n\r\n  get thumbContainerStyles(): { [key: string]: string } {\r\n    let axis = this.vertical ? 'Y' : 'X';\r\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\r\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\r\n    let invertOffset =\r\n        (this.direction == 'rtl' && !this.vertical) ? !this.invertAxis : this.invertAxis;\r\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\r\n    return {\r\n      'transform': `translate${axis}(-${offset}%)`\r\n    };\r\n  }\r\n\r\n  /** The language direction for this slider element. */\r\n  get direction() {\r\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\r\n  }\r\n\r\n  /** Event emitted when the slider value has changed. */\r\n  @Output() change = new EventEmitter<MdSliderChange>();\r\n\r\n  /** Event emitted when the slider thumb moves. */\r\n  @Output() input = new EventEmitter<MdSliderChange>();\r\n\r\n  constructor(@Optional() private _dir: Dir, elementRef: ElementRef) {\r\n    this._renderer = new SliderRenderer(elementRef);\r\n  }\r\n\r\n  _onMouseenter() {\r\n    if (this.disabled) {\r\n      return;\r\n    }\r\n\r\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\r\n    // ticks and determine where on the slider click and slide events happen.\r\n    this._sliderDimensions = this._renderer.getSliderDimensions();\r\n    this._updateTickIntervalPercent();\r\n  }\r\n\r\n  _onClick(event: MouseEvent) {\r\n    if (this.disabled) {\r\n      return;\r\n    }\r\n\r\n    this._isActive = true;\r\n    this._isSliding = false;\r\n    this._renderer.addFocus();\r\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\r\n\r\n    /* Emits a change and input event if the value changed. */\r\n    this._emitInputEvent();\r\n    this._emitValueIfChanged();\r\n  }\r\n\r\n  _onSlide(event: HammerInput) {\r\n    if (this.disabled) {\r\n      return;\r\n    }\r\n\r\n    // Prevent the slide from selecting anything else.\r\n    event.preventDefault();\r\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\r\n\r\n    // Native range elements always emit `input` events when the value changed while sliding.\r\n    this._emitInputEvent();\r\n  }\r\n\r\n  _onSlideStart(event: HammerInput) {\r\n    if (this.disabled) {\r\n      return;\r\n    }\r\n\r\n    // Simulate mouseenter in case this is a mobile device.\r\n    this._onMouseenter();\r\n\r\n    event.preventDefault();\r\n    this._isSliding = true;\r\n    this._isActive = true;\r\n    this._renderer.addFocus();\r\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\r\n  }\r\n\r\n  _onSlideEnd() {\r\n    this._isSliding = false;\r\n    this._emitValueIfChanged();\r\n  }\r\n\r\n  _onBlur() {\r\n    this._isActive = false;\r\n    this.onTouched();\r\n  }\r\n\r\n  _onKeydown(event: KeyboardEvent) {\r\n    if (this.disabled) { return; }\r\n\r\n    switch (event.keyCode) {\r\n      case PAGE_UP:\r\n        this._increment(10);\r\n        break;\r\n      case PAGE_DOWN:\r\n        this._increment(-10);\r\n        break;\r\n      case END:\r\n        this.value = this.max;\r\n        break;\r\n      case HOME:\r\n        this.value = this.min;\r\n        break;\r\n      case LEFT_ARROW:\r\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\r\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\r\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\r\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\r\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\r\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\r\n        // sighted users, therefore we do not swap the meaning.\r\n        this._increment(this.direction == 'rtl' ? 1 : -1);\r\n        break;\r\n      case UP_ARROW:\r\n        this._increment(1);\r\n        break;\r\n      case RIGHT_ARROW:\r\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\r\n        this._increment(this.direction == 'rtl' ? -1 : 1);\r\n        break;\r\n      case DOWN_ARROW:\r\n        this._increment(-1);\r\n        break;\r\n      default:\r\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\r\n        // it.\r\n        return;\r\n    }\r\n\r\n    event.preventDefault();\r\n  }\r\n\r\n  /** Increments the slider by the given number of steps (negative number decrements). */\r\n  private _increment(numSteps: number) {\r\n    this.value = this._clamp(this.value + this.step * numSteps, this.min, this.max);\r\n  }\r\n\r\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\r\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\r\n    if (!this._sliderDimensions) {\r\n      return;\r\n    }\r\n\r\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\r\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\r\n    let posComponent = this.vertical ? pos.y : pos.x;\r\n\r\n    // The exact value is calculated from the event and used to find the closest snap value.\r\n    let percent = this._clamp((posComponent - offset) / size);\r\n    if (this.invertMouseCoords) {\r\n      percent = 1 - percent;\r\n    }\r\n    let exactValue = this._calculateValue(percent);\r\n\r\n    // This calculation finds the closest step by finding the closest whole number divisible by the\r\n    // step relative to the min.\r\n    let closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\r\n    // The value needs to snap to the min and max.\r\n    this.value = this._clamp(closestValue, this.min, this.max);\r\n  }\r\n\r\n  /** Emits a change event if the current value is different from the last emitted value. */\r\n  private _emitValueIfChanged() {\r\n    if (this.value != this._lastChangeValue) {\r\n      let event = this._createChangeEvent();\r\n      this._lastChangeValue = this.value;\r\n      this._controlValueAccessorChangeFn(this.value);\r\n      this.change.emit(event);\r\n    }\r\n  }\r\n\r\n  /** Emits an input event when the current value is different from the last emitted value. */\r\n  private _emitInputEvent() {\r\n    if (this.value != this._lastInputValue) {\r\n      let event = this._createChangeEvent();\r\n      this._lastInputValue = this.value;\r\n      this.input.emit(event);\r\n    }\r\n  }\r\n\r\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\r\n  private _updateTickIntervalPercent() {\r\n    if (!this.tickInterval) {\r\n      return;\r\n    }\r\n\r\n    if (this.tickInterval == 'auto') {\r\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\r\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\r\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\r\n      let pixelsPerTick = stepsPerTick * this.step;\r\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\r\n    } else {\r\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\r\n    }\r\n  }\r\n\r\n  /** Creates a slider change object from the specified value. */\r\n  private _createChangeEvent(value = this.value): MdSliderChange {\r\n    let event = new MdSliderChange();\r\n\r\n    event.source = this;\r\n    event.value = value;\r\n\r\n    return event;\r\n  }\r\n\r\n  /** Calculates the percentage of the slider that a value is. */\r\n  private _calculatePercentage(value: number) {\r\n    return (value - this.min) / (this.max - this.min);\r\n  }\r\n\r\n  /** Calculates the value a percentage of the slider corresponds to. */\r\n  private _calculateValue(percentage: number) {\r\n    return this.min + percentage * (this.max - this.min);\r\n  }\r\n\r\n  /** Return a number between two numbers. */\r\n  private _clamp(value: number, min = 0, max = 1) {\r\n    return Math.max(min, Math.min(value, max));\r\n  }\r\n\r\n  /**\r\n   * Sets the model value. Implemented as part of ControlValueAccessor.\r\n   * @param value\r\n   */\r\n  writeValue(value: any) {\r\n    this.value = value;\r\n  }\r\n\r\n  /**\r\n   * Registers a callback to eb triggered when the value has changed.\r\n   * Implemented as part of ControlValueAccessor.\r\n   * @param fn Callback to be registered.\r\n   */\r\n  registerOnChange(fn: (value: any) => void) {\r\n    this._controlValueAccessorChangeFn = fn;\r\n  }\r\n\r\n  /**\r\n   * Registers a callback to be triggered when the component is touched.\r\n   * Implemented as part of ControlValueAccessor.\r\n   * @param fn Callback to be registered.\r\n   */\r\n  registerOnTouched(fn: any) {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  /**\r\n   * Sets whether the component should be disabled.\r\n   * Implemented as part of ControlValueAccessor.\r\n   * @param isDisabled\r\n   */\r\n  setDisabledState(isDisabled: boolean) {\r\n    this.disabled = isDisabled;\r\n  }\r\n}\r\n\r\n/**\r\n * Renderer class in order to keep all dom manipulation in one place and outside of the main class.\r\n * @docs-private\r\n */\r\nexport class SliderRenderer {\r\n  private _sliderElement: HTMLElement;\r\n\r\n  constructor(elementRef: ElementRef) {\r\n    this._sliderElement = elementRef.nativeElement;\r\n  }\r\n\r\n  /**\r\n   * Get the bounding client rect of the slider track element.\r\n   * The track is used rather than the native element to ignore the extra space that the thumb can\r\n   * take up.\r\n   */\r\n  getSliderDimensions() {\r\n    let wrapperElement = this._sliderElement.querySelector('.md-slider-wrapper');\r\n    return wrapperElement.getBoundingClientRect();\r\n  }\r\n\r\n  /**\r\n   * Focuses the native element.\r\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\r\n   */\r\n  addFocus() {\r\n    this._sliderElement.focus();\r\n  }\r\n}\r\n\r\n\r\n@NgModule({\r\n  imports: [CommonModule, FormsModule, CompatibilityModule],\r\n  exports: [MdSlider, CompatibilityModule],\r\n  declarations: [MdSlider],\r\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\r\n})\r\nexport class MdSliderModule {\r\n  /** @deprecated */\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: MdSliderModule,\r\n      providers: []\r\n    };\r\n  }\r\n}\r\n"]}