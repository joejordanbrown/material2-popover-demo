{"version":3,"sources":["../../../src/lib/radio/radio.ts"],"names":[],"mappings":"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","file":"radio.js","sourcesContent":["import {\r\n  AfterContentInit,\r\n  Component,\r\n  ContentChildren,\r\n  Directive,\r\n  ElementRef,\r\n  Renderer,\r\n  EventEmitter,\r\n  HostBinding,\r\n  Input,\r\n  OnInit,\r\n  Optional,\r\n  Output,\r\n  QueryList,\r\n  ViewEncapsulation,\r\n  forwardRef,\r\n  NgModule,\r\n  ModuleWithProviders,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\r\nimport {\r\n  MdRippleModule,\r\n  UniqueSelectionDispatcher,\r\n  CompatibilityModule,\r\n  UNIQUE_SELECTION_DISPATCHER_PROVIDER,\r\n} from '../core';\r\nimport {coerceBooleanProperty} from '../core/coercion/boolean-property';\r\nimport {VIEWPORT_RULER_PROVIDER} from '../core/overlay/position/viewport-ruler';\r\n\r\n\r\n/**\r\n * Provider Expression that allows md-radio-group to register as a ControlValueAccessor. This\r\n * allows it to support [(ngModel)] and ngControl.\r\n * @docs-private\r\n */\r\nexport const MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => MdRadioGroup),\r\n  multi: true\r\n};\r\n\r\nvar _uniqueIdCounter = 0;\r\n\r\n/** Change event object emitted by MdRadio and MdRadioGroup. */\r\nexport class MdRadioChange {\r\n  source: MdRadioButton;\r\n  value: any;\r\n}\r\n\r\n/**\r\n * A group of radio buttons. May contain one or more `<md-radio-button>` elements.\r\n */\r\n@Directive({\r\n  selector: 'md-radio-group, mat-radio-group',\r\n  providers: [MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\r\n  host: {\r\n    'role': 'radiogroup',\r\n  },\r\n})\r\nexport class MdRadioGroup implements AfterContentInit, ControlValueAccessor {\r\n  /**\r\n   * Selected value for group. Should equal the value of the selected radio button if there *is*\r\n   * a corresponding radio button with a matching value. If there is *not* such a corresponding\r\n   * radio button, this value persists to be applied in case a new radio button is added with a\r\n   * matching value.\r\n   */\r\n  private _value: any = null;\r\n\r\n  /** The HTML name attribute applied to radio buttons in this group. */\r\n  private _name: string = `md-radio-group-${_uniqueIdCounter++}`;\r\n\r\n  /** Disables all individual radio buttons assigned to this group. */\r\n  private _disabled: boolean = false;\r\n\r\n  /** The currently selected radio button. Should match value. */\r\n  private _selected: MdRadioButton = null;\r\n\r\n  /** Whether the `value` has been set to its initial value. */\r\n  private _isInitialized: boolean = false;\r\n\r\n  /** The method to be called in order to update ngModel */\r\n  _controlValueAccessorChangeFn: (value: any) => void = (value) => {};\r\n\r\n  /**\r\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\r\n   * @docs-private\r\n   */\r\n  onTouched: () => any = () => {};\r\n\r\n  /**\r\n   * Event emitted when the group value changes.\r\n   * Change events are only emitted when the value changes due to user interaction with\r\n   * a radio button (the same behavior as `<input type-\"radio\">`).\r\n   */\r\n  @Output()\r\n  change: EventEmitter<MdRadioChange> = new EventEmitter<MdRadioChange>();\r\n\r\n  /** Child radio buttons. */\r\n  @ContentChildren(forwardRef(() => MdRadioButton))\r\n  _radios: QueryList<MdRadioButton> = null;\r\n\r\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\r\n  @Input()\r\n  get name(): string { return this._name; }\r\n  set name(value: string) {\r\n    this._name = value;\r\n    this._updateRadioButtonNames();\r\n  }\r\n\r\n  /**\r\n   * Alignment of the radio-buttons relative to their labels. Can be 'before' or 'after'.\r\n   * @deprecated\r\n   */\r\n  @Input()\r\n  get align(): 'start' | 'end' {\r\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\r\n    // label relative to the checkbox. As such, they are inverted.\r\n    return this.labelPosition == 'after' ? 'start' : 'end';\r\n  }\r\n\r\n  set align(v) {\r\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\r\n  }\r\n\r\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\r\n  @Input() labelPosition: 'before' | 'after' = 'after';\r\n\r\n  /** Whether the radio button is disabled. */\r\n  @Input()\r\n  get disabled(): boolean { return this._disabled; }\r\n  set disabled(value) {\r\n    // The presence of *any* disabled value makes the component disabled, *except* for false.\r\n    this._disabled = (value != null && value !== false) ? true : null;\r\n  }\r\n\r\n  /** Value of the radio button. */\r\n  @Input()\r\n  get value(): any { return this._value; }\r\n  set value(newValue: any) {\r\n    if (this._value != newValue) {\r\n      // Set this before proceeding to ensure no circular loop occurs with selection.\r\n      this._value = newValue;\r\n\r\n      this._updateSelectedRadioFromValue();\r\n      this._checkSelectedRadioButton();\r\n    }\r\n  }\r\n\r\n  _checkSelectedRadioButton() {\r\n    if (this.selected && !this._selected.checked) {\r\n      this._selected.checked = true;\r\n    }\r\n  }\r\n\r\n  /** Whether the radio button is selected. */\r\n  @Input()\r\n  get selected() { return this._selected; }\r\n  set selected(selected: MdRadioButton) {\r\n    this._selected = selected;\r\n    this.value = selected ? selected.value : null;\r\n    this._checkSelectedRadioButton();\r\n  }\r\n\r\n  /**\r\n   * Initialize properties once content children are available.\r\n   * This allows us to propagate relevant attributes to associated buttons.\r\n   */\r\n  ngAfterContentInit() {\r\n    // Mark this component as initialized in AfterContentInit because the initial value can\r\n    // possibly be set by NgModel on MdRadioGroup, and it is possible that the OnInit of the\r\n    // NgModel occurs *after* the OnInit of the MdRadioGroup.\r\n    this._isInitialized = true;\r\n  }\r\n\r\n  /**\r\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\r\n   * radio buttons upon their blur.\r\n   */\r\n  _touch() {\r\n    if (this.onTouched) {\r\n      this.onTouched();\r\n    }\r\n  }\r\n\r\n  private _updateRadioButtonNames(): void {\r\n    if (this._radios) {\r\n      this._radios.forEach(radio => {\r\n        radio.name = this.name;\r\n      });\r\n    }\r\n  }\r\n\r\n  /** Updates the `selected` radio button from the internal _value state. */\r\n  private _updateSelectedRadioFromValue(): void {\r\n    // If the value already matches the selected radio, do nothing.\r\n    let isAlreadySelected = this._selected != null && this._selected.value == this._value;\r\n\r\n    if (this._radios != null && !isAlreadySelected) {\r\n      this._selected = null;\r\n      this._radios.forEach(radio => {\r\n        radio.checked = this.value == radio.value;\r\n        if (radio.checked) {\r\n          this._selected = radio;\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /** Dispatch change event with current selection and group value. */\r\n  _emitChangeEvent(): void {\r\n    if (this._isInitialized) {\r\n      let event = new MdRadioChange();\r\n      event.source = this._selected;\r\n      event.value = this._value;\r\n      this.change.emit(event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the model value. Implemented as part of ControlValueAccessor.\r\n   * @param value\r\n   */\r\n  writeValue(value: any) {\r\n    this.value = value;\r\n  }\r\n\r\n  /**\r\n   * Registers a callback to be triggered when the model value changes.\r\n   * Implemented as part of ControlValueAccessor.\r\n   * @param fn Callback to be registered.\r\n   */\r\n  registerOnChange(fn: (value: any) => void) {\r\n    this._controlValueAccessorChangeFn = fn;\r\n  }\r\n\r\n  /**\r\n   * Registers a callback to be triggered when the control is touched.\r\n   * Implemented as part of ControlValueAccessor.\r\n   * @param fn Callback to be registered.\r\n   */\r\n  registerOnTouched(fn: any) {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  /**\r\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\r\n   * @param isDisabled Whether the control should be disabled.\r\n   */\r\n  setDisabledState(isDisabled: boolean) {\r\n    this.disabled = isDisabled;\r\n  }\r\n}\r\n\r\n/**\r\n * A radio-button. May be inside of\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'md-radio-button, mat-radio-button',\r\n  templateUrl: 'radio.html',\r\n  styleUrls: ['radio.css'],\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class MdRadioButton implements OnInit {\r\n\r\n  @HostBinding('class.md-radio-focused')\r\n  _isFocused: boolean;\r\n\r\n  /** Whether this radio is checked. */\r\n  private _checked: boolean = false;\r\n\r\n  /** The unique ID for the radio button. */\r\n  @HostBinding('id')\r\n  @Input()\r\n  id: string = `md-radio-${_uniqueIdCounter++}`;\r\n\r\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\r\n  @Input()\r\n  name: string;\r\n\r\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\r\n  @Input('aria-label') ariaLabel: string;\r\n\r\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\r\n  @Input('aria-labelledby') ariaLabelledby: string;\r\n\r\n  /** Whether this radio is disabled. */\r\n  private _disabled: boolean;\r\n\r\n  /** Value assigned to this radio.*/\r\n  private _value: any = null;\r\n\r\n  /** Whether the ripple effect on click should be disabled. */\r\n  private _disableRipple: boolean;\r\n\r\n  /** The parent radio group. May or may not be present. */\r\n  radioGroup: MdRadioGroup;\r\n\r\n  /** Whether the ripple effect for this radio button is disabled. */\r\n  @Input()\r\n  get disableRipple(): boolean { return this._disableRipple; }\r\n  set disableRipple(value) { this._disableRipple = coerceBooleanProperty(value); }\r\n\r\n  /**\r\n   * Event emitted when the checked state of this radio button changes.\r\n   * Change events are only emitted when the value changes due to user interaction with\r\n   * the radio button (the same behavior as `<input type-\"radio\">`).\r\n   */\r\n  @Output()\r\n  change: EventEmitter<MdRadioChange> = new EventEmitter<MdRadioChange>();\r\n\r\n  /** The native `<input type=radio>` element */\r\n  @ViewChild('input') _inputElement: ElementRef;\r\n\r\n  constructor(@Optional() radioGroup: MdRadioGroup,\r\n              private _elementRef: ElementRef,\r\n              private _renderer: Renderer,\r\n              public radioDispatcher: UniqueSelectionDispatcher) {\r\n    // Assertions. Ideally these should be stripped out by the compiler.\r\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\r\n\r\n    this.radioGroup = radioGroup;\r\n\r\n    radioDispatcher.listen((id: string, name: string) => {\r\n      if (id != this.id && name == this.name) {\r\n        this.checked = false;\r\n      }\r\n    });\r\n  }\r\n\r\n  /** ID of the native input element inside `<md-radio-button>` */\r\n  get inputId(): string {\r\n    return `${this.id}-input`;\r\n  }\r\n\r\n  /** Whether this radio button is checked. */\r\n  @HostBinding('class.md-radio-checked')\r\n  @Input()\r\n  get checked(): boolean {\r\n    return this._checked;\r\n  }\r\n\r\n  set checked(newCheckedState: boolean) {\r\n    if (this._checked != newCheckedState) {\r\n      this._checked = newCheckedState;\r\n\r\n      if (newCheckedState && this.radioGroup && this.radioGroup.value != this.value) {\r\n        this.radioGroup.selected = this;\r\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value == this.value) {\r\n        // When unchecking the selected radio button, update the selected radio\r\n        // property on the group.\r\n        this.radioGroup.selected = null;\r\n      }\r\n\r\n      if (newCheckedState) {\r\n        // Notify all radio buttons with the same name to un-check.\r\n        this.radioDispatcher.notify(this.id, this.name);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** The value of this radio button. */\r\n  @Input()\r\n  get value(): any {\r\n    return this._value;\r\n  }\r\n\r\n  set value(value: any) {\r\n    if (this._value != value) {\r\n      this._value = value;\r\n      if (this.radioGroup != null) {\r\n        if (!this.checked) {\r\n          // Update checked when the value changed to match the radio group's value\r\n          this.checked = this.radioGroup.value == value;\r\n        }\r\n        if (this.checked) {\r\n          this.radioGroup.selected = this;\r\n        }\r\n      }\r\n\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Whether or not the radio-button should appear before or after the label.\r\n   * @deprecated\r\n   */\r\n  @Input()\r\n  get align(): 'start' | 'end' {\r\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\r\n    // label relative to the checkbox. As such, they are inverted.\r\n    return this.labelPosition == 'after' ? 'start' : 'end';\r\n  }\r\n\r\n  set align(v) {\r\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\r\n  }\r\n\r\n  private _labelPosition: 'before' | 'after';\r\n\r\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\r\n  @Input()\r\n  get labelPosition(): 'before' | 'after' {\r\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\r\n  }\r\n\r\n  set labelPosition(value) {\r\n    this._labelPosition = value;\r\n  }\r\n\r\n  /** Whether the radio button is disabled. */\r\n  @HostBinding('class.md-radio-disabled')\r\n  @Input()\r\n  get disabled(): boolean {\r\n    return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\r\n  }\r\n\r\n  set disabled(value: boolean) {\r\n    // The presence of *any* disabled value makes the component disabled, *except* for false.\r\n    this._disabled = (value != null && value !== false) ? true : null;\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (this.radioGroup) {\r\n      // If the radio is inside a radio group, determine if it should be checked\r\n      this.checked = this.radioGroup.value === this._value;\r\n      // Copy name from parent radio group\r\n      this.name = this.radioGroup.name;\r\n    }\r\n  }\r\n\r\n  /** Dispatch change event with current value. */\r\n  private _emitChangeEvent(): void {\r\n    let event = new MdRadioChange();\r\n    event.source = this;\r\n    event.value = this._value;\r\n    this.change.emit(event);\r\n  }\r\n\r\n  _isRippleDisabled() {\r\n    return this.disableRipple || this.disabled;\r\n  }\r\n\r\n  /**\r\n   * We use a hidden native input field to handle changes to focus state via keyboard navigation,\r\n   * with visual rendering done separately. The native element is kept in sync with the overall\r\n   * state of the component.\r\n   */\r\n  _onInputFocus() {\r\n    this._isFocused = true;\r\n  }\r\n\r\n  /** Focuses the radio button. */\r\n  focus(): void {\r\n    this._renderer.invokeElementMethod(this._inputElement.nativeElement, 'focus');\r\n    this._onInputFocus();\r\n  }\r\n\r\n  _onInputBlur() {\r\n    this._isFocused = false;\r\n\r\n    if (this.radioGroup) {\r\n      this.radioGroup._touch();\r\n    }\r\n  }\r\n\r\n  _onInputClick(event: Event) {\r\n    // We have to stop propagation for click events on the visual hidden input element.\r\n    // By default, when a user clicks on a label element, a generated click event will be\r\n    // dispatched on the associated input element. Since we are using a label element as our\r\n    // root container, the click event on the `radio-button` will be executed twice.\r\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\r\n    // This will lead to multiple click events.\r\n    // Preventing bubbling for the second event will solve that issue.\r\n    event.stopPropagation();\r\n  }\r\n\r\n  /**\r\n   * Triggered when the radio button received a click or the input recognized any change.\r\n   * Clicking on a label element, will trigger a change event on the associated input.\r\n   */\r\n  _onInputChange(event: Event) {\r\n    // We always have to stop propagation on the change event.\r\n    // Otherwise the change event, from the input element, will bubble up and\r\n    // emit its event object to the `change` output.\r\n    event.stopPropagation();\r\n\r\n    let groupValueChanged = this.radioGroup && this.value != this.radioGroup.value;\r\n    this.checked = true;\r\n    this._emitChangeEvent();\r\n\r\n    if (this.radioGroup) {\r\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\r\n      this.radioGroup._touch();\r\n      if (groupValueChanged) {\r\n        this.radioGroup._emitChangeEvent();\r\n      }\r\n    }\r\n  }\r\n\r\n  _getHostElement() {\r\n    return this._elementRef.nativeElement;\r\n  }\r\n}\r\n\r\n\r\n@NgModule({\r\n  imports: [CommonModule, MdRippleModule, CompatibilityModule],\r\n  exports: [MdRadioGroup, MdRadioButton, CompatibilityModule],\r\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER, VIEWPORT_RULER_PROVIDER],\r\n  declarations: [MdRadioGroup, MdRadioButton],\r\n})\r\nexport class MdRadioModule {\r\n  /** @deprecated */\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: MdRadioModule,\r\n      providers: [],\r\n    };\r\n  }\r\n}\r\n"]}