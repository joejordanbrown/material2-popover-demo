{"version":3,"sources":["../../../src/lib/progress-spinner/progress-spinner.ts"],"names":[],"mappings":"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","file":"progress-spinner.js","sourcesContent":["import {\r\n  NgModule,\r\n  ModuleWithProviders,\r\n  Component,\r\n  HostBinding,\r\n  ChangeDetectionStrategy,\r\n  OnDestroy,\r\n  Input,\r\n  ElementRef,\r\n  NgZone,\r\n  Renderer\r\n} from '@angular/core';\r\nimport {CompatibilityModule} from '../core';\r\n\r\n\r\n// TODO(josephperrott): Benchpress tests.\r\n\r\n/** A single degree in radians. */\r\nconst DEGREE_IN_RADIANS = Math.PI / 180;\r\n/** Duration of the indeterminate animation. */\r\nconst DURATION_INDETERMINATE = 667;\r\n/** Duration of the indeterminate animation. */\r\nconst DURATION_DETERMINATE = 225;\r\n/** Start animation value of the indeterminate animation */\r\nconst startIndeterminate = 3;\r\n/** End animation value of the indeterminate animation */\r\nconst endIndeterminate = 80;\r\n/* Maximum angle for the arc. The angle can't be exactly 360, because the arc becomes hidden. */\r\nconst MAX_ANGLE = 359.99 / 100;\r\n\r\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\r\n\r\ntype EasingFn = (currentTime: number, startValue: number,\r\n                 changeInValue: number, duration: number) => number\r\n\r\n\r\n/**\r\n * <md-progress-spinner> component.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'md-progress-spinner, mat-progress-spinner, md-progress-circle, mat-progress-circle',\r\n  host: {\r\n    'role': 'progressbar',\r\n    '[attr.aria-valuemin]': '_ariaValueMin',\r\n    '[attr.aria-valuemax]': '_ariaValueMax'\r\n  },\r\n  templateUrl: 'progress-spinner.html',\r\n  styleUrls: ['progress-spinner.css'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MdProgressSpinner implements OnDestroy {\r\n  /** The id of the last requested animation. */\r\n  private _lastAnimationId: number = 0;\r\n\r\n  /** The id of the indeterminate interval. */\r\n  private _interdeterminateInterval: number;\r\n\r\n  /** The SVG <path> node that is used to draw the circle. */\r\n  private _path: SVGPathElement;\r\n\r\n  private _mode: ProgressSpinnerMode = 'determinate';\r\n  private _value: number;\r\n  private _color: string = 'primary';\r\n\r\n  /**\r\n   * Values for aria max and min are only defined as numbers when in a determinate mode.  We do this\r\n   * because voiceover does not report the progress indicator as indeterminate if the aria min\r\n   * and/or max value are number values.\r\n   */\r\n  get _ariaValueMin() {\r\n    return this.mode == 'determinate' ? 0 : null;\r\n  }\r\n\r\n  get _ariaValueMax() {\r\n    return this.mode == 'determinate' ? 100 : null;\r\n  }\r\n\r\n  /** @docs-private */\r\n  get interdeterminateInterval() {\r\n    return this._interdeterminateInterval;\r\n  }\r\n  /** @docs-private */\r\n  set interdeterminateInterval(interval: number) {\r\n    clearInterval(this._interdeterminateInterval);\r\n    this._interdeterminateInterval = interval;\r\n  }\r\n\r\n  /**\r\n   * Clean up any animations that were running.\r\n   */\r\n  ngOnDestroy() {\r\n    this._cleanupIndeterminateAnimation();\r\n  }\r\n\r\n  /** The color of the progress-spinner. Can be primary, accent, or warn. */\r\n  @Input()\r\n  get color(): string { return this._color; }\r\n  set color(value: string) {\r\n    this._updateColor(value);\r\n  }\r\n\r\n  /** Value of the progress circle. It is bound to the host as the attribute aria-valuenow. */\r\n  @Input()\r\n  @HostBinding('attr.aria-valuenow')\r\n  get value() {\r\n    if (this.mode == 'determinate') {\r\n      return this._value;\r\n    }\r\n  }\r\n  set value(v: number) {\r\n    if (v != null && this.mode == 'determinate') {\r\n      let newValue = clamp(v);\r\n      this._animateCircle((this.value || 0), newValue, linearEase, DURATION_DETERMINATE, 0);\r\n      this._value = newValue;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Mode of the progress circle\r\n   *\r\n   * Input must be one of the values from ProgressMode, defaults to 'determinate'.\r\n   * mode is bound to the host as the attribute host.\r\n   */\r\n  @HostBinding('attr.mode')\r\n  @Input()\r\n  get mode() {\r\n    return this._mode;\r\n  }\r\n  set mode(m: ProgressSpinnerMode) {\r\n    if (m == 'indeterminate') {\r\n      this._startIndeterminateAnimation();\r\n    } else {\r\n      this._cleanupIndeterminateAnimation();\r\n    }\r\n    this._mode = m;\r\n  }\r\n\r\n  constructor(\r\n    private _ngZone: NgZone,\r\n    private _elementRef: ElementRef,\r\n    private _renderer: Renderer\r\n  ) {}\r\n\r\n\r\n  /**\r\n   * Animates the circle from one percentage value to another.\r\n   *\r\n   * @param animateFrom The percentage of the circle filled starting the animation.\r\n   * @param animateTo The percentage of the circle filled ending the animation.\r\n   * @param ease The easing function to manage the pace of change in the animation.\r\n   * @param duration The length of time to show the animation, in milliseconds.\r\n   * @param rotation The starting angle of the circle fill, with 0° represented at the top center\r\n   *    of the circle.\r\n   */\r\n  private _animateCircle(animateFrom: number, animateTo: number, ease: EasingFn,\r\n                        duration: number, rotation: number) {\r\n\r\n    let id = ++this._lastAnimationId;\r\n    let startTime = Date.now();\r\n    let changeInValue = animateTo - animateFrom;\r\n\r\n    // No need to animate it if the values are the same\r\n    if (animateTo === animateFrom) {\r\n      this._renderArc(animateTo, rotation);\r\n    } else {\r\n      let animation = () => {\r\n        let elapsedTime = Math.max(0, Math.min(Date.now() - startTime, duration));\r\n\r\n        this._renderArc(\r\n          ease(elapsedTime, animateFrom, changeInValue, duration),\r\n          rotation\r\n        );\r\n\r\n        // Prevent overlapping animations by checking if a new animation has been called for and\r\n        // if the animation has lasted longer than the animation duration.\r\n        if (id === this._lastAnimationId && elapsedTime < duration) {\r\n          requestAnimationFrame(animation);\r\n        }\r\n      };\r\n\r\n      // Run the animation outside of Angular's zone, in order to avoid\r\n      // hitting ZoneJS and change detection on each frame.\r\n      this._ngZone.runOutsideAngular(animation);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Starts the indeterminate animation interval, if it is not already running.\r\n   */\r\n  private _startIndeterminateAnimation() {\r\n    let rotationStartPoint = 0;\r\n    let start = startIndeterminate;\r\n    let end = endIndeterminate;\r\n    let duration = DURATION_INDETERMINATE;\r\n    let animate = () => {\r\n      this._animateCircle(start, end, materialEase, duration, rotationStartPoint);\r\n      // Prevent rotation from reaching Number.MAX_SAFE_INTEGER.\r\n      rotationStartPoint = (rotationStartPoint + end) % 100;\r\n      let temp = start;\r\n      start = -end;\r\n      end = -temp;\r\n    };\r\n\r\n    if (!this.interdeterminateInterval) {\r\n      this._ngZone.runOutsideAngular(() => {\r\n        this.interdeterminateInterval = setInterval(animate, duration + 50, 0, false);\r\n        animate();\r\n      });\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Removes interval, ending the animation.\r\n   */\r\n  private _cleanupIndeterminateAnimation() {\r\n    this.interdeterminateInterval = null;\r\n  }\r\n\r\n  /**\r\n   * Renders the arc onto the SVG element. Proxies `getArc` while setting the proper\r\n   * DOM attribute on the `<path>`.\r\n   */\r\n  private _renderArc(currentValue: number, rotation: number) {\r\n    // Caches the path reference so it doesn't have to be looked up every time.\r\n    let path = this._path = this._path || this._elementRef.nativeElement.querySelector('path');\r\n\r\n    // Ensure that the path was found. This may not be the case if the\r\n    // animation function fires too early.\r\n    if (path) {\r\n      path.setAttribute('d', getSvgArc(currentValue, rotation));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates the color of the progress-spinner by adding the new palette class to the element\r\n   * and removing the old one.\r\n   */\r\n  private _updateColor(newColor: string) {\r\n    this._setElementColor(this._color, false);\r\n    this._setElementColor(newColor, true);\r\n    this._color = newColor;\r\n  }\r\n\r\n  /** Sets the given palette class on the component element. */\r\n  private _setElementColor(color: string, isAdd: boolean) {\r\n    if (color != null && color != '') {\r\n      this._renderer.setElementClass(this._elementRef.nativeElement, `md-${color}`, isAdd);\r\n    }\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * <md-spinner> component.\r\n *\r\n * This is a component definition to be used as a convenience reference to create an\r\n * indeterminate <md-progress-spinner> instance.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'md-spinner, mat-spinner',\r\n  host: {\r\n    'role': 'progressbar',\r\n    'mode': 'indeterminate',\r\n  },\r\n  // Due to the class extending we need to explicitly say that the input exists.\r\n  inputs: ['color'],\r\n  templateUrl: 'progress-spinner.html',\r\n  styleUrls: ['progress-spinner.css'],\r\n})\r\nexport class MdSpinner extends MdProgressSpinner implements OnDestroy {\r\n\r\n  constructor(elementRef: ElementRef, ngZone: NgZone, renderer: Renderer) {\r\n    super(ngZone, elementRef, renderer);\r\n    this.mode = 'indeterminate';\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    // The `ngOnDestroy` from `MdProgressSpinner` should be called explicitly, because\r\n    // in certain cases Angular won't call it (e.g. when using AoT and in unit tests).\r\n    super.ngOnDestroy();\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Module functions.\r\n */\r\n\r\n/** Clamps a value to be between 0 and 100. */\r\nfunction clamp(v: number) {\r\n  return Math.max(0, Math.min(100, v));\r\n}\r\n\r\n\r\n/**\r\n * Converts Polar coordinates to Cartesian.\r\n */\r\nfunction polarToCartesian(radius: number, pathRadius: number, angleInDegrees: number) {\r\n  let angleInRadians = (angleInDegrees - 90) * DEGREE_IN_RADIANS;\r\n\r\n  return (radius + (pathRadius * Math.cos(angleInRadians))) +\r\n    ',' + (radius + (pathRadius * Math.sin(angleInRadians)));\r\n}\r\n\r\n\r\n/**\r\n * Easing function for linear animation.\r\n */\r\nfunction linearEase(currentTime: number, startValue: number,\r\n                    changeInValue: number, duration: number) {\r\n  return changeInValue * currentTime / duration + startValue;\r\n}\r\n\r\n\r\n/**\r\n * Easing function to match material design indeterminate animation.\r\n */\r\nfunction materialEase(currentTime: number, startValue: number,\r\n                      changeInValue: number, duration: number) {\r\n  let time = currentTime / duration;\r\n  let timeCubed = Math.pow(time, 3);\r\n  let timeQuad = Math.pow(time, 4);\r\n  let timeQuint = Math.pow(time, 5);\r\n  return startValue + changeInValue * ((6 * timeQuint) + (-15 * timeQuad) + (10 * timeCubed));\r\n}\r\n\r\n\r\n/**\r\n * Determines the path value to define the arc.  Converting percentage values to to polar\r\n * coordinates on the circle, and then to cartesian coordinates in the viewport.\r\n *\r\n * @param currentValue The current percentage value of the progress circle, the percentage of the\r\n *    circle to fill.\r\n * @param rotation The starting point of the circle with 0 being the 0 degree point.\r\n * @return A string for an SVG path representing a circle filled from the starting point to the\r\n *    percentage value provided.\r\n */\r\nfunction getSvgArc(currentValue: number, rotation: number) {\r\n  let startPoint = rotation || 0;\r\n  let radius = 50;\r\n  let pathRadius = 40;\r\n\r\n  let startAngle = startPoint * MAX_ANGLE;\r\n  let endAngle = currentValue * MAX_ANGLE;\r\n  let start = polarToCartesian(radius, pathRadius, startAngle);\r\n  let end = polarToCartesian(radius, pathRadius, endAngle + startAngle);\r\n  let arcSweep = endAngle < 0 ? 0 : 1;\r\n  let largeArcFlag: number;\r\n\r\n  if (endAngle < 0) {\r\n    largeArcFlag = endAngle >= -180 ? 0 : 1;\r\n  } else {\r\n    largeArcFlag = endAngle <= 180 ? 0 : 1;\r\n  }\r\n\r\n  return `M${start}A${pathRadius},${pathRadius} 0 ${largeArcFlag},${arcSweep} ${end}`;\r\n}\r\n\r\n\r\n@NgModule({\r\n  imports: [CompatibilityModule],\r\n  exports: [MdProgressSpinner, MdSpinner, CompatibilityModule],\r\n  declarations: [MdProgressSpinner, MdSpinner],\r\n})\r\nexport class MdProgressSpinnerModule {\r\n  /** @deprecated */\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: MdProgressSpinnerModule,\r\n      providers: []\r\n    };\r\n  }\r\n}\r\n"]}