{"version":3,"sources":["../../../src/lib/chips/chip-list.ts"],"names":[],"mappings":"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","file":"chip-list.js","sourcesContent":["import {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ContentChildren,\r\n  ElementRef,\r\n  Input,\r\n  ModuleWithProviders,\r\n  NgModule,\r\n  QueryList,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\n\r\nimport {MdChip} from './chip';\r\nimport {FocusKeyManager} from '../core/a11y/focus-key-manager';\r\nimport {coerceBooleanProperty} from '../core/coercion/boolean-property';\r\nimport {SPACE, LEFT_ARROW, RIGHT_ARROW} from '../core/keyboard/keycodes';\r\n\r\n/**\r\n * A material design chips component (named ChipList for it's similarity to the List component).\r\n *\r\n * Example:\r\n *\r\n *     <md-chip-list>\r\n *       <md-chip>Chip 1<md-chip>\r\n *       <md-chip>Chip 2<md-chip>\r\n *     </md-chip-list>\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'md-chip-list, mat-chip-list',\r\n  template: `<div class=\"md-chip-list-wrapper\"><ng-content></ng-content></div>`,\r\n  host: {\r\n    // Properties\r\n    'tabindex': '0',\r\n    'role': 'listbox',\r\n    'class': 'md-chip-list',\r\n\r\n    // Events\r\n    '(focus)': 'focus()',\r\n    '(keydown)': '_keydown($event)'\r\n  },\r\n  queries: {\r\n    chips: new ContentChildren(MdChip)\r\n  },\r\n  styleUrls: ['chips.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class MdChipList implements AfterContentInit {\r\n\r\n  /** Track which chips we're listening to for focus/destruction. */\r\n  private _subscribed: WeakMap<MdChip, boolean> = new WeakMap();\r\n\r\n  /** Whether or not the chip is selectable. */\r\n  protected _selectable: boolean = true;\r\n\r\n  /** The FocusKeyManager which handles focus. */\r\n  _keyManager: FocusKeyManager;\r\n\r\n  /** The chip components contained within this chip list. */\r\n  chips: QueryList<MdChip>;\r\n\r\n  constructor(private _elementRef: ElementRef) { }\r\n\r\n  ngAfterContentInit(): void {\r\n    this._keyManager = new FocusKeyManager(this.chips).withWrap();\r\n\r\n    // Go ahead and subscribe all of the initial chips\r\n    this._subscribeChips(this.chips);\r\n\r\n    // When the list changes, re-subscribe\r\n    this.chips.changes.subscribe((chips: QueryList<MdChip>) => {\r\n      this._subscribeChips(chips);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Whether or not this chip is selectable. When a chip is not selectable,\r\n   * it's selected state is always ignored.\r\n   */\r\n  @Input() get selectable(): boolean {\r\n    return this._selectable;\r\n  }\r\n\r\n  set selectable(value: boolean) {\r\n    this._selectable = coerceBooleanProperty(value);\r\n  }\r\n\r\n  /**\r\n   * Programmatically focus the chip list. This in turn focuses the first\r\n   * non-disabled chip in this chip list.\r\n   */\r\n  focus() {\r\n    // TODO: ARIA says this should focus the first `selected` chip.\r\n    this._keyManager.setFirstItemActive();\r\n  }\r\n\r\n  /** Passes relevant key presses to our key manager. */\r\n  _keydown(event: KeyboardEvent) {\r\n    let target = event.target as HTMLElement;\r\n\r\n    // If they are on a chip, check for space/left/right, otherwise pass to our key manager\r\n    if (target && target.classList.contains('md-chip')) {\r\n      switch (event.keyCode) {\r\n        case SPACE:\r\n          // If we are selectable, toggle the focused chip\r\n          if (this.selectable) {\r\n            this._toggleSelectOnFocusedChip();\r\n          }\r\n\r\n          // Always prevent space from scrolling the page since the list has focus\r\n          event.preventDefault();\r\n          break;\r\n        case LEFT_ARROW:\r\n          this._keyManager.setPreviousItemActive();\r\n          event.preventDefault();\r\n          break;\r\n        case RIGHT_ARROW:\r\n          this._keyManager.setNextItemActive();\r\n          event.preventDefault();\r\n          break;\r\n        default:\r\n          this._keyManager.onKeydown(event);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Toggles the selected state of the currently focused chip. */\r\n  protected _toggleSelectOnFocusedChip(): void {\r\n    // Allow disabling of chip selection\r\n    if (!this.selectable) {\r\n      return;\r\n    }\r\n\r\n    let focusedIndex = this._keyManager.activeItemIndex;\r\n\r\n    if (this._isValidIndex(focusedIndex)) {\r\n      let focusedChip: MdChip = this.chips.toArray()[focusedIndex];\r\n\r\n      if (focusedChip) {\r\n        focusedChip.toggleSelected();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Iterate through the list of chips and add them to our list of\r\n   * subscribed chips.\r\n   *\r\n   * @param chips The list of chips to be subscribed.\r\n   */\r\n  protected _subscribeChips(chips: QueryList<MdChip>): void {\r\n    chips.forEach(chip => this._addChip(chip));\r\n  }\r\n\r\n  /**\r\n   * Add a specific chip to our subscribed list. If the chip has\r\n   * already been subscribed, this ensures it is only subscribed\r\n   * once.\r\n   *\r\n   * @param chip The chip to be subscribed (or checked for existing\r\n   * subscription).\r\n   */\r\n  protected _addChip(chip: MdChip) {\r\n    // If we've already been subscribed to a parent, do nothing\r\n    if (this._subscribed.has(chip)) {\r\n      return;\r\n    }\r\n\r\n    // Watch for focus events outside of the keyboard navigation\r\n    chip.onFocus.subscribe(() => {\r\n      let chipIndex: number = this.chips.toArray().indexOf(chip);\r\n\r\n      if (this._isValidIndex(chipIndex)) {\r\n        this._keyManager.updateActiveItemIndex(chipIndex);\r\n      }\r\n    });\r\n\r\n    // On destroy, remove the item from our list, and check focus\r\n    chip.destroy.subscribe(() => {\r\n      let chipIndex: number = this.chips.toArray().indexOf(chip);\r\n\r\n      if (this._isValidIndex(chipIndex)) {\r\n        // Check whether the chip is the last item\r\n        if (chipIndex < this.chips.length - 1) {\r\n          this._keyManager.setActiveItem(chipIndex);\r\n        } else if (chipIndex - 1 >= 0) {\r\n          this._keyManager.setActiveItem(chipIndex - 1);\r\n        }\r\n      }\r\n\r\n      this._subscribed.delete(chip);\r\n      chip.destroy.unsubscribe();\r\n    });\r\n\r\n    this._subscribed.set(chip, true);\r\n  }\r\n\r\n  /**\r\n   * Utility to ensure all indexes are valid.\r\n   *\r\n   * @param index The index to be checked.\r\n   * @returns True if the index is valid for our list of chips.\r\n   */\r\n  private _isValidIndex(index: number): boolean {\r\n    return index >= 0 && index < this.chips.length;\r\n  }\r\n\r\n}\r\n\r\n@NgModule({\r\n  imports: [],\r\n  exports: [MdChipList, MdChip],\r\n  declarations: [MdChipList, MdChip]\r\n})\r\nexport class MdChipsModule {\r\n  /** @deprecated */\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: MdChipsModule,\r\n      providers: []\r\n    };\r\n  }\r\n}\r\n"]}