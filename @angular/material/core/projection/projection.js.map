{"version":3,"sources":["../../../src/lib/core/projection/projection.ts"],"names":[],"mappings":";;;;;;;;;OAAO,EAAC,UAAU,EAAE,SAAS,EAAuB,QAAQ,EAAE,UAAU,EAAC,MAAM,eAAe;AAG9F,uCAAuC;AACvC,6EAA6E;AAC7E,sBAAsB,WAAwB,EAAE,OAAoB;IAClE,WAAW,CAAC,aAAa,CAAC,YAAY,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC;AAC/D,CAAC;AAED,oBAAoB;AAIpB;IACE,2BAAmB,GAAe;QAAf,QAAG,GAAH,GAAG,CAAY;IAAG,CAAC;IAJxC;QAAC,SAAS,CAAC;YACT,QAAQ,EAAE,yBAAyB;SACpC,CAAC;;yBAAA;IAGF,wBAAC;AAAD,CAFA,AAEC,IAAA;AAGD,oBAAoB;AAEpB;IAAA;IAwDA,CAAC;IAvDC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OA8BG;IACH,+BAAO,GAAP,UAAQ,GAAe,EAAE,IAAuB;QAC9C,IAAM,WAAW,GAAG,GAAG,CAAC,aAAa,CAAC;QACtC,IAAM,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC;QACtC,IAAM,UAAU,GAAG,WAAW,CAAC,UAAU,CAAC;QAC1C,IAAI,KAAK,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC;QAE1B,4FAA4F;QAC5F,6EAA6E;QAC7E,YAAY,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;QACjC,IAAI,CAAC,GAAG,UAAU,CAAC,MAAM,CAAC;QAC1B,OAAO,CAAC,EAAE,EAAE,CAAC;YACX,KAAK,CAAC,UAAU,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,WAAW,CAAC,CAAC;YAChE,KAAK,GAAG,KAAK,CAAC,WAAW,CAAC,CAAE,wCAAwC;QACtE,CAAC;QAED,kFAAkF;QAClF,CAAC,GAAG,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC;QAC7B,OAAO,CAAC,EAAE,EAAE,CAAC;YACX,WAAW,CAAC,WAAW,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;QAChD,CAAC;QACD,YAAY,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;QAElC,gFAAgF;IAClF,CAAC;IAxDH;QAAC,UAAU,EAAE;;qBAAA;IAyDb,oBAAC;AAAD,CAxDA,AAwDC,IAAA;AAGD,oBAAoB;AAMpB;IAAA;IAOA,CAAC;IANC,kBAAkB;IACX,wBAAO,GAAd;QACE,MAAM,CAAC;YACL,QAAQ,EAAE,gBAAgB;SAC3B,CAAC;IACJ,CAAC;IAXH;QAAC,QAAQ,CAAC;YACR,OAAO,EAAE,CAAC,iBAAiB,CAAC;YAC5B,YAAY,EAAE,CAAC,iBAAiB,CAAC;YACjC,SAAS,EAAE,CAAC,aAAa,CAAC;SAC3B,CAAC;;wBAAA;IAQF,uBAAC;AAAD,CAPA,AAOC,IAAA","file":"projection.js","sourcesContent":["import {Injectable, Directive, ModuleWithProviders, NgModule, ElementRef} from '@angular/core';\r\n\r\n\r\n// \"Polyfill\" for `Node.replaceWith()`.\r\n// cf. https://developer.mozilla.org/en-US/docs/Web/API/ChildNode/replaceWith\r\nfunction _replaceWith(toReplaceEl: HTMLElement, otherEl: HTMLElement) {\r\n  toReplaceEl.parentElement.replaceChild(otherEl, toReplaceEl);\r\n}\r\n\r\n/** @docs-private */\r\n@Directive({\r\n  selector: 'cdk-dom-projection-host'\r\n})\r\nexport class DomProjectionHost {\r\n  constructor(public ref: ElementRef) {}\r\n}\r\n\r\n\r\n/** @docs-private */\r\n@Injectable()\r\nexport class DomProjection {\r\n  /**\r\n   * Project an element into a host element.\r\n   * Replace a host element by another element. This also replaces the children of the element\r\n   * by the children of the host.\r\n   *\r\n   * It should be used like this:\r\n   *\r\n   * ```\r\n   *   @Component({\r\n   *     template: `<div>\r\n   *       <cdk-dom-projection-host>\r\n   *         <div>other</div>\r\n   *         <ng-content></ng-content>\r\n   *       </cdk-dom-projection-host>\r\n   *     </div>`\r\n   *   })\r\n   *   class Cmpt {\r\n   *     constructor(private _projector: DomProjection, private _el: ElementRef) {}\r\n   *     ngOnInit() { this._projector.project(this._el, this._projector); }\r\n   *   }\r\n   * ```\r\n   *\r\n   * This component will move the content of the element it's applied to in the outer div. Because\r\n   * `project()` also move the children of the host inside the projected element, the element will\r\n   * contain the `<div>other</div>` HTML as well as its own children.\r\n   *\r\n   * Note: without `<ng-content></ng-content>` the projection will project an empty element.\r\n   *\r\n   * @param ref ElementRef to be projected.\r\n   * @param host Projection host into which to project the `ElementRef`.\r\n   */\r\n  project(ref: ElementRef, host: DomProjectionHost): void {\r\n    const projectedEl = ref.nativeElement;\r\n    const hostEl = host.ref.nativeElement;\r\n    const childNodes = projectedEl.childNodes;\r\n    let child = childNodes[0];\r\n\r\n    // We hoist all of the projected element's children out into the projected elements position\r\n    // because we *only* want to move the projected element and not its children.\r\n    _replaceWith(projectedEl, child);\r\n    let l = childNodes.length;\r\n    while (l--) {\r\n      child.parentNode.insertBefore(childNodes[0], child.nextSibling);\r\n      child = child.nextSibling;  // nextSibling is now the childNodes[0].\r\n    }\r\n\r\n    // Insert all host children under the projectedEl, then replace host by component.\r\n    l = hostEl.childNodes.length;\r\n    while (l--) {\r\n      projectedEl.appendChild(hostEl.childNodes[0]);\r\n    }\r\n    _replaceWith(hostEl, projectedEl);\r\n\r\n    // At this point the host is replaced by the component. Nothing else to be done.\r\n  }\r\n}\r\n\r\n\r\n/** @docs-private */\r\n@NgModule({\r\n  exports: [DomProjectionHost],\r\n  declarations: [DomProjectionHost],\r\n  providers: [DomProjection],\r\n})\r\nexport class ProjectionModule {\r\n  /** @deprecated */\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: ProjectionModule,\r\n    };\r\n  }\r\n}\r\n"]}