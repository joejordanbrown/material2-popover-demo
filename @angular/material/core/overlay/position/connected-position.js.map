{"version":3,"sources":["../../../src/lib/core/overlay/position/connected-position.ts"],"names":[],"mappings":";;;;;;;;;;;;OACO,EAAC,QAAQ,EAAC,MAAM,eAAe;AAmBtC,2EAA2E;AAC3E;IAME,gCAAY,MAAgC,EAAE,OAAkC;QAC9E,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;QAC9B,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;QAC9B,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;QACjC,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;IACnC,CAAC;IACH,6BAAC;AAAD,CAZA,AAYC,IAAA;AAED;;;;;;;;;;;;;;;;;;;;;;GAsBG;AACH;IAAA;IAKA,CAAC;IAAD,+BAAC;AAAD,CALA,AAKC,IAAA;AAED,iFAAiF;AACjF;IACE,wCAAmB,cAAsC,EAC1B,wBAAkD;QAD9D,mBAAc,GAAd,cAAc,CAAwB;QAC1B,6BAAwB,GAAxB,wBAAwB,CAA0B;IAAG,CAAC;IAAzE;mBAAC,QAAQ,EAAE;;sCAAA;IACzB,qCAAC;AAAD,CAHA,AAGC,IAAA","file":"connected-position.js","sourcesContent":["/** Horizontal dimension of a connection point on the perimeter of the origin or overlay element. */\r\nimport {Optional} from '@angular/core';\r\nexport type HorizontalConnectionPos = 'start' | 'center' | 'end';\r\n\r\n/** Vertical dimension of a connection point on the perimeter of the origin or overlay element. */\r\nexport type VerticalConnectionPos = 'top' | 'center' | 'bottom';\r\n\r\n\r\n/** A connection point on the origin element. */\r\nexport interface OriginConnectionPosition {\r\n  originX: HorizontalConnectionPos;\r\n  originY: VerticalConnectionPos;\r\n}\r\n\r\n/** A connection point on the overlay element. */\r\nexport interface OverlayConnectionPosition {\r\n  overlayX: HorizontalConnectionPos;\r\n  overlayY: VerticalConnectionPos;\r\n}\r\n\r\n/** The points of the origin element and the overlay element to connect. */\r\nexport class ConnectionPositionPair {\r\n  originX: HorizontalConnectionPos;\r\n  originY: VerticalConnectionPos;\r\n  overlayX: HorizontalConnectionPos;\r\n  overlayY: VerticalConnectionPos;\r\n\r\n  constructor(origin: OriginConnectionPosition, overlay: OverlayConnectionPosition) {\r\n    this.originX = origin.originX;\r\n    this.originY = origin.originY;\r\n    this.overlayX = overlay.overlayX;\r\n    this.overlayY = overlay.overlayY;\r\n  }\r\n}\r\n\r\n/**\r\n * Set of properties regarding the position of the origin and overlay relative to the viewport\r\n * with respect to the containing Scrollable elements.\r\n *\r\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\r\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\r\n *\r\n * The overlay and origin are outside view if there is no overlap between their bounding client\r\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\r\n *\r\n *       -----------                    -----------\r\n *       | outside |                    | clipped |\r\n *       |  view   |              --------------------------\r\n *       |         |              |     |         |        |\r\n *       ----------               |     -----------        |\r\n *  --------------------------    |                        |\r\n *  |                        |    |      Scrollable        |\r\n *  |                        |    |                        |\r\n *  |                        |     --------------------------\r\n *  |      Scrollable        |\r\n *  |                        |\r\n *  --------------------------\r\n */\r\nexport class ScrollableViewProperties {\r\n  isOriginClipped: boolean;\r\n  isOriginOutsideView: boolean;\r\n  isOverlayClipped: boolean;\r\n  isOverlayOutsideView: boolean;\r\n}\r\n\r\n/** The change event emitted by the strategy when a fallback position is used. */\r\nexport class ConnectedOverlayPositionChange {\r\n  constructor(public connectionPair: ConnectionPositionPair,\r\n              @Optional() public scrollableViewProperties: ScrollableViewProperties) {}\r\n}\r\n"]}