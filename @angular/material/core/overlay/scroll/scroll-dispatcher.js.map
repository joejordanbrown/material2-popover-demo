{"version":3,"sources":["../../../src/lib/core/overlay/scroll/scroll-dispatcher.ts"],"names":[],"mappings":"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","file":"scroll-dispatcher.js","sourcesContent":["import {Injectable, ElementRef, Optional, SkipSelf} from '@angular/core';\r\nimport {Scrollable} from './scrollable';\r\nimport {Subject} from 'rxjs/Subject';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {Subscription} from 'rxjs/Subscription';\r\nimport 'rxjs/add/observable/fromEvent';\r\n\r\n\r\n/**\r\n * Service contained all registered Scrollable references and emits an event when any one of the\r\n * Scrollable references emit a scrolled event.\r\n */\r\n@Injectable()\r\nexport class ScrollDispatcher {\r\n  /** Subject for notifying that a registered scrollable reference element has been scrolled. */\r\n  _scrolled: Subject<void> = new Subject<void>();\r\n\r\n  /**\r\n   * Map of all the scrollable references that are registered with the service and their\r\n   * scroll event subscriptions.\r\n   */\r\n  scrollableReferences: Map<Scrollable, Subscription> = new Map();\r\n\r\n  constructor() {\r\n    // By default, notify a scroll event when the document is scrolled or the window is resized.\r\n    Observable.fromEvent(window.document, 'scroll').subscribe(() => this._notify());\r\n    Observable.fromEvent(window, 'resize').subscribe(() => this._notify());\r\n  }\r\n\r\n  /**\r\n   * Registers a Scrollable with the service and listens for its scrolled events. When the\r\n   * scrollable is scrolled, the service emits the event in its scrolled observable.\r\n   *\r\n   * @param scrollable Scrollable instance to be registered.\r\n   */\r\n  register(scrollable: Scrollable): void {\r\n    const scrollSubscription = scrollable.elementScrolled().subscribe(() => this._notify());\r\n    this.scrollableReferences.set(scrollable, scrollSubscription);\r\n  }\r\n\r\n  /**\r\n   * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.\r\n   *\r\n   * @param scrollable Scrollable instance to be deregistered.\r\n   */\r\n  deregister(scrollable: Scrollable): void {\r\n    this.scrollableReferences.get(scrollable).unsubscribe();\r\n    this.scrollableReferences.delete(scrollable);\r\n  }\r\n\r\n  /**\r\n   * Returns an observable that emits an event whenever any of the registered Scrollable\r\n   * references (or window, document, or body) fire a scrolled event.\r\n   */\r\n  scrolled(): Observable<void> {\r\n    // TODO: Add an event limiter that includes throttle with the leading and trailing events.\r\n    return this._scrolled.asObservable();\r\n  }\r\n\r\n  /** Returns all registered Scrollables that contain the provided element. */\r\n  getScrollContainers(elementRef: ElementRef): Scrollable[] {\r\n    const scrollingContainers: Scrollable[] = [];\r\n\r\n    this.scrollableReferences.forEach((subscription: Subscription, scrollable: Scrollable) => {\r\n      if (this.scrollableContainsElement(scrollable, elementRef)) {\r\n        scrollingContainers.push(scrollable);\r\n      }\r\n    });\r\n\r\n    return scrollingContainers;\r\n  }\r\n\r\n  /** Returns true if the element is contained within the provided Scrollable. */\r\n  scrollableContainsElement(scrollable: Scrollable, elementRef: ElementRef): boolean {\r\n    let element = elementRef.nativeElement;\r\n    let scrollableElement = scrollable.getElementRef().nativeElement;\r\n\r\n    // Traverse through the element parents until we reach null, checking if any of the elements\r\n    // are the scrollable's element.\r\n    do {\r\n      if (element == scrollableElement) { return true; }\r\n    } while (element = element.parentElement);\r\n  }\r\n\r\n  /** Sends a notification that a scroll event has been fired. */\r\n  _notify() {\r\n    this._scrolled.next();\r\n  }\r\n}\r\n\r\nexport function SCROLL_DISPATCHER_PROVIDER_FACTORY(parentDispatcher: ScrollDispatcher) {\r\n  return parentDispatcher || new ScrollDispatcher();\r\n};\r\n\r\nexport const SCROLL_DISPATCHER_PROVIDER = {\r\n  // If there is already a ScrollDispatcher available, use that. Otherwise, provide a new one.\r\n  provide: ScrollDispatcher,\r\n  deps: [[new Optional(), new SkipSelf(), ScrollDispatcher]],\r\n  useFactory: SCROLL_DISPATCHER_PROVIDER_FACTORY\r\n};\r\n"]}