{"version":3,"sources":["../../../src/lib/core/overlay/overlay-ref.ts"],"names":[],"mappings":"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","file":"overlay-ref.js","sourcesContent":["import {NgZone} from '@angular/core';\r\nimport {PortalHost, Portal} from '../portal/portal';\r\nimport {OverlayState} from './overlay-state';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {Subject} from 'rxjs/Subject';\r\n\r\n\r\n/**\r\n * Reference to an overlay that has been created with the Overlay service.\r\n * Used to manipulate or dispose of said overlay.\r\n */\r\nexport class OverlayRef implements PortalHost {\r\n  private _backdropElement: HTMLElement = null;\r\n  private _backdropClick: Subject<any> = new Subject();\r\n\r\n  constructor(\r\n      private _portalHost: PortalHost,\r\n      private _pane: HTMLElement,\r\n      private _state: OverlayState,\r\n      private _ngZone: NgZone) { }\r\n\r\n  /** The overlay's HTML element */\r\n  get overlayElement(): HTMLElement {\r\n    return this._pane;\r\n  }\r\n\r\n  /**\r\n   * Attaches the overlay to a portal instance and adds the backdrop.\r\n   * @param portal Portal instance to which to attach the overlay.\r\n   * @returns The portal attachment result.\r\n   */\r\n  attach(portal: Portal<any>): any {\r\n    if (this._state.hasBackdrop) {\r\n      this._attachBackdrop();\r\n    }\r\n\r\n    let attachResult = this._portalHost.attach(portal);\r\n    this.updateSize();\r\n    this.updateDirection();\r\n    this.updatePosition();\r\n\r\n    return attachResult;\r\n  }\r\n\r\n  /**\r\n   * Detaches an overlay from a portal.\r\n   * @returns Resolves when the overlay has been detached.\r\n   */\r\n  detach(): Promise<any> {\r\n    this._detachBackdrop();\r\n    return this._portalHost.detach();\r\n  }\r\n\r\n  /**\r\n   * Cleans up the overlay from the DOM.\r\n   */\r\n  dispose(): void {\r\n    if (this._state.positionStrategy) {\r\n      this._state.positionStrategy.dispose();\r\n    }\r\n\r\n    this._detachBackdrop();\r\n    this._portalHost.dispose();\r\n  }\r\n\r\n  /**\r\n   * Checks whether the overlay has been attached.\r\n   */\r\n  hasAttached(): boolean {\r\n    return this._portalHost.hasAttached();\r\n  }\r\n\r\n  /**\r\n   * Returns an observable that emits when the backdrop has been clicked.\r\n   */\r\n  backdropClick(): Observable<void> {\r\n    return this._backdropClick.asObservable();\r\n  }\r\n\r\n  /**\r\n   * Gets the current state config of the overlay.\r\n   */\r\n  getState(): OverlayState {\r\n    return this._state;\r\n  }\r\n\r\n  /** Updates the position of the overlay based on the position strategy. */\r\n  updatePosition() {\r\n    if (this._state.positionStrategy) {\r\n      this._state.positionStrategy.apply(this._pane);\r\n    }\r\n  }\r\n\r\n  /** Updates the text direction of the overlay panel. **/\r\n  private updateDirection() {\r\n    this._pane.setAttribute('dir', this._state.direction);\r\n  }\r\n\r\n  /** Updates the size of the overlay based on the overlay config. */\r\n  updateSize() {\r\n    if (this._state.width || this._state.width === 0) {\r\n      this._pane.style.width = formatCssUnit(this._state.width);\r\n    }\r\n\r\n    if (this._state.height || this._state.height === 0) {\r\n      this._pane.style.height = formatCssUnit(this._state.height);\r\n    }\r\n\r\n    if (this._state.minWidth || this._state.minWidth === 0) {\r\n      this._pane.style.minWidth = formatCssUnit(this._state.minWidth);\r\n    }\r\n\r\n    if (this._state.minHeight || this._state.minHeight === 0) {\r\n      this._pane.style.minHeight = formatCssUnit(this._state.minHeight);\r\n    }\r\n  }\r\n\r\n  /** Attaches a backdrop for this overlay. */\r\n  private _attachBackdrop() {\r\n    this._backdropElement = document.createElement('div');\r\n    this._backdropElement.classList.add('cdk-overlay-backdrop');\r\n    this._backdropElement.classList.add(this._state.backdropClass);\r\n\r\n    // Insert the backdrop before the pane in the DOM order,\r\n    // in order to handle stacked overlays properly.\r\n    this._pane.parentElement.insertBefore(this._backdropElement, this._pane);\r\n\r\n    // Forward backdrop clicks such that the consumer of the overlay can perform whatever\r\n    // action desired when such a click occurs (usually closing the overlay).\r\n    this._backdropElement.addEventListener('click', () => this._backdropClick.next(null));\r\n\r\n    // Add class to fade-in the backdrop after one frame.\r\n    requestAnimationFrame(() => {\r\n      if (this._backdropElement) {\r\n        this._backdropElement.classList.add('cdk-overlay-backdrop-showing');\r\n      }\r\n    });\r\n  }\r\n\r\n  /** Detaches the backdrop (if any) associated with the overlay. */\r\n  private _detachBackdrop(): void {\r\n    let backdropToDetach = this._backdropElement;\r\n\r\n    if (backdropToDetach) {\r\n      let finishDetach = () => {\r\n        // It may not be attached to anything in certain cases (e.g. unit tests).\r\n        if (backdropToDetach && backdropToDetach.parentNode) {\r\n          backdropToDetach.parentNode.removeChild(backdropToDetach);\r\n        }\r\n\r\n        // It is possible that a new portal has been attached to this overlay since we started\r\n        // removing the backdrop. If that is the case, only clear the backdrop reference if it\r\n        // is still the same instance that we started to remove.\r\n        if (this._backdropElement == backdropToDetach) {\r\n          this._backdropElement = null;\r\n        }\r\n      };\r\n\r\n      backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\r\n      backdropToDetach.classList.remove(this._state.backdropClass);\r\n      backdropToDetach.addEventListener('transitionend', finishDetach);\r\n\r\n      // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\r\n      // In this case we make it unclickable and we try to remove it after a delay.\r\n      backdropToDetach.style.pointerEvents = 'none';\r\n\r\n      // Run this outside the Angular zone because there's nothing that Angular cares about.\r\n      // If it were to run inside the Angular zone, every test that used Overlay would have to be\r\n      // either async or fakeAsync.\r\n      this._ngZone.runOutsideAngular(() => {\r\n        setTimeout(finishDetach, 500);\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nfunction formatCssUnit(value: number | string) {\r\n  return typeof value === 'string' ? value as string : `${value}px`;\r\n}\r\n"]}