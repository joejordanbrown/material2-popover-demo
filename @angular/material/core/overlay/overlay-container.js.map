{"version":3,"sources":["../../../src/lib/core/overlay/overlay-container.ts"],"names":[],"mappings":";;;;;;;;;OAAO,EAAC,UAAU,EAAE,QAAQ,EAAE,QAAQ,EAAC,MAAM,eAAe;AAG5D;;;GAGG;AAEH;IAAA;IAwBA,CAAC;IArBC;;;;;OAKG;IACH,8CAAmB,GAAnB;QACE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC;YAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC;QAAC,CAAC;QACzD,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC;IAChC,CAAC;IAED;;;OAGG;IACO,2CAAgB,GAA1B;QACE,IAAI,SAAS,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAC9C,SAAS,CAAC,SAAS,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC;QACjD,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;QACrC,IAAI,CAAC,iBAAiB,GAAG,SAAS,CAAC;IACrC,CAAC;IAxBH;QAAC,UAAU,EAAE;;wBAAA;IAyBb,uBAAC;AAAD,CAxBA,AAwBC,IAAA;AAED,mDAAmD,eAAiC;IAClF,MAAM,CAAC,eAAe,IAAI,IAAI,gBAAgB,EAAE,CAAC;AACnD,CAAC;AAAA,CAAC;AAEF,OAAO,IAAM,0BAA0B,GAAG;IACxC,6FAA6F;IAC7F,OAAO,EAAE,gBAAgB;IACzB,IAAI,EAAE,CAAC,CAAC,IAAI,QAAQ,EAAE,EAAE,IAAI,QAAQ,EAAE,EAAE,gBAAgB,CAAC,CAAC;IAC1D,UAAU,EAAE,kCAAkC;CAC/C,CAAC","file":"overlay-container.js","sourcesContent":["import {Injectable, Optional, SkipSelf} from '@angular/core';\r\n\r\n\r\n/**\r\n * The OverlayContainer is the container in which all overlays will load.\r\n * It should be provided in the root component to ensure it is properly shared.\r\n */\r\n@Injectable()\r\nexport class OverlayContainer {\r\n  protected _containerElement: HTMLElement;\r\n\r\n  /**\r\n   * This method returns the overlay container element.  It will lazily\r\n   * create the element the first time  it is called to facilitate using\r\n   * the container in non-browser environments.\r\n   * @returns the container element\r\n   */\r\n  getContainerElement(): HTMLElement {\r\n    if (!this._containerElement) { this._createContainer(); }\r\n    return this._containerElement;\r\n  }\r\n\r\n  /**\r\n   * Create the overlay container element, which is simply a div\r\n   * with the 'cdk-overlay-container' class on the document body.\r\n   */\r\n  protected _createContainer(): void {\r\n    let container = document.createElement('div');\r\n    container.classList.add('cdk-overlay-container');\r\n    document.body.appendChild(container);\r\n    this._containerElement = container;\r\n  }\r\n}\r\n\r\nexport function OVERLAY_CONTAINER_PROVIDER_FACTORY(parentContainer: OverlayContainer) {\r\n  return parentContainer || new OverlayContainer();\r\n};\r\n\r\nexport const OVERLAY_CONTAINER_PROVIDER = {\r\n  // If there is already an OverlayContainer available, use that. Otherwise, provide a new one.\r\n  provide: OverlayContainer,\r\n  deps: [[new Optional(), new SkipSelf(), OverlayContainer]],\r\n  useFactory: OVERLAY_CONTAINER_PROVIDER_FACTORY\r\n};\r\n"]}