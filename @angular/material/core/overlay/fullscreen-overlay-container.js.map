{"version":3,"sources":["../../../src/lib/core/overlay/fullscreen-overlay-container.ts"],"names":[],"mappings":";;;;;;;;;;;;;;OAAO,EAAC,UAAU,EAAC,MAAM,eAAe;OACjC,EAAC,gBAAgB,EAAC,MAAM,qBAAqB;AAEpD;;;;;;;;GAQG;AAEH;IAAgD,8CAAgB;IAAhE;QAAgD,8BAAgB;IAuChE,CAAC;IAtCW,qDAAgB,GAA1B;QAAA,iBAIC;QAHC,gBAAK,CAAC,gBAAgB,WAAE,CAAC;QACzB,IAAI,CAAC,gCAAgC,EAAE,CAAC;QACxC,IAAI,CAAC,4BAA4B,CAAC,cAAM,OAAA,KAAI,CAAC,gCAAgC,EAAE,EAAvC,CAAuC,CAAC,CAAC;IACnF,CAAC;IAEO,qEAAgC,GAAxC;QACE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC;YAC5B,MAAM,CAAC;QACT,CAAC;QACD,IAAI,iBAAiB,GAAG,IAAI,CAAC,oBAAoB,EAAE,CAAC;QACpD,IAAI,MAAM,GAAG,iBAAiB,IAAI,QAAQ,CAAC,IAAI,CAAC;QAChD,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;IAC7C,CAAC;IAEO,iEAA4B,GAApC,UAAqC,EAAc;QACjD,EAAE,CAAC,CAAC,QAAQ,CAAC,iBAAiB,CAAC,CAAC,CAAC;YAC/B,QAAQ,CAAC,gBAAgB,CAAC,kBAAkB,EAAE,EAAE,CAAC,CAAC;QACpD,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,uBAAuB,CAAC,CAAC,CAAC;YAC5C,QAAQ,CAAC,gBAAgB,CAAC,wBAAwB,EAAE,EAAE,CAAC,CAAC;QAC1D,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAE,QAAgB,CAAC,oBAAoB,CAAC,CAAC,CAAC;YAClD,QAAQ,CAAC,gBAAgB,CAAC,qBAAqB,EAAE,EAAE,CAAC,CAAC;QACvD,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAE,QAAgB,CAAC,mBAAmB,CAAC,CAAC,CAAC;YACjD,QAAQ,CAAC,gBAAgB,CAAC,oBAAoB,EAAE,EAAE,CAAC,CAAC;QACtD,CAAC;IACH,CAAC;IAED;;;MAGE;IACF,yDAAoB,GAApB;QACE,MAAM,CAAC,QAAQ,CAAC,iBAAiB;YAC7B,QAAQ,CAAC,uBAAuB;YAC/B,QAAgB,CAAC,oBAAoB;YACrC,QAAgB,CAAC,mBAAmB;YACrC,IAAI,CAAC;IACX,CAAC;IAvCH;QAAC,UAAU,EAAE;;kCAAA;IAwCb,iCAAC;AAAD,CAvCA,AAuCC,CAvC+C,gBAAgB,GAuC/D","file":"fullscreen-overlay-container.js","sourcesContent":["import {Injectable} from '@angular/core';\r\nimport {OverlayContainer} from './overlay-container';\r\n\r\n/**\r\n * The FullscreenOverlayContainer is the alternative to OverlayContainer\r\n * that supports correct displaying of overlay elements in Fullscreen mode\r\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\r\n * It should be provided in the root component that way:\r\n * providers: [\r\n *   {provide: OverlayContainer, useClass: FullscreenOverlayContainer}\r\n * ],\r\n */\r\n@Injectable()\r\nexport class FullscreenOverlayContainer extends OverlayContainer {\r\n  protected _createContainer(): void {\r\n    super._createContainer();\r\n    this._adjustParentForFullscreenChange();\r\n    this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());\r\n  }\r\n\r\n  private _adjustParentForFullscreenChange(): void {\r\n    if (!this._containerElement) {\r\n      return;\r\n    }\r\n    let fullscreenElement = this.getFullscreenElement();\r\n    let parent = fullscreenElement || document.body;\r\n    parent.appendChild(this._containerElement);\r\n  }\r\n\r\n  private _addFullscreenChangeListener(fn: () => void) {\r\n    if (document.fullscreenEnabled) {\r\n      document.addEventListener('fullscreenchange', fn);\r\n    } else if (document.webkitFullscreenEnabled) {\r\n      document.addEventListener('webkitfullscreenchange', fn);\r\n    } else if ((document as any).mozFullScreenEnabled) {\r\n      document.addEventListener('mozfullscreenchange', fn);\r\n    } else if ((document as any).msFullscreenEnabled) {\r\n      document.addEventListener('MSFullscreenChange', fn);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * When the page is put into fullscreen mode, a specific element is specified.\r\n   * Only that element and its children are visible when in fullscreen mode.\r\n  */\r\n  getFullscreenElement(): Element {\r\n    return document.fullscreenElement ||\r\n        document.webkitFullscreenElement ||\r\n        (document as any).mozFullScreenElement ||\r\n        (document as any).msFullscreenElement ||\r\n        null;\r\n  }\r\n}\r\n"]}