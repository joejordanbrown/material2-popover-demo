{"version":3,"sources":["../../../src/lib/core/a11y/focus-trap.ts"],"names":[],"mappings":"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","file":"focus-trap.js","sourcesContent":["import {Component, ViewEncapsulation, ViewChild, ElementRef, Input, NgZone} from '@angular/core';\r\nimport {InteractivityChecker} from './interactivity-checker';\r\nimport {coerceBooleanProperty} from '../coercion/boolean-property';\r\n\r\n\r\n/**\r\n * Directive for trapping focus within a region.\r\n *\r\n * NOTE: This directive currently uses a very simple (naive) approach to focus trapping.\r\n * It assumes that the tab order is the same as DOM order, which is not necessarily true.\r\n * Things like tabIndex > 0, flex `order`, and shadow roots can cause to two to misalign.\r\n * This will be replaced with a more intelligent solution before the library is considered stable.\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'cdk-focus-trap, focus-trap',\r\n  templateUrl: 'focus-trap.html',\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class FocusTrap {\r\n  @ViewChild('trappedContent') trappedContent: ElementRef;\r\n\r\n  /** Whether the focus trap is active. */\r\n  @Input()\r\n  get disabled(): boolean { return this._disabled; }\r\n  set disabled(val: boolean) { this._disabled = coerceBooleanProperty(val); }\r\n  private _disabled: boolean = false;\r\n\r\n  constructor(private _checker: InteractivityChecker, private _ngZone: NgZone) { }\r\n\r\n  /**\r\n   * Waits for microtask queue to empty, then focuses the first tabbable element within the focus\r\n   * trap region.\r\n   */\r\n  focusFirstTabbableElementWhenReady() {\r\n    this._ngZone.onMicrotaskEmpty.first().subscribe(() => {\r\n      this.focusFirstTabbableElement();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Waits for microtask queue to empty, then focuses the last tabbable element within the focus\r\n   * trap region.\r\n   */\r\n  focusLastTabbableElementWhenReady() {\r\n    this._ngZone.onMicrotaskEmpty.first().subscribe(() => {\r\n      this.focusLastTabbableElement();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Focuses the first tabbable element within the focus trap region.\r\n   */\r\n  focusFirstTabbableElement() {\r\n    let rootElement = this.trappedContent.nativeElement;\r\n    let redirectToElement = rootElement.querySelector('[cdk-focus-start]') as HTMLElement ||\r\n                            this._getFirstTabbableElement(rootElement);\r\n\r\n    if (redirectToElement) {\r\n      redirectToElement.focus();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Focuses the last tabbable element within the focus trap region.\r\n   */\r\n  focusLastTabbableElement() {\r\n    let rootElement = this.trappedContent.nativeElement;\r\n    let focusTargets = rootElement.querySelectorAll('[cdk-focus-end]');\r\n    let redirectToElement: HTMLElement = null;\r\n\r\n    if (focusTargets.length) {\r\n      redirectToElement = focusTargets[focusTargets.length - 1] as HTMLElement;\r\n    } else {\r\n      redirectToElement = this._getLastTabbableElement(rootElement);\r\n    }\r\n\r\n    if (redirectToElement) {\r\n      redirectToElement.focus();\r\n    }\r\n  }\r\n\r\n  /** Get the first tabbable element from a DOM subtree (inclusive). */\r\n  private _getFirstTabbableElement(root: HTMLElement): HTMLElement {\r\n    if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\r\n      return root;\r\n    }\r\n\r\n    // Iterate in DOM order.\r\n    let childCount = root.children.length;\r\n    for (let i = 0; i < childCount; i++) {\r\n      let tabbableChild = this._getFirstTabbableElement(root.children[i] as HTMLElement);\r\n      if (tabbableChild) {\r\n        return tabbableChild;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /** Get the last tabbable element from a DOM subtree (inclusive). */\r\n  private _getLastTabbableElement(root: HTMLElement): HTMLElement {\r\n    if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\r\n      return root;\r\n    }\r\n\r\n    // Iterate in reverse DOM order.\r\n    for (let i = root.children.length - 1; i >= 0; i--) {\r\n      let tabbableChild = this._getLastTabbableElement(root.children[i] as HTMLElement);\r\n      if (tabbableChild) {\r\n        return tabbableChild;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n}\r\n"]}