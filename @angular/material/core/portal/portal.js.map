{"version":3,"sources":["../../../src/lib/core/portal/portal.ts"],"names":[],"mappings":"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","file":"portal.js","sourcesContent":["import {\r\n    TemplateRef,\r\n    ViewContainerRef,\r\n    ElementRef,\r\n    ComponentRef,\r\n    Injector\r\n} from '@angular/core';\r\nimport {\r\n    NullPortalHostError,\r\n    PortalAlreadyAttachedError,\r\n    NoPortalAttachedError,\r\n    NullPortalError,\r\n    PortalHostAlreadyDisposedError,\r\n    UnknownPortalTypeError\r\n} from './portal-errors';\r\nimport {ComponentType} from '../overlay/generic-component-type';\r\n\r\n\r\n\r\n/**\r\n * A `Portal` is something that you want to render somewhere else.\r\n * It can be attach to / detached from a `PortalHost`.\r\n */\r\nexport abstract class Portal<T> {\r\n  private _attachedHost: PortalHost;\r\n\r\n  /** Attach this portal to a host. */\r\n  attach(host: PortalHost): T {\r\n    if (host == null) {\r\n      throw new NullPortalHostError();\r\n    }\r\n\r\n    if (host.hasAttached()) {\r\n      throw new PortalAlreadyAttachedError();\r\n    }\r\n\r\n    this._attachedHost = host;\r\n    return <T> host.attach(this);\r\n  }\r\n\r\n  /** Detach this portal from its host */\r\n  detach(): void {\r\n    let host = this._attachedHost;\r\n    if (host == null) {\r\n      throw new NoPortalAttachedError();\r\n    }\r\n\r\n    this._attachedHost = null;\r\n    return host.detach();\r\n  }\r\n\r\n  /** Whether this portal is attached to a host. */\r\n  get isAttached(): boolean {\r\n    return this._attachedHost != null;\r\n  }\r\n\r\n  /**\r\n   * Sets the PortalHost reference without performing `attach()`. This is used directly by\r\n   * the PortalHost when it is performing an `attach()` or `detach()`.\r\n   */\r\n  setAttachedHost(host: PortalHost) {\r\n    this._attachedHost = host;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\r\n */\r\nexport class ComponentPortal<T> extends Portal<ComponentRef<T>> {\r\n  /** The type of the component that will be instantiated for attachment. */\r\n  component: ComponentType<T>;\r\n\r\n  /**\r\n   * [Optional] Where the attached component should live in Angular's *logical* component tree.\r\n   * This is different from where the component *renders*, which is determined by the PortalHost.\r\n   * The origin necessary when the host is outside of the Angular application context.\r\n   */\r\n  viewContainerRef: ViewContainerRef;\r\n\r\n  /** [Optional] Injector used for the instantiation of the component. */\r\n  injector: Injector;\r\n\r\n  constructor(\r\n      component: ComponentType<T>,\r\n      viewContainerRef: ViewContainerRef = null,\r\n      injector: Injector = null) {\r\n    super();\r\n    this.component = component;\r\n    this.viewContainerRef = viewContainerRef;\r\n    this.injector = injector;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\r\n */\r\nexport class TemplatePortal extends Portal<Map<string, any>> {\r\n  /** The embedded template that will be used to instantiate an embedded View in the host. */\r\n  templateRef: TemplateRef<any>;\r\n\r\n  /** Reference to the ViewContainer into which the template will be stamped out. */\r\n  viewContainerRef: ViewContainerRef;\r\n\r\n  /**\r\n   * Additional locals for the instantiated embedded view.\r\n   * These locals can be seen as \"exports\" for the template, such as how ngFor has\r\n   * index / event / odd.\r\n   * See https://angular.io/docs/ts/latest/api/core/EmbeddedViewRef-class.html\r\n   */\r\n  locals: Map<string, any> = new Map<string, any>();\r\n\r\n  constructor(template: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\r\n    super();\r\n    this.templateRef = template;\r\n    this.viewContainerRef = viewContainerRef;\r\n  }\r\n\r\n  get origin(): ElementRef {\r\n    return this.templateRef.elementRef;\r\n  }\r\n\r\n  attach(host: PortalHost, locals?: Map<string, any>): Map<string, any> {\r\n    this.locals = locals == null ? new Map<string, any>() : locals;\r\n    return super.attach(host);\r\n  }\r\n\r\n  detach(): void {\r\n    this.locals = new Map<string, any>();\r\n    return super.detach();\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * A `PortalHost` is an space that can contain a single `Portal`.\r\n */\r\nexport interface PortalHost {\r\n  attach(portal: Portal<any>): any;\r\n\r\n  detach(): any;\r\n\r\n  dispose(): void;\r\n\r\n  hasAttached(): boolean;\r\n}\r\n\r\n\r\n/**\r\n * Partial implementation of PortalHost that only deals with attaching either a\r\n * ComponentPortal or a TemplatePortal.\r\n */\r\nexport abstract class BasePortalHost implements PortalHost {\r\n  /** The portal currently attached to the host. */\r\n  private _attachedPortal: Portal<any>;\r\n\r\n  /** A function that will permanently dispose this host. */\r\n  private _disposeFn: () => void;\r\n\r\n  /** Whether this host has already been permanently disposed. */\r\n  private _isDisposed: boolean = false;\r\n\r\n  /** Whether this host has an attached portal. */\r\n  hasAttached() {\r\n    return this._attachedPortal != null;\r\n  }\r\n\r\n  attach(portal: Portal<any>): any {\r\n    if (portal == null) {\r\n      throw new NullPortalError();\r\n    }\r\n\r\n    if (this.hasAttached()) {\r\n      throw new PortalAlreadyAttachedError();\r\n    }\r\n\r\n    if (this._isDisposed) {\r\n      throw new PortalHostAlreadyDisposedError();\r\n    }\r\n\r\n    if (portal instanceof ComponentPortal) {\r\n      this._attachedPortal = portal;\r\n      return this.attachComponentPortal(portal);\r\n    } else if (portal instanceof TemplatePortal) {\r\n      this._attachedPortal = portal;\r\n      return this.attachTemplatePortal(portal);\r\n    }\r\n\r\n    throw new UnknownPortalTypeError();\r\n  }\r\n\r\n  abstract attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T>;\r\n\r\n  abstract attachTemplatePortal(portal: TemplatePortal): Map<string, any>;\r\n\r\n  detach(): void {\r\n    if (this._attachedPortal) { this._attachedPortal.setAttachedHost(null); }\r\n\r\n    this._attachedPortal = null;\r\n    if (this._disposeFn != null) {\r\n      this._disposeFn();\r\n      this._disposeFn = null;\r\n    }\r\n  }\r\n\r\n  dispose() {\r\n    if (this.hasAttached()) {\r\n      this.detach();\r\n    }\r\n\r\n    this._isDisposed = true;\r\n  }\r\n\r\n  setDisposeFn(fn: () => void) {\r\n    this._disposeFn = fn;\r\n  }\r\n}\r\n"]}