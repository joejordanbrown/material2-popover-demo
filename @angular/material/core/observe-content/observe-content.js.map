{"version":3,"sources":["../../../src/lib/core/observe-content/observe-content.ts"],"names":[],"mappings":";;;;;;;;;OAAO,EACL,SAAS,EACT,UAAU,EACV,QAAQ,EAER,MAAM,EACN,YAAY,EAGb,MAAM,eAAe;AAEtB;;;GAGG;AAIH;IAME,wBAAoB,WAAuB;QAAvB,gBAAW,GAAX,WAAW,CAAY;QAH3C,8DAA8D;QACjC,UAAK,GAAG,IAAI,YAAY,EAAQ,CAAC;IAEhB,CAAC;IAE/C,2CAAkB,GAAlB;QAAA,iBAQC;QAPC,IAAI,CAAC,SAAS,GAAG,IAAI,gBAAgB,CAAC,UAAA,SAAS,IAAI,OAAA,SAAS,CAAC,OAAO,CAAC,cAAM,OAAA,KAAI,CAAC,KAAK,CAAC,IAAI,EAAE,EAAjB,CAAiB,CAAC,EAA1C,CAA0C,CAAC,CAAC;QAE/F,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,EAAE;YACrD,aAAa,EAAE,IAAI;YACnB,SAAS,EAAE,IAAI;YACf,OAAO,EAAE,IAAI;SACd,CAAC,CAAC;IACL,CAAC;IAED,oCAAW,GAAX;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;YACnB,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,CAAC;QAC9B,CAAC;IACH,CAAC;IAlBD;QAAC,MAAM,CAAC,mBAAmB,CAAC;;iDAAA;IAP9B;QAAC,SAAS,CAAC;YACT,QAAQ,EAAE,qBAAqB;SAChC,CAAC;;sBAAA;IAwBF,qBAAC;AAAD,CAvBA,AAuBC,IAAA;AAMD;IAAA;IAQA,CAAC;IAPC,kBAAkB;IACX,4BAAO,GAAd;QACE,MAAM,CAAC;YACL,QAAQ,EAAE,oBAAoB;YAC9B,SAAS,EAAE,EAAE;SACd,CAAC;IACJ,CAAC;IAXH;QAAC,QAAQ,CAAC;YACR,OAAO,EAAE,CAAC,cAAc,CAAC;YACzB,YAAY,EAAE,CAAC,cAAc,CAAC;SAC/B,CAAC;;4BAAA;IASF,2BAAC;AAAD,CARA,AAQC,IAAA","file":"observe-content.js","sourcesContent":["import {\r\n  Directive,\r\n  ElementRef,\r\n  NgModule,\r\n  ModuleWithProviders,\r\n  Output,\r\n  EventEmitter,\r\n  OnDestroy,\r\n  AfterContentInit\r\n} from '@angular/core';\r\n\r\n/**\r\n * Directive that triggers a callback whenever the content of\r\n * its associated element has changed.\r\n */\r\n@Directive({\r\n  selector: '[cdkObserveContent]'\r\n})\r\nexport class ObserveContent implements AfterContentInit, OnDestroy {\r\n  private _observer: MutationObserver;\r\n\r\n  /** Event emitted for each change in the element's content. */\r\n  @Output('cdkObserveContent') event = new EventEmitter<void>();\r\n\r\n  constructor(private _elementRef: ElementRef) {}\r\n\r\n  ngAfterContentInit() {\r\n    this._observer = new MutationObserver(mutations => mutations.forEach(() => this.event.emit()));\r\n\r\n    this._observer.observe(this._elementRef.nativeElement, {\r\n      characterData: true,\r\n      childList: true,\r\n      subtree: true\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this._observer) {\r\n      this._observer.disconnect();\r\n    }\r\n  }\r\n}\r\n\r\n@NgModule({\r\n  exports: [ObserveContent],\r\n  declarations: [ObserveContent]\r\n})\r\nexport class ObserveContentModule {\r\n  /** @deprecated */\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: ObserveContentModule,\r\n      providers: []\r\n    };\r\n  }\r\n}\r\n"]}