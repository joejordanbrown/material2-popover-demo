{"version":3,"sources":["../../../src/lib/core/selection/selection.ts"],"names":[],"mappings":"OAAO,EAAC,OAAO,EAAC,MAAM,cAAc;AAGpC;;;GAGG;AACH;IAyBE,wBAAoB,QAAgB,EAAE,uBAA6B;QAzBrE,iBAkHC;QAzFa,wBAAwB,GAAxB,gBAAwB;QAAhB,aAAQ,GAAR,QAAQ,CAAQ;QAxBpC,iCAAiC;QACzB,eAAU,GAAW,IAAI,GAAG,EAAE,CAAC;QAEvC,2FAA2F;QACnF,sBAAiB,GAAQ,EAAE,CAAC;QAEpC,wFAAwF;QAChF,oBAAe,GAAQ,EAAE,CAAC;QAclC,gDAAgD;QAChD,aAAQ,GAAgC,IAAI,OAAO,EAAE,CAAC;QAGpD,EAAE,CAAC,CAAC,uBAAuB,CAAC,CAAC,CAAC;YAC5B,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACb,uBAAuB,CAAC,OAAO,CAAC,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,aAAa,CAAC,KAAK,CAAC,EAAzB,CAAyB,CAAC,CAAC;YACtE,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,IAAI,CAAC,aAAa,CAAC,uBAAuB,CAAC,CAAC,CAAC,CAAC,CAAC;YACjD,CAAC;YAED,oFAAoF;YACpF,IAAI,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC,CAAC;QAClC,CAAC;IACH,CAAC;IAtBD,sBAAI,oCAAQ;QADZ,yBAAyB;aACzB;YACE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;gBACpB,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,CAAC;YACxD,CAAC;YAED,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;QACxB,CAAC;;;OAAA;IAkBD;;OAEG;IACH,+BAAM,GAAN,UAAO,KAAQ;QACb,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAC1B,IAAI,CAAC,gBAAgB,EAAE,CAAC;IAC1B,CAAC;IAED;;OAEG;IACH,iCAAQ,GAAR,UAAS,KAAQ;QACf,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;QAC5B,IAAI,CAAC,gBAAgB,EAAE,CAAC;IAC1B,CAAC;IAED;;OAEG;IACH,8BAAK,GAAL;QACE,IAAI,CAAC,UAAU,EAAE,CAAC;QAClB,IAAI,CAAC,gBAAgB,EAAE,CAAC;IAC1B,CAAC;IAED;;OAEG;IACH,mCAAU,GAAV,UAAW,KAAQ;QACjB,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;IACpC,CAAC;IAED;;OAEG;IACH,gCAAO,GAAP;QACE,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,KAAK,CAAC,CAAC;IACpC,CAAC;IAED,qFAAqF;IAC7E,yCAAgB,GAAxB;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,IAAI,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC,CAAC;YACjE,IAAI,SAAS,GAAG,IAAI,eAAe,CAAC,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;YAElF,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YAC9B,IAAI,CAAC,iBAAiB,GAAG,EAAE,CAAC;YAC5B,IAAI,CAAC,eAAe,GAAG,EAAE,CAAC;YAC1B,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACxB,CAAC;IACH,CAAC;IAED,uBAAuB;IACf,sCAAa,GAArB,UAAsB,KAAQ;QAC5B,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAC5B,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACnB,IAAI,CAAC,UAAU,EAAE,CAAC;YACpB,CAAC;YAED,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YAC3B,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACnC,CAAC;IACH,CAAC;IAEA,yBAAyB;IACjB,wCAAe,GAAvB,UAAwB,KAAQ;QAC9B,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAC3B,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YAC9B,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACrC,CAAC;IACH,CAAC;IAEF,sCAAsC;IAC9B,mCAAU,GAAlB;QAAA,iBAIC;QAHC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;YACpB,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,eAAe,CAAC,KAAK,CAAC,EAA3B,CAA2B,CAAC,CAAC;QAChE,CAAC;IACH,CAAC;IACH,qBAAC;AAAD,CAlHA,AAkHC,IAAA;AAED;;;GAGG;AACH;IACE,yBAAmB,KAAW,EAAS,OAAa;QAAjC,UAAK,GAAL,KAAK,CAAM;QAAS,YAAO,GAAP,OAAO,CAAM;IAAI,CAAC;IAC3D,sBAAC;AAAD,CAFA,AAEC,IAAA","file":"selection.js","sourcesContent":["import {Subject} from 'rxjs/Subject';\r\n\r\n\r\n/**\r\n * Class to be used to power selecting one or more options from a list.\r\n * @docs-private\r\n */\r\nexport class SelectionModel<T> {\r\n  /** Currently-selected values. */\r\n  private _selection: Set<T> = new Set();\r\n\r\n  /** Keeps track of the deselected options that haven't been emitted by the change event. */\r\n  private _deselectedToEmit: T[] = [];\r\n\r\n  /** Keeps track of the selected option that haven't been emitted by the change event. */\r\n  private _selectedToEmit: T[] = [];\r\n\r\n  /** Cache for the array value of the selected items. */\r\n  private _selected: T[];\r\n\r\n  /** Selected value(s). */\r\n  get selected(): T[] {\r\n    if (!this._selected) {\r\n      this._selected = Array.from(this._selection.values());\r\n    }\r\n\r\n    return this._selected;\r\n  }\r\n\r\n  /** Event emitted when the value has changed. */\r\n  onChange: Subject<SelectionChange<T>> = new Subject();\r\n\r\n  constructor(private _isMulti = false, initiallySelectedValues?: T[]) {\r\n    if (initiallySelectedValues) {\r\n      if (_isMulti) {\r\n        initiallySelectedValues.forEach(value => this._markSelected(value));\r\n      } else {\r\n        this._markSelected(initiallySelectedValues[0]);\r\n      }\r\n\r\n      // Clear the array in order to avoid firing the change event for preselected values.\r\n      this._selectedToEmit.length = 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Selects a value or an array of values.\r\n   */\r\n  select(value: T): void {\r\n    this._markSelected(value);\r\n    this._emitChangeEvent();\r\n  }\r\n\r\n  /**\r\n   * Deselects a value or an array of values.\r\n   */\r\n  deselect(value: T): void {\r\n    this._unmarkSelected(value);\r\n    this._emitChangeEvent();\r\n  }\r\n\r\n  /**\r\n   * Clears all of the selected values.\r\n   */\r\n  clear(): void {\r\n    this._unmarkAll();\r\n    this._emitChangeEvent();\r\n  }\r\n\r\n  /**\r\n   * Determines whether a value is selected.\r\n   */\r\n  isSelected(value: T): boolean {\r\n    return this._selection.has(value);\r\n  }\r\n\r\n  /**\r\n   * Determines whether the model has a value.\r\n   */\r\n  isEmpty(): boolean {\r\n    return this._selection.size === 0;\r\n  }\r\n\r\n  /** Emits a change event and clears the records of selected and deselected values. */\r\n  private _emitChangeEvent() {\r\n    if (this._selectedToEmit.length || this._deselectedToEmit.length) {\r\n      let eventData = new SelectionChange(this._selectedToEmit, this._deselectedToEmit);\r\n\r\n      this.onChange.next(eventData);\r\n      this._deselectedToEmit = [];\r\n      this._selectedToEmit = [];\r\n      this._selected = null;\r\n    }\r\n  }\r\n\r\n  /** Selects a value. */\r\n  private _markSelected(value: T) {\r\n    if (!this.isSelected(value)) {\r\n      if (!this._isMulti) {\r\n        this._unmarkAll();\r\n      }\r\n\r\n      this._selection.add(value);\r\n      this._selectedToEmit.push(value);\r\n    }\r\n  }\r\n\r\n   /** Deselects a value. */\r\n   private _unmarkSelected(value: T) {\r\n     if (this.isSelected(value)) {\r\n       this._selection.delete(value);\r\n       this._deselectedToEmit.push(value);\r\n     }\r\n   }\r\n\r\n  /** Clears out the selected values. */\r\n  private _unmarkAll() {\r\n    if (!this.isEmpty()) {\r\n      this._selection.forEach(value => this._unmarkSelected(value));\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Describes an event emitted when the value of a MdSelectionModel has changed.\r\n * @docs-private\r\n */\r\nexport class SelectionChange<T> {\r\n  constructor(public added?: T[], public removed?: T[]) { }\r\n}\r\n"]}