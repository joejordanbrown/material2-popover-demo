{"version":3,"sources":["../../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts"],"names":[],"mappings":";;;;;;;;;OAAO,EACL,SAAS,EACT,iBAAiB,EACjB,KAAK,EACL,UAAU,EACV,QAAQ,EACT,MAAM,eAAe;AAItB;;;;;;;;;;GAUG;AAaH;IAsBE,0BAAoB,WAAuB,EAAU,SAAmB;QAApD,gBAAW,GAAX,WAAW,CAAY;QAAU,cAAS,GAAT,SAAS,CAAU;QArBxE,qCAAqC;QAC5B,UAAK,GAA0B,WAAW,CAAC;QAEpD,wCAAwC;QAC/B,aAAQ,GAAY,KAAK,CAAC;QAkBjC,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC;IACxB,CAAC;IAfD,sBAAI,mCAAK;QAFT,6BAA6B;aAE7B,cAAsB,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;aAC3C,UAAU,KAAa;YACrB,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACV,IAAI,aAAa,GAAG,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC;gBAEnD,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,aAAa,EAAE,QAAM,IAAI,CAAC,KAAO,EAAE,KAAK,CAAC,CAAC;gBACzE,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,aAAa,EAAE,QAAM,KAAO,EAAE,IAAI,CAAC,CAAC;gBACnE,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;YACtB,CAAC;QACH,CAAC;;;OAT0C;;IAP3C;QAAC,KAAK,EAAE;;mDAAA;IAGR;QAAC,KAAK,EAAE;;sDAAA;IAGR;QAAC,KAAK,EAAE;;iDAAA;IApBV;QAAC,SAAS,CAAC;YACT,QAAQ,EAAE,MAAM,CAAC,EAAE;YACnB,aAAa,EAAE,iBAAiB,CAAC,IAAI;YACrC,QAAQ,EAAE,oBAAoB;YAC9B,SAAS,EAAE,CAAC,qBAAqB,CAAC;YAClC,QAAQ,EAAE,EAAE;YACZ,IAAI,EAAE;gBACJ,0CAA0C,EAAE,2BAA2B;gBACvE,oCAAoC,EAAE,qBAAqB;gBAC3D,qCAAqC,EAAE,UAAU;aAClD;SACF,CAAC;;wBAAA;IA0BF,uBAAC;AAAD,CAzBA,AAyBC,IAAA","file":"pseudo-checkbox.js","sourcesContent":["import {\r\n  Component,\r\n  ViewEncapsulation,\r\n  Input,\r\n  ElementRef,\r\n  Renderer,\r\n} from '@angular/core';\r\n\r\nexport type MdPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\r\n\r\n/**\r\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\r\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\r\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\r\n *\r\n * Note that this component will be completely invisible to screen-reader users. This is *not*\r\n * interchangeable with <md-checkbox> and should *not* be used if the user would directly interact\r\n * with the checkbox. The pseudo-checkbox should only be used as an implementation detail of\r\n * more complex components that appropriately handle selected / checked state.\r\n * @docs-private\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  encapsulation: ViewEncapsulation.None,\r\n  selector: 'md-pseudo-checkbox',\r\n  styleUrls: ['pseudo-checkbox.css'],\r\n  template: '',\r\n  host: {\r\n    '[class.md-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\r\n    '[class.md-pseudo-checkbox-checked]': 'state === \"checked\"',\r\n    '[class.md-pseudo-checkbox-disabled]': 'disabled',\r\n  },\r\n})\r\nexport class MdPseudoCheckbox {\r\n  /** Display state of the checkbox. */\r\n  @Input() state: MdPseudoCheckboxState = 'unchecked';\r\n\r\n  /** Whether the checkbox is disabled. */\r\n  @Input() disabled: boolean = false;\r\n\r\n  /** Color of the checkbox. */\r\n  @Input()\r\n  get color(): string { return this._color; };\r\n  set color(value: string) {\r\n    if (value) {\r\n      let nativeElement = this._elementRef.nativeElement;\r\n\r\n      this._renderer.setElementClass(nativeElement, `md-${this.color}`, false);\r\n      this._renderer.setElementClass(nativeElement, `md-${value}`, true);\r\n      this._color = value;\r\n    }\r\n  }\r\n\r\n  private _color: string;\r\n\r\n  constructor(private _elementRef: ElementRef, private _renderer: Renderer) {\r\n    this.color = 'accent';\r\n  }\r\n}\r\n"]}